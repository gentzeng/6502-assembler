var AssemblerSixFiveOTwo = (function (exports) {
	'use strict';

	/*!
	 * jQuery JavaScript Library v3.6.0
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright OpenJS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2021-03-02T17:08Z
	 */
	( function( global, factory ) {

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : undefined, function( window, noGlobal ) {

	var arr = [];

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var flat = function( array ) {
		return arr.concat.apply( [], array );
	};


	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};

	var isFunction = function isFunction( obj ) {

			// Support: Chrome <=57, Firefox <=52
			// In some browsers, typeof returns "function" for HTML <object> elements
			// (i.e., `typeof document.createElement( "object" ) === "function"`).
			// We don't want to classify *any* DOM node as a function.
			// Support: QtWeb <=3.8.5, WebKit <=534.34, wkhtmltopdf tool <=0.12.5
			// Plus for old WebKit, typeof returns "function" for HTML collections
			// (e.g., `typeof document.getElementsByTagName("div") === "function"`). (gh-4756)
			return typeof obj === "function" && typeof obj.nodeType !== "number" &&
				typeof obj.item !== "function";
		};


	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};


	var document = window.document;



		var preservedScriptAttributes = {
			type: true,
			src: true,
			nonce: true,
			noModule: true
		};

		function DOMEval( code, node, doc ) {
			doc = doc || document;

			var i, val,
				script = doc.createElement( "script" );

			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {

					// Support: Firefox 64+, Edge 18+
					// Some browsers don't support the "nonce" property on scripts.
					// On the other hand, just using `getAttribute` is not enough as
					// the `nonce` attribute is reset to an empty string whenever it
					// becomes browsing-context connected.
					// See https://github.com/whatwg/html/issues/2369
					// See https://html.spec.whatwg.org/#nonce-attributes
					// The `node.getAttribute` check was added for the sake of
					// `jQuery.globalEval` so that it can fake a nonce-containing node
					// via an object.
					val = node[ i ] || node.getAttribute && node.getAttribute( i );
					if ( val ) {
						script.setAttribute( i, val );
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}


	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.6.0",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		even: function() {
			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
				return ( i + 1 ) % 2;
			} ) );
		},

		odd: function() {
			return this.pushStack( jQuery.grep( this, function( _elem, i ) {
				return i % 2;
			} ) );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					copy = options[ name ];

					// Prevent Object.prototype pollution
					// Prevent never-ending loop
					if ( name === "__proto__" || target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {
						src = target[ name ];

						// Ensure proper type for the source value
						if ( copyIsArray && !Array.isArray( src ) ) {
							clone = [];
						} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
							clone = {};
						} else {
							clone = src;
						}
						copyIsArray = false;

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a provided context; falls back to the global one
		// if not specified.
		globalEval: function( code, options, doc ) {
			DOMEval( code, { nonce: options && options.nonce }, doc );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
							[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return flat( ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
		function( _i, name ) {
			class2type[ "[object " + name + "]" ] = name.toLowerCase();
		} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );

		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.6
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://js.foundation/
	 *
	 * Date: 2021-02-16
	 */
	( function( window ) {
	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		nonnativeSelectorCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ( {} ).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		pushNative = arr.push,
		push = arr.push,
		slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[ i ] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|" +
			"ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
		identifier = "(?:\\\\[\\da-fA-F]{1,6}" + whitespace +
			"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +

			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +

			// "Attribute values must be CSS identifiers [capture 5]
			// or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" +
			whitespace + "*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +

			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +

			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +

			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" +
			whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace +
			"*" ),
		rdescend = new RegExp( whitespace + "|>" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" +
				whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" +
				whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),

			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace +
				"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
				"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rhtml = /HTML$/i,
		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + whitespace + "?|\\\\([^\\r\\n\\f])", "g" ),
		funescape = function( escape, nonHex ) {
			var high = "0x" + escape.slice( 1 ) - 0x10000;

			return nonHex ?

				// Strip the backslash prefix from a non-hex escape sequence
				nonHex :

				// Replace a hexadecimal escape sequence with the encoded Unicode code point
				// Support: IE <=11+
				// For values outside the Basic Multilingual Plane (BMP), manually construct a
				// surrogate pair
				high < 0 ?
					String.fromCharCode( high + 0x10000 ) :
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" +
					ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		inDisabledFieldset = addCombinator(
			function( elem ) {
				return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			( arr = slice.call( preferredDoc.childNodes ) ),
			preferredDoc.childNodes
		);

		// Support: Android<4.0
		// Detect silently failing push.apply
		// eslint-disable-next-line no-unused-expressions
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				pushNative.apply( target, slice.call( els ) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;

				// Can't trust NodeList.length
				while ( ( target[ j++ ] = els[ i++ ] ) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {
			setDocument( context );
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && ( match = rquickExpr.exec( selector ) ) ) {

					// ID selector
					if ( ( m = match[ 1 ] ) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( ( elem = context.getElementById( m ) ) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && ( elem = newContext.getElementById( m ) ) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[ 2 ] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( ( m = match[ 3 ] ) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!nonnativeSelectorCache[ selector + " " ] &&
					( !rbuggyQSA || !rbuggyQSA.test( selector ) ) &&

					// Support: IE 8 only
					// Exclude object elements
					( nodeType !== 1 || context.nodeName.toLowerCase() !== "object" ) ) {

					newSelector = selector;
					newContext = context;

					// qSA considers elements outside a scoping root when evaluating child or
					// descendant combinators, which is not what we want.
					// In such cases, we work around the behavior by prefixing every selector in the
					// list with an ID selector referencing the scope context.
					// The technique has to be used as well when a leading combinator is used
					// as such selectors are not recognized by querySelectorAll.
					// Thanks to Andrew Dupont for this technique.
					if ( nodeType === 1 &&
						( rdescend.test( selector ) || rcombinators.test( selector ) ) ) {

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;

						// We can use :scope instead of the ID hack if the browser
						// supports it & if we're not changing the context.
						if ( newContext !== context || !support.scope ) {

							// Capture the context ID, setting it first if necessary
							if ( ( nid = context.getAttribute( "id" ) ) ) {
								nid = nid.replace( rcssescape, fcssescape );
							} else {
								context.setAttribute( "id", ( nid = expando ) );
							}
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
								toSelector( groups[ i ] );
						}
						newSelector = groups.join( "," );
					}

					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
						nonnativeSelectorCache( selector, true );
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {

			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {

				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return ( cache[ key + " " ] = value );
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement( "fieldset" );

		try {
			return !!fn( el );
		} catch ( e ) {
			return false;
		} finally {

			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}

			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split( "|" ),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[ i ] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( ( cur = cur.nextSibling ) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return ( name === "input" || name === "button" ) && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction( function( argument ) {
			argument = +argument;
			return markFunction( function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ ( j = matchIndexes[ i ] ) ] ) {
						seed[ j ] = !( matches[ j ] = seed[ j ] );
					}
				}
			} );
		} );
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Support: IE <=8
		// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
		// https://bugs.jquery.com/ticket/4833
		return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( doc == document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9 - 11+, Edge 12 - 18+
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( preferredDoc != document &&
			( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		// Support: IE 8 - 11+, Edge 12 - 18+, Chrome <=16 - 25 only, Firefox <=3.6 - 31 only,
		// Safari 4 - 5 only, Opera <=11.6 - 12.x only
		// IE/Edge & older browsers don't support the :scope pseudo-class.
		// Support: Safari 6.0 only
		// Safari 6.0 supports :scope but it's an alias of :root there.
		support.scope = assert( function( el ) {
			docElem.appendChild( el ).appendChild( document.createElement( "div" ) );
			return typeof el.querySelectorAll !== "undefined" &&
				!el.querySelectorAll( ":scope fieldset div" ).length;
		} );

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert( function( el ) {
			el.className = "i";
			return !el.getAttribute( "className" );
		} );

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert( function( el ) {
			el.appendChild( document.createComment( "" ) );
			return !el.getElementsByTagName( "*" ).length;
		} );

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert( function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		} );

		// ID filter and find
		if ( support.getById ) {
			Expr.filter[ "ID" ] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute( "id" ) === attrId;
				};
			};
			Expr.find[ "ID" ] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter[ "ID" ] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode( "id" );
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find[ "ID" ] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode( "id" );
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( ( elem = elems[ i++ ] ) ) {
							node = elem.getAttributeNode( "id" );
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find[ "TAG" ] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,

					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( ( elem = results[ i++ ] ) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find[ "CLASS" ] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( ( support.qsa = rnative.test( document.querySelectorAll ) ) ) {

			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert( function( el ) {

				var input;

				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll( "[msallowcapture^='']" ).length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll( "[selected]" ).length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push( "~=" );
				}

				// Support: IE 11+, Edge 15 - 18+
				// IE 11/Edge don't find elements on a `[name='']` query in some cases.
				// Adding a temporary attribute to the document before the selection works
				// around the issue.
				// Interestingly, IE 10 & older don't seem to have the issue.
				input = document.createElement( "input" );
				input.setAttribute( "name", "" );
				el.appendChild( input );
				if ( !el.querySelectorAll( "[name='']" ).length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*name" + whitespace + "*=" +
						whitespace + "*(?:''|\"\")" );
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll( ":checked" ).length ) {
					rbuggyQSA.push( ":checked" );
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push( ".#.+[+~]" );
				}

				// Support: Firefox <=3.6 - 5 only
				// Old Firefox doesn't throw on a badly-escaped identifier.
				el.querySelectorAll( "\\\f" );
				rbuggyQSA.push( "[\\r\\n\\f]" );
			} );

			assert( function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement( "input" );
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll( "[name=d]" ).length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll( ":enabled" ).length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll( ":disabled" ).length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: Opera 10 - 11 only
				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll( "*,:x" );
				rbuggyQSA.push( ",.*:" );
			} );
		}

		if ( ( support.matchesSelector = rnative.test( ( matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector ) ) ) ) {

			assert( function( el ) {

				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			} );
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join( "|" ) );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				) );
			} :
			function( a, b ) {
				if ( b ) {
					while ( ( b = b.parentNode ) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			// Support: IE 11+, Edge 17 - 18+
			// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
			// two documents; shallow comparisons work.
			// eslint-disable-next-line eqeqeq
			compare = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				( !support.sortDetached && b.compareDocumentPosition( a ) === compare ) ) {

				// Choose the first element that is related to our preferred document
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				if ( a == document || a.ownerDocument == preferredDoc &&
					contains( preferredDoc, a ) ) {
					return -1;
				}

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				// eslint-disable-next-line eqeqeq
				if ( b == document || b.ownerDocument == preferredDoc &&
					contains( preferredDoc, b ) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {

			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {

				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				/* eslint-disable eqeqeq */
				return a == document ? -1 :
					b == document ? 1 :
					/* eslint-enable eqeqeq */
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( ( cur = cur.parentNode ) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( ( cur = cur.parentNode ) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[ i ] === bp[ i ] ) {
				i++;
			}

			return i ?

				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[ i ], bp[ i ] ) :

				// Otherwise nodes in our document sort first
				// Support: IE 11+, Edge 17 - 18+
				// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
				// two documents; shallow comparisons work.
				/* eslint-disable eqeqeq */
				ap[ i ] == preferredDoc ? -1 :
				bp[ i ] == preferredDoc ? 1 :
				/* eslint-enable eqeqeq */
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		setDocument( elem );

		if ( support.matchesSelector && documentIsHTML &&
			!nonnativeSelectorCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||

					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch ( e ) {
				nonnativeSelectorCache( expr, true );
			}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {

		// Set document vars if needed
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( ( context.ownerDocument || context ) != document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {

		// Set document vars if needed
		// Support: IE 11+, Edge 17 - 18+
		// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
		// two documents; shallow comparisons work.
		// eslint-disable-next-line eqeqeq
		if ( ( elem.ownerDocument || elem ) != document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				( val = elem.getAttributeNode( name ) ) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return ( sel + "" ).replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( ( elem = results[ i++ ] ) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {

			// If no nodeType, this is expected to be an array
			while ( ( node = elem[ i++ ] ) ) {

				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {

			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {

				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}

		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[ 1 ] = match[ 1 ].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[ 3 ] = ( match[ 3 ] || match[ 4 ] ||
					match[ 5 ] || "" ).replace( runescape, funescape );

				if ( match[ 2 ] === "~=" ) {
					match[ 3 ] = " " + match[ 3 ] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {

				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[ 1 ] = match[ 1 ].toLowerCase();

				if ( match[ 1 ].slice( 0, 3 ) === "nth" ) {

					// nth-* requires argument
					if ( !match[ 3 ] ) {
						Sizzle.error( match[ 0 ] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[ 4 ] = +( match[ 4 ] ?
						match[ 5 ] + ( match[ 6 ] || 1 ) :
						2 * ( match[ 3 ] === "even" || match[ 3 ] === "odd" ) );
					match[ 5 ] = +( ( match[ 7 ] + match[ 8 ] ) || match[ 3 ] === "odd" );

					// other types prohibit arguments
				} else if ( match[ 3 ] ) {
					Sizzle.error( match[ 0 ] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[ 6 ] && match[ 2 ];

				if ( matchExpr[ "CHILD" ].test( match[ 0 ] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[ 3 ] ) {
					match[ 2 ] = match[ 4 ] || match[ 5 ] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&

					// Get excess from tokenize (recursively)
					( excess = tokenize( unquoted, true ) ) &&

					// advance to the next closing parenthesis
					( excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length ) ) {

					// excess is a negative index
					match[ 0 ] = match[ 0 ].slice( 0, excess );
					match[ 2 ] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() {
						return true;
					} :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					( pattern = new RegExp( "(^|" + whitespace +
						")" + className + "(" + whitespace + "|$)" ) ) && classCache(
							className, function( elem ) {
								return pattern.test(
									typeof elem.className === "string" && elem.className ||
									typeof elem.getAttribute !== "undefined" &&
										elem.getAttribute( "class" ) ||
									""
								);
					} );
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					/* eslint-disable max-len */

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
					/* eslint-enable max-len */

				};
			},

			"CHILD": function( type, what, _argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, _context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( ( node = node[ dir ] ) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}

									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || ( node[ expando ] = {} );

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									( outerCache[ node.uniqueID ] = {} );

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( ( node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									( diff = nodeIndex = 0 ) || start.pop() ) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {

								// Use previously-cached element index if available
								if ( useCache ) {

									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || ( node[ expando ] = {} );

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										( outerCache[ node.uniqueID ] = {} );

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {

									// Use the same loop as above to seek `elem` from the start
									while ( ( node = ++nodeIndex && node && node[ dir ] ||
										( diff = nodeIndex = 0 ) || start.pop() ) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] ||
													( node[ expando ] = {} );

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													( outerCache[ node.uniqueID ] = {} );

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {

				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction( function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[ i ] );
								seed[ idx ] = !( matches[ idx ] = matched[ i ] );
							}
						} ) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {

			// Potentially complex pseudos
			"not": markFunction( function( selector ) {

				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction( function( seed, matches, _context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( ( elem = unmatched[ i ] ) ) {
								seed[ i ] = !( matches[ i ] = elem );
							}
						}
					} ) :
					function( elem, _context, xml ) {
						input[ 0 ] = elem;
						matcher( input, null, xml, results );

						// Don't keep the element (issue #299)
						input[ 0 ] = null;
						return !results.pop();
					};
			} ),

			"has": markFunction( function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			} ),

			"contains": markFunction( function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
				};
			} ),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {

				// lang value must be a valid identifier
				if ( !ridentifier.test( lang || "" ) ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( ( elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute( "xml:lang" ) || elem.getAttribute( "lang" ) ) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( ( elem = elem.parentNode ) && elem.nodeType === 1 );
					return false;
				};
			} ),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement &&
					( !document.hasFocus || document.hasFocus() ) &&
					!!( elem.type || elem.href || ~elem.tabIndex );
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {

				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return ( nodeName === "input" && !!elem.checked ) ||
					( nodeName === "option" && !!elem.selected );
			},

			"selected": function( elem ) {

				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					// eslint-disable-next-line no-unused-expressions
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {

				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos[ "empty" ]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( ( attr = elem.getAttribute( "type" ) ) == null ||
						attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo( function() {
				return [ 0 ];
			} ),

			"last": createPositionalPseudo( function( _matchIndexes, length ) {
				return [ length - 1 ];
			} ),

			"eq": createPositionalPseudo( function( _matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			} ),

			"even": createPositionalPseudo( function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),

			"odd": createPositionalPseudo( function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),

			"lt": createPositionalPseudo( function( matchIndexes, length, argument ) {
				var i = argument < 0 ?
					argument + length :
					argument > length ?
						length :
						argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} ),

			"gt": createPositionalPseudo( function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			} )
		}
	};

	Expr.pseudos[ "nth" ] = Expr.pseudos[ "eq" ];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || ( match = rcomma.exec( soFar ) ) ) {
				if ( match ) {

					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[ 0 ].length ) || soFar;
				}
				groups.push( ( tokens = [] ) );
			}

			matched = false;

			// Combinators
			if ( ( match = rcombinators.exec( soFar ) ) ) {
				matched = match.shift();
				tokens.push( {
					value: matched,

					// Cast descendant combinators to space
					type: match[ 0 ].replace( rtrim, " " )
				} );
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( ( match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
					( match = preFilters[ type ]( match ) ) ) ) {
					matched = match.shift();
					tokens.push( {
						value: matched,
						type: type,
						matches: match
					} );
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :

				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[ i ].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?

			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( ( elem = elem[ dir ] ) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( ( elem = elem[ dir ] ) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( ( elem = elem[ dir ] ) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || ( elem[ expando ] = {} );

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] ||
								( outerCache[ elem.uniqueID ] = {} );

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( ( oldCache = uniqueCache[ key ] ) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return ( newCache[ 2 ] = oldCache[ 2 ] );
							} else {

								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( ( newCache[ 2 ] = matcher( elem, context, xml ) ) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[ i ]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[ 0 ];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[ i ], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( ( elem = unmatched[ i ] ) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction( function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts(
					selector || "*",
					context.nodeType ? [ context ] : context,
					[]
				),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?

					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( ( elem = temp[ i ] ) ) {
						matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {

						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( ( elem = matcherOut[ i ] ) ) {

								// Restore matcherIn since elem is not yet a final match
								temp.push( ( matcherIn[ i ] = elem ) );
							}
						}
						postFinder( null, ( matcherOut = [] ), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( ( elem = matcherOut[ i ] ) &&
							( temp = postFinder ? indexOf( seed, elem ) : preMap[ i ] ) > -1 ) {

							seed[ temp ] = !( results[ temp ] = elem );
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		} );
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[ 0 ].type ],
			implicitRelative = leadingRelative || Expr.relative[ " " ],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					( checkContext = context ).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );

				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( ( matcher = Expr.relative[ tokens[ i ].type ] ) ) {
				matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
			} else {
				matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {

					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[ j ].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(

						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens
							.slice( 0, i - 1 )
							.concat( { value: tokens[ i - 2 ].type === " " ? "*" : "" } )
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,

					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find[ "TAG" ]( "*", outermost ),

					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
					len = elems.length;

				if ( outermost ) {

					// Support: IE 11+, Edge 17 - 18+
					// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
					// two documents; shallow comparisons work.
					// eslint-disable-next-line eqeqeq
					outermostContext = context == document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;

						// Support: IE 11+, Edge 17 - 18+
						// IE/Edge sometimes throw a "Permission denied" error when strict-comparing
						// two documents; shallow comparisons work.
						// eslint-disable-next-line eqeqeq
						if ( !context && elem.ownerDocument != document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( ( matcher = elementMatchers[ j++ ] ) ) {
							if ( matcher( elem, context || document, xml ) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {

						// They will have gone through all possible matchers
						if ( ( elem = !matcher && elem ) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( ( matcher = setMatchers[ j++ ] ) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {

						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !( unmatched[ i ] || setMatched[ i ] ) ) {
									setMatched[ i ] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {

			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[ i ] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache(
				selector,
				matcherFromGroupMatchers( elementMatchers, setMatchers )
			);

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( ( selector = compiled.selector || selector ) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[ 0 ] = match[ 0 ].slice( 0 );
			if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

				context = ( Expr.find[ "ID" ]( token.matches[ 0 ]
					.replace( runescape, funescape ), context ) || [] )[ 0 ];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr[ "needsContext" ].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[ i ];

				// Abort if we hit a combinator
				if ( Expr.relative[ ( type = token.type ) ] ) {
					break;
				}
				if ( ( find = Expr.find[ type ] ) ) {

					// Search, expanding context for leading sibling combinators
					if ( ( seed = find(
						token.matches[ 0 ].replace( runescape, funescape ),
						rsibling.test( tokens[ 0 ].type ) && testContext( context.parentNode ) ||
							context
					) ) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert( function( el ) {

		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement( "fieldset" ) ) & 1;
	} );

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert( function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute( "href" ) === "#";
	} ) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		} );
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert( function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	} ) ) {
		addHandle( "value", function( elem, _name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		} );
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert( function( el ) {
		return el.getAttribute( "disabled" ) == null;
	} ) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
					( val = elem.getAttributeNode( name ) ) && val.specified ?
						val.value :
						null;
			}
		} );
	}

	return Sizzle;

	} )( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	}
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, _i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, _i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, _i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
			if ( elem.contentDocument != null &&

				// Support: IE 11+
				// <object> elements with no `data` attribute has an object
				// `contentDocument` with a `null` prototype.
				getProto( elem.contentDocument ) ) {

				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if ( nodeName( elem, "template" ) ) {
				elem = elem.content || elem;
			}

			return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( _i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,

						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the primary Deferred
				primary = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							primary.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, primary.done( updateFunc( i ) ).resolve, primary.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( primary.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return primary.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), primary.reject );
			}

			return primary.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, _key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
							value :
							value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};


	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase( _all, letter ) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var documentElement = document.documentElement;



		var isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem );
			},
			composed = { composed: true };

		// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
		// Check attachment across shadow DOM boundaries when possible (gh-3504)
		// Support: iOS 10.0-10.2 only
		// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
		// leading to errors. We need to check for `getRootNode`.
		if ( documentElement.getRootNode ) {
			isAttached = function( elem ) {
				return jQuery.contains( elem.ownerDocument, elem ) ||
					elem.getRootNode( composed ) === elem.ownerDocument;
			};
		}
	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				isAttached( elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};



	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = elem.nodeType &&
				( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while ( maxIterations-- ) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;

			}

			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

		// Support: IE <=9 only
		// IE <=9 replaces <option> tags with their contents when inserted outside of
		// the select element.
		div.innerHTML = "<option></option>";
		support.option = !!div.lastChild;
	} )();


	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	// Support: IE <=9 only
	if ( !support.option ) {
		wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
	}


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, attached, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( toType( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			attached = isAttached( elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( attached ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 - 11+
	// focus() and blur() are asynchronous, except when they are no-op.
	// So expect focus to be synchronous when the element is already active,
	// and blur to be synchronous when the element is not already active.
	// (focus and blur are always synchronous in other supported browsers,
	// this just defines when we can count on it).
	function expectSync( elem, type ) {
		return ( elem === safeActiveElement() ) === ( type === "focus" );
	}

	// Support: IE <=9 only
	// Accessing document.activeElement can throw unexpectedly
	// https://bugs.jquery.com/ticket/13393
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Only attach events to objects that accept data
			if ( !acceptData( elem ) ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = Object.create( null );
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),

				// Make a writable jQuery.Event from the native event object
				event = jQuery.event.fix( nativeEvent ),

				handlers = (
					dataPriv.get( this, "events" ) || Object.create( null )
				)[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// If the event is namespaced, then each handler is only invoked if it is
					// specially universal or its namespaces are a superset of the event's.
					if ( !event.rnamespace || handleObj.namespace === false ||
						event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
							return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
							return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			click: {

				// Utilize native event to ensure correct state for checkable inputs
				setup: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Claim the first handler
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						// dataPriv.set( el, "click", ... )
						leverageNative( el, "click", returnTrue );
					}

					// Return false to allow normal processing in the caller
					return false;
				},
				trigger: function( data ) {

					// For mutual compressibility with _default, replace `this` access with a local var.
					// `|| data` is dead code meant only to preserve the variable through minification.
					var el = this || data;

					// Force setup before triggering a click
					if ( rcheckableType.test( el.type ) &&
						el.click && nodeName( el, "input" ) ) {

						leverageNative( el, "click" );
					}

					// Return non-false to allow normal event-path propagation
					return true;
				},

				// For cross-browser consistency, suppress native .click() on links
				// Also prevent it if we're currently inside a leveraged native-event stack
				_default: function( event ) {
					var target = event.target;
					return rcheckableType.test( target.type ) &&
						target.click && nodeName( target, "input" ) &&
						dataPriv.get( target, "click" ) ||
						nodeName( target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	// Ensure the presence of an event listener that handles manually-triggered
	// synthetic events by interrupting progress until reinvoked in response to
	// *native* events that it fires directly, ensuring that state changes have
	// already occurred before other listeners are invoked.
	function leverageNative( el, type, expectSync ) {

		// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
		if ( !expectSync ) {
			if ( dataPriv.get( el, type ) === undefined ) {
				jQuery.event.add( el, type, returnTrue );
			}
			return;
		}

		// Register the controller as a special universal handler for all event namespaces
		dataPriv.set( el, type, false );
		jQuery.event.add( el, type, {
			namespace: false,
			handler: function( event ) {
				var notAsync, result,
					saved = dataPriv.get( this, type );

				if ( ( event.isTrigger & 1 ) && this[ type ] ) {

					// Interrupt processing of the outer synthetic .trigger()ed event
					// Saved data should be false in such cases, but might be a leftover capture object
					// from an async native handler (gh-4350)
					if ( !saved.length ) {

						// Store arguments for use when handling the inner native event
						// There will always be at least one argument (an event object), so this array
						// will not be confused with a leftover capture object.
						saved = slice.call( arguments );
						dataPriv.set( this, type, saved );

						// Trigger the native event and capture its result
						// Support: IE <=9 - 11+
						// focus() and blur() are asynchronous
						notAsync = expectSync( this, type );
						this[ type ]();
						result = dataPriv.get( this, type );
						if ( saved !== result || notAsync ) {
							dataPriv.set( this, type, false );
						} else {
							result = {};
						}
						if ( saved !== result ) {

							// Cancel the outer synthetic event
							event.stopImmediatePropagation();
							event.preventDefault();

							// Support: Chrome 86+
							// In Chrome, if an element having a focusout handler is blurred by
							// clicking outside of it, it invokes the handler synchronously. If
							// that handler calls `.remove()` on the element, the data is cleared,
							// leaving `result` undefined. We need to guard against this.
							return result && result.value;
						}

					// If this is an inner synthetic event for an event with a bubbling surrogate
					// (focus or blur), assume that the surrogate already propagated from triggering the
					// native event and prevent that from happening again here.
					// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
					// bubbling surrogate propagates *after* the non-bubbling base), but that seems
					// less bad than duplication.
					} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
						event.stopPropagation();
					}

				// If this is a native event triggered above, everything is now in order
				// Fire an inner synthetic event with the original arguments
				} else if ( saved.length ) {

					// ...and capture the result
					dataPriv.set( this, type, {
						value: jQuery.event.trigger(

							// Support: IE <=9 - 11+
							// Extend with the prototype to reset the above stopImmediatePropagation()
							jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
							saved.slice( 1 ),
							this
						)
					} );

					// Abort handling of the native event
					event.stopImmediatePropagation();
				}
			}
		} );
	}

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		code: true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,
		which: true
	}, jQuery.event.addProp );

	jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
		jQuery.event.special[ type ] = {

			// Utilize native event if possible so blur/focus sequence is correct
			setup: function() {

				// Claim the first handler
				// dataPriv.set( this, "focus", ... )
				// dataPriv.set( this, "blur", ... )
				leverageNative( this, type, expectSync );

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function() {

				// Force setup before trigger
				leverageNative( this, type );

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// Suppress native focus or blur as it's already being fired
			// in leverageNative.
			_default: function() {
				return true;
			},

			delegateType: delegateType
		};
	} );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.get( src );
			events = pdataOld.events;

			if ( events ) {
				dataPriv.remove( dest, "handle events" );

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = flat( args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl && !node.noModule ) {
									jQuery._evalUrl( node.src, {
										nonce: node.nonce || node.getAttribute( "nonce" )
									}, doc );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && isAttached( node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html;
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = isAttached( elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var swap = function( elem, options, callback ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};


	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			// Support: Chrome <=64
			// Don't get tricked when zoom affects offsetWidth (gh-4029)
			div.style.position = "absolute";
			scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}

		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableTrDimensionsVal, reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			},

			// Support: IE 9 - 11+, Edge 15 - 18+
			// IE/Edge misreport `getComputedStyle` of table rows with width/height
			// set in CSS while `offset*` properties report correct values.
			// Behavior in IE 9 is more subtle than in newer versions & it passes
			// some versions of this test; make sure not to make it pass there!
			//
			// Support: Firefox 70+
			// Only Firefox includes border widths
			// in computed dimensions. (gh-4529)
			reliableTrDimensions: function() {
				var table, tr, trChild, trStyle;
				if ( reliableTrDimensionsVal == null ) {
					table = document.createElement( "table" );
					tr = document.createElement( "tr" );
					trChild = document.createElement( "div" );

					table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
					tr.style.cssText = "border:1px solid";

					// Support: Chrome 86+
					// Height set through cssText does not get applied.
					// Computed height then comes back as 0.
					tr.style.height = "1px";
					trChild.style.height = "9px";

					// Support: Android 8 Chrome 86+
					// In our bodyBackground.html iframe,
					// display for all div elements is set to "inline",
					// which causes a problem only in Android 8 Chrome 86.
					// Ensuring the div is display: block
					// gets around this issue.
					trChild.style.display = "block";

					documentElement
						.appendChild( table )
						.appendChild( tr )
						.appendChild( trChild );

					trStyle = window.getComputedStyle( tr );
					reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
						parseInt( trStyle.borderTopWidth, 10 ) +
						parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

					documentElement.removeChild( table );
				}
				return reliableTrDimensionsVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !isAttached( elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style,
		vendorProps = {};

	// Return a vendor-prefixed property or undefined
	function vendorPropName( name ) {

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
	function finalPropName( name ) {
		var final = jQuery.cssProps[ name ] || vendorProps[ name ];

		if ( final ) {
			return final;
		}
		if ( name in emptyStyle ) {
			return name;
		}
		return vendorProps[ name ] = vendorPropName( name ) || name;
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		};

	function setPositiveNumber( _elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;

		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {

				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}

			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5

			// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
			// Use an explicit zero to avoid NaN (gh-3964)
			) ) || 0;
		}

		return delta;
	}

	function getWidthOrHeight( elem, dimension, extra ) {

		// Start with computed style
		var styles = getStyles( elem ),

			// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
			// Fake content-box until we know it's needed to know the true value.
			boxSizingNeeded = !support.boxSizingReliable() || extra,
			isBorderBox = boxSizingNeeded &&
				jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox,

			val = curCSS( elem, dimension, styles ),
			offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}


		// Support: IE 9 - 11 only
		// Use offsetWidth/offsetHeight for when box sizing is unreliable.
		// In those cases, the computed value can be trusted to be border-box.
		if ( ( !support.boxSizingReliable() && isBorderBox ||

			// Support: IE 10 - 11+, Edge 15 - 18+
			// IE/Edge misreport `getComputedStyle` of table rows with width/height
			// set in CSS while `offset*` properties report correct values.
			// Interestingly, in some cases IE 9 doesn't suffer from this issue.
			!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

			// Fall back to offsetWidth/offsetHeight when value is "auto"
			// This happens for inline elements with no explicit setting (gh-3571)
			val === "auto" ||

			// Support: Android <=4.1 - 4.3 only
			// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

			// Make sure the element is visible & connected
			elem.getClientRects().length ) {

			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

			// Where available, offsetWidth/offsetHeight approximate border box dimensions.
			// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
			// retrieved value as a content box dimension.
			valueIsBorderBox = offsetProp in elem;
			if ( valueIsBorderBox ) {
				val = elem[ offsetProp ];
			}
		}

		// Normalize "" and auto
		val = parseFloat( val ) || 0;

		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,

				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"gridArea": true,
			"gridColumn": true,
			"gridColumnEnd": true,
			"gridColumnStart": true,
			"gridRow": true,
			"gridRowEnd": true,
			"gridRowStart": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
				// "px" to a few hardcoded values.
				if ( type === "number" && !isCustomProp ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( _i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),

					// Only read styles.position if the test has a chance to fail
					// to avoid forcing a reflow.
					scrollboxSizeBuggy = !support.scrollboxSize() &&
						styles.position === "absolute",

					// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
					boxSizingNeeded = scrollboxSizeBuggy || extra,
					isBorderBox = boxSizingNeeded &&
						jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra ?
						boxModelAdjustment(
							elem,
							dimension,
							extra,
							isBorderBox,
							styles
						) :
						0;

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && scrollboxSizeBuggy ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
				) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
						tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};

			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = Date.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );

			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( isValidValue ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
								"" :
								dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}

						elem[ type ]();

						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}

						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {

					// Handle: regular nodes (via `this.ownerDocument`), window
					// (via `this.document`) & document (via `this`).
					var doc = this.ownerDocument || this.document || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this.document || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = { guid: Date.now() };

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml, parserErrorElem;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {}

		parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
		if ( !xml || parserErrorElem ) {
			jQuery.error( "Invalid XML: " + (
				parserErrorElem ?
					jQuery.map( parserErrorElem.childNodes, function( el ) {
						return el.textContent;
					} ).join( "\n" ) :
					data
			) );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && toType( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		if ( a == null ) {
			return "";
		}

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} ).filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} ).map( function( _i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );

	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
										( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
											.concat( match[ 2 ] );
								}
							}
							match = responseHeaders[ key.toLowerCase() + " " ];
						}
						return match == null ? null : match.join( ", " );
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
						uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Use a noop converter for missing script but not if jsonp
				if ( !isSuccess &&
					jQuery.inArray( "script", s.dataTypes ) > -1 &&
					jQuery.inArray( "json", s.dataTypes ) < 0 ) {
					s.converters[ "text script" ] = function() {};
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( _i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );

	jQuery.ajaxPrefilter( function( s ) {
		var i;
		for ( i in s.headers ) {
			if ( i.toLowerCase() === "content-type" ) {
				s.contentType = s.headers[ i ] || "";
			}
		}
	} );


	jQuery._evalUrl = function( url, options, doc ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,

			// Only evaluate the response if it is successful (gh-4126)
			// dataFilter is not invoked for failure responses, so using it instead
			// of the default converter is kludgy but it works.
			converters: {
				"text script": function() {}
			},
			dataFilter: function( response ) {
				jQuery.globalEval( response, options, doc );
			}
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain or forced-by-attrs requests
		if ( s.crossDomain || s.scriptAttrs ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" )
						.attr( s.scriptAttrs || {} )
						.prop( { charset: s.scriptCharset, src: s.url } )
						.on( "load error", callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						} );

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {

		// offset() relates an element's border box to the document origin
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();

			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {

					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( _i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( {
			padding: "inner" + name,
			content: type,
			"": "outer" + name
		}, function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( _i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		},

		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );

	jQuery.each(
		( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( _i, name ) {

			// Handle event binding
			jQuery.fn[ name ] = function( data, fn ) {
				return arguments.length > 0 ?
					this.on( name, null, data, fn ) :
					this.trigger( name );
			};
		}
	);




	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	var rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};

	jQuery.trim = function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	};



	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( typeof define === "function" && define.amd ) {
		define( "jquery", [], function() {
			return jQuery;
		} );
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( typeof noGlobal === "undefined" ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );

	// Compressed representation of the Grapheme_Cluster_Break=Extend
	// information from
	// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
	// Each pair of elements represents a range, as an offet from the
	// previous range and a length. Numbers are in base-36, with the empty
	// string being a shorthand for 1.
	let extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(s => s ? parseInt(s, 36) : 1);
	// Convert offsets into absolute values
	for (let i = 1; i < extend.length; i++)
	    extend[i] += extend[i - 1];
	function isExtendingChar(code) {
	    for (let i = 1; i < extend.length; i += 2)
	        if (extend[i] > code)
	            return extend[i - 1] <= code;
	    return false;
	}
	function isRegionalIndicator(code) {
	    return code >= 0x1F1E6 && code <= 0x1F1FF;
	}
	const ZWJ = 0x200d;
	/**
	Returns a next grapheme cluster break _after_ (not equal to)
	`pos`, if `forward` is true, or before otherwise. Returns `pos`
	itself if no further cluster break is available in the string.
	Moves across surrogate pairs, extending characters, characters
	joined with zero-width joiners, and flag emoji.
	*/
	function findClusterBreak(str, pos, forward = true) {
	    return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
	}
	function nextClusterBreak(str, pos) {
	    if (pos == str.length)
	        return pos;
	    // If pos is in the middle of a surrogate pair, move to its start
	    if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1)))
	        pos--;
	    let prev = codePointAt(str, pos);
	    pos += codePointSize(prev);
	    while (pos < str.length) {
	        let next = codePointAt(str, pos);
	        if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
	            pos += codePointSize(next);
	            prev = next;
	        }
	        else if (isRegionalIndicator(next)) {
	            let countBefore = 0, i = pos - 2;
	            while (i >= 0 && isRegionalIndicator(codePointAt(str, i))) {
	                countBefore++;
	                i -= 2;
	            }
	            if (countBefore % 2 == 0)
	                break;
	            else
	                pos += 2;
	        }
	        else {
	            break;
	        }
	    }
	    return pos;
	}
	function prevClusterBreak(str, pos) {
	    while (pos > 0) {
	        let found = nextClusterBreak(str, pos - 2);
	        if (found < pos)
	            return found;
	        pos--;
	    }
	    return 0;
	}
	function surrogateLow(ch) { return ch >= 0xDC00 && ch < 0xE000; }
	function surrogateHigh(ch) { return ch >= 0xD800 && ch < 0xDC00; }
	/**
	Find the code point at the given position in a string (like the
	[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
	string method).
	*/
	function codePointAt(str, pos) {
	    let code0 = str.charCodeAt(pos);
	    if (!surrogateHigh(code0) || pos + 1 == str.length)
	        return code0;
	    let code1 = str.charCodeAt(pos + 1);
	    if (!surrogateLow(code1))
	        return code0;
	    return ((code0 - 0xd800) << 10) + (code1 - 0xdc00) + 0x10000;
	}
	/**
	Given a Unicode codepoint, return the JavaScript string that
	respresents it (like
	[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
	*/
	function fromCodePoint(code) {
	    if (code <= 0xffff)
	        return String.fromCharCode(code);
	    code -= 0x10000;
	    return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
	}
	/**
	The first character that takes up two positions in a JavaScript
	string. It is often useful to compare with this after calling
	`codePointAt`, to figure out whether your character takes up 1 or
	2 index positions.
	*/
	function codePointSize(code) { return code < 0x10000 ? 1 : 2; }

	/**
	Count the column position at the given offset into the string,
	taking extending characters and tab size into account.
	*/
	function countColumn(string, tabSize, to = string.length) {
	    let n = 0;
	    for (let i = 0; i < to;) {
	        if (string.charCodeAt(i) == 9) {
	            n += tabSize - (n % tabSize);
	            i++;
	        }
	        else {
	            n++;
	            i = findClusterBreak(string, i);
	        }
	    }
	    return n;
	}
	/**
	Find the offset that corresponds to the given column position in a
	string, taking extending characters and tab size into account. By
	default, the string length is returned when it is too short to
	reach the column. Pass `strict` true to make it return -1 in that
	situation.
	*/
	function findColumn(string, col, tabSize, strict) {
	    for (let i = 0, n = 0;;) {
	        if (n >= col)
	            return i;
	        if (i == string.length)
	            break;
	        n += string.charCodeAt(i) == 9 ? tabSize - (n % tabSize) : 1;
	        i = findClusterBreak(string, i);
	    }
	    return strict === true ? -1 : string.length;
	}

	/**
	The data structure for documents.
	*/
	class Text {
	    /**
	    @internal
	    */
	    constructor() { }
	    /**
	    Get the line description around the given position.
	    */
	    lineAt(pos) {
	        if (pos < 0 || pos > this.length)
	            throw new RangeError(`Invalid position ${pos} in document of length ${this.length}`);
	        return this.lineInner(pos, false, 1, 0);
	    }
	    /**
	    Get the description for the given (1-based) line number.
	    */
	    line(n) {
	        if (n < 1 || n > this.lines)
	            throw new RangeError(`Invalid line number ${n} in ${this.lines}-line document`);
	        return this.lineInner(n, true, 1, 0);
	    }
	    /**
	    Replace a range of the text with the given content.
	    */
	    replace(from, to, text) {
	        let parts = [];
	        this.decompose(0, from, parts, 2 /* To */);
	        if (text.length)
	            text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
	        this.decompose(to, this.length, parts, 1 /* From */);
	        return TextNode.from(parts, this.length - (to - from) + text.length);
	    }
	    /**
	    Append another document to this one.
	    */
	    append(other) {
	        return this.replace(this.length, this.length, other);
	    }
	    /**
	    Retrieve the text between the given points.
	    */
	    slice(from, to = this.length) {
	        let parts = [];
	        this.decompose(from, to, parts, 0);
	        return TextNode.from(parts, to - from);
	    }
	    /**
	    Test whether this text is equal to another instance.
	    */
	    eq(other) {
	        if (other == this)
	            return true;
	        if (other.length != this.length || other.lines != this.lines)
	            return false;
	        let start = this.scanIdentical(other, 1), end = this.length - this.scanIdentical(other, -1);
	        let a = new RawTextCursor(this), b = new RawTextCursor(other);
	        for (let skip = start, pos = start;;) {
	            a.next(skip);
	            b.next(skip);
	            skip = 0;
	            if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value)
	                return false;
	            pos += a.value.length;
	            if (a.done || pos >= end)
	                return true;
	        }
	    }
	    /**
	    Iterate over the text. When `dir` is `-1`, iteration happens
	    from end to start. This will return lines and the breaks between
	    them as separate strings, and for long lines, might split lines
	    themselves into multiple chunks as well.
	    */
	    iter(dir = 1) { return new RawTextCursor(this, dir); }
	    /**
	    Iterate over a range of the text. When `from` > `to`, the
	    iterator will run in reverse.
	    */
	    iterRange(from, to = this.length) { return new PartialTextCursor(this, from, to); }
	    /**
	    Return a cursor that iterates over the given range of lines,
	    _without_ returning the line breaks between, and yielding empty
	    strings for empty lines.
	    
	    When `from` and `to` are given, they should be 1-based line numbers.
	    */
	    iterLines(from, to) {
	        let inner;
	        if (from == null) {
	            inner = this.iter();
	        }
	        else {
	            if (to == null)
	                to = this.lines + 1;
	            let start = this.line(from).from;
	            inner = this.iterRange(start, Math.max(start, to == this.lines + 1 ? this.length : to <= 1 ? 0 : this.line(to - 1).to));
	        }
	        return new LineCursor(inner);
	    }
	    /**
	    @internal
	    */
	    toString() { return this.sliceString(0); }
	    /**
	    Convert the document to an array of lines (which can be
	    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).
	    */
	    toJSON() {
	        let lines = [];
	        this.flatten(lines);
	        return lines;
	    }
	    /**
	    Create a `Text` instance for the given array of lines.
	    */
	    static of(text) {
	        if (text.length == 0)
	            throw new RangeError("A document must have at least one line");
	        if (text.length == 1 && !text[0])
	            return Text.empty;
	        return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
	    }
	}
	// Leaves store an array of line strings. There are always line breaks
	// between these strings. Leaves are limited in size and have to be
	// contained in TextNode instances for bigger documents.
	class TextLeaf extends Text {
	    constructor(text, length = textLength(text)) {
	        super();
	        this.text = text;
	        this.length = length;
	    }
	    get lines() { return this.text.length; }
	    get children() { return null; }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let string = this.text[i], end = offset + string.length;
	            if ((isLine ? line : end) >= target)
	                return new Line(offset, end, line, string);
	            offset = end + 1;
	            line++;
	        }
	    }
	    decompose(from, to, target, open) {
	        let text = from <= 0 && to >= this.length ? this
	            : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
	        if (open & 1 /* From */) {
	            let prev = target.pop();
	            let joined = appendText(text.text, prev.text.slice(), 0, text.length);
	            if (joined.length <= 32 /* Branch */) {
	                target.push(new TextLeaf(joined, prev.length + text.length));
	            }
	            else {
	                let mid = joined.length >> 1;
	                target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
	            }
	        }
	        else {
	            target.push(text);
	        }
	    }
	    replace(from, to, text) {
	        if (!(text instanceof TextLeaf))
	            return super.replace(from, to, text);
	        let lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
	        let newLen = this.length + text.length - (to - from);
	        if (lines.length <= 32 /* Branch */)
	            return new TextLeaf(lines, newLen);
	        return TextNode.from(TextLeaf.split(lines, []), newLen);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        let result = "";
	        for (let pos = 0, i = 0; pos <= to && i < this.text.length; i++) {
	            let line = this.text[i], end = pos + line.length;
	            if (pos > from && i)
	                result += lineSep;
	            if (from < end && to > pos)
	                result += line.slice(Math.max(0, from - pos), to - pos);
	            pos = end + 1;
	        }
	        return result;
	    }
	    flatten(target) {
	        for (let line of this.text)
	            target.push(line);
	    }
	    scanIdentical() { return 0; }
	    static split(text, target) {
	        let part = [], len = -1;
	        for (let line of text) {
	            part.push(line);
	            len += line.length + 1;
	            if (part.length == 32 /* Branch */) {
	                target.push(new TextLeaf(part, len));
	                part = [];
	                len = -1;
	            }
	        }
	        if (len > -1)
	            target.push(new TextLeaf(part, len));
	        return target;
	    }
	}
	// Nodes provide the tree structure of the `Text` type. They store a
	// number of other nodes or leaves, taking care to balance themselves
	// on changes. There are implied line breaks _between_ the children of
	// a node (but not before the first or after the last child).
	class TextNode extends Text {
	    constructor(children, length) {
	        super();
	        this.children = children;
	        this.length = length;
	        this.lines = 0;
	        for (let child of children)
	            this.lines += child.lines;
	    }
	    lineInner(target, isLine, line, offset) {
	        for (let i = 0;; i++) {
	            let child = this.children[i], end = offset + child.length, endLine = line + child.lines - 1;
	            if ((isLine ? endLine : end) >= target)
	                return child.lineInner(target, isLine, line, offset);
	            offset = end + 1;
	            line = endLine + 1;
	        }
	    }
	    decompose(from, to, target, open) {
	        for (let i = 0, pos = 0; pos <= to && i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (from <= end && to >= pos) {
	                let childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
	                if (pos >= from && end <= to && !childOpen)
	                    target.push(child);
	                else
	                    child.decompose(from - pos, to - pos, target, childOpen);
	            }
	            pos = end + 1;
	        }
	    }
	    replace(from, to, text) {
	        if (text.lines < this.lines)
	            for (let i = 0, pos = 0; i < this.children.length; i++) {
	                let child = this.children[i], end = pos + child.length;
	                // Fast path: if the change only affects one child and the
	                // child's size remains in the acceptable range, only update
	                // that child
	                if (from >= pos && to <= end) {
	                    let updated = child.replace(from - pos, to - pos, text);
	                    let totalLines = this.lines - child.lines + updated.lines;
	                    if (updated.lines < (totalLines >> (5 /* BranchShift */ - 1)) &&
	                        updated.lines > (totalLines >> (5 /* BranchShift */ + 1))) {
	                        let copy = this.children.slice();
	                        copy[i] = updated;
	                        return new TextNode(copy, this.length - (to - from) + text.length);
	                    }
	                    return super.replace(pos, end, updated);
	                }
	                pos = end + 1;
	            }
	        return super.replace(from, to, text);
	    }
	    sliceString(from, to = this.length, lineSep = "\n") {
	        let result = "";
	        for (let i = 0, pos = 0; i < this.children.length && pos <= to; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (pos > from && i)
	                result += lineSep;
	            if (from < end && to > pos)
	                result += child.sliceString(from - pos, to - pos, lineSep);
	            pos = end + 1;
	        }
	        return result;
	    }
	    flatten(target) {
	        for (let child of this.children)
	            child.flatten(target);
	    }
	    scanIdentical(other, dir) {
	        if (!(other instanceof TextNode))
	            return 0;
	        let length = 0;
	        let [iA, iB, eA, eB] = dir > 0 ? [0, 0, this.children.length, other.children.length]
	            : [this.children.length - 1, other.children.length - 1, -1, -1];
	        for (;; iA += dir, iB += dir) {
	            if (iA == eA || iB == eB)
	                return length;
	            let chA = this.children[iA], chB = other.children[iB];
	            if (chA != chB)
	                return length + chA.scanIdentical(chB, dir);
	            length += chA.length + 1;
	        }
	    }
	    static from(children, length = children.reduce((l, ch) => l + ch.length + 1, -1)) {
	        let lines = 0;
	        for (let ch of children)
	            lines += ch.lines;
	        if (lines < 32 /* Branch */) {
	            let flat = [];
	            for (let ch of children)
	                ch.flatten(flat);
	            return new TextLeaf(flat, length);
	        }
	        let chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */), maxChunk = chunk << 1, minChunk = chunk >> 1;
	        let chunked = [], currentLines = 0, currentLen = -1, currentChunk = [];
	        function add(child) {
	            let last;
	            if (child.lines > maxChunk && child instanceof TextNode) {
	                for (let node of child.children)
	                    add(node);
	            }
	            else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
	                flush();
	                chunked.push(child);
	            }
	            else if (child instanceof TextLeaf && currentLines &&
	                (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf &&
	                child.lines + last.lines <= 32 /* Branch */) {
	                currentLines += child.lines;
	                currentLen += child.length + 1;
	                currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
	            }
	            else {
	                if (currentLines + child.lines > chunk)
	                    flush();
	                currentLines += child.lines;
	                currentLen += child.length + 1;
	                currentChunk.push(child);
	            }
	        }
	        function flush() {
	            if (currentLines == 0)
	                return;
	            chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
	            currentLen = -1;
	            currentLines = currentChunk.length = 0;
	        }
	        for (let child of children)
	            add(child);
	        flush();
	        return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
	    }
	}
	Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
	function textLength(text) {
	    let length = -1;
	    for (let line of text)
	        length += line.length + 1;
	    return length;
	}
	function appendText(text, target, from = 0, to = 1e9) {
	    for (let pos = 0, i = 0, first = true; i < text.length && pos <= to; i++) {
	        let line = text[i], end = pos + line.length;
	        if (end >= from) {
	            if (end > to)
	                line = line.slice(0, to - pos);
	            if (pos < from)
	                line = line.slice(from - pos);
	            if (first) {
	                target[target.length - 1] += line;
	                first = false;
	            }
	            else
	                target.push(line);
	        }
	        pos = end + 1;
	    }
	    return target;
	}
	function sliceText(text, from, to) {
	    return appendText(text, [""], from, to);
	}
	class RawTextCursor {
	    constructor(text, dir = 1) {
	        this.dir = dir;
	        this.done = false;
	        this.lineBreak = false;
	        this.value = "";
	        this.nodes = [text];
	        this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
	    }
	    nextInner(skip, dir) {
	        this.done = this.lineBreak = false;
	        for (;;) {
	            let last = this.nodes.length - 1;
	            let top = this.nodes[last], offsetValue = this.offsets[last], offset = offsetValue >> 1;
	            let size = top instanceof TextLeaf ? top.text.length : top.children.length;
	            if (offset == (dir > 0 ? size : 0)) {
	                if (last == 0) {
	                    this.done = true;
	                    this.value = "";
	                    return this;
	                }
	                if (dir > 0)
	                    this.offsets[last - 1]++;
	                this.nodes.pop();
	                this.offsets.pop();
	            }
	            else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
	                this.offsets[last] += dir;
	                if (skip == 0) {
	                    this.lineBreak = true;
	                    this.value = "\n";
	                    return this;
	                }
	                skip--;
	            }
	            else if (top instanceof TextLeaf) {
	                // Move to the next string
	                let next = top.text[offset + (dir < 0 ? -1 : 0)];
	                this.offsets[last] += dir;
	                if (next.length > Math.max(0, skip)) {
	                    this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
	                    return this;
	                }
	                skip -= next.length;
	            }
	            else {
	                let next = top.children[offset + (dir < 0 ? -1 : 0)];
	                if (skip > next.length) {
	                    skip -= next.length;
	                    this.offsets[last] += dir;
	                }
	                else {
	                    if (dir < 0)
	                        this.offsets[last]--;
	                    this.nodes.push(next);
	                    this.offsets.push(dir > 0 ? 1 : (next instanceof TextLeaf ? next.text.length : next.children.length) << 1);
	                }
	            }
	        }
	    }
	    next(skip = 0) {
	        if (skip < 0) {
	            this.nextInner(-skip, (-this.dir));
	            skip = this.value.length;
	        }
	        return this.nextInner(skip, this.dir);
	    }
	}
	class PartialTextCursor {
	    constructor(text, start, end) {
	        this.value = "";
	        this.done = false;
	        this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
	        this.pos = start > end ? text.length : 0;
	        this.from = Math.min(start, end);
	        this.to = Math.max(start, end);
	    }
	    nextInner(skip, dir) {
	        if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
	            this.value = "";
	            this.done = true;
	            return this;
	        }
	        skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
	        let limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
	        if (skip > limit)
	            skip = limit;
	        limit -= skip;
	        let { value } = this.cursor.next(skip);
	        this.pos += (value.length + skip) * dir;
	        this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
	        this.done = !this.value;
	        return this;
	    }
	    next(skip = 0) {
	        if (skip < 0)
	            skip = Math.max(skip, this.from - this.pos);
	        else if (skip > 0)
	            skip = Math.min(skip, this.to - this.pos);
	        return this.nextInner(skip, this.cursor.dir);
	    }
	    get lineBreak() { return this.cursor.lineBreak && this.value != ""; }
	}
	class LineCursor {
	    constructor(inner) {
	        this.inner = inner;
	        this.afterBreak = true;
	        this.value = "";
	        this.done = false;
	    }
	    next(skip = 0) {
	        let { done, lineBreak, value } = this.inner.next(skip);
	        if (done) {
	            this.done = true;
	            this.value = "";
	        }
	        else if (lineBreak) {
	            if (this.afterBreak) {
	                this.value = "";
	            }
	            else {
	                this.afterBreak = true;
	                this.next();
	            }
	        }
	        else {
	            this.value = value;
	            this.afterBreak = false;
	        }
	        return this;
	    }
	    get lineBreak() { return false; }
	}
	if (typeof Symbol != "undefined") {
	    Text.prototype[Symbol.iterator] = function () { return this.iter(); };
	    RawTextCursor.prototype[Symbol.iterator] = PartialTextCursor.prototype[Symbol.iterator] =
	        LineCursor.prototype[Symbol.iterator] = function () { return this; };
	}
	/**
	This type describes a line in the document. It is created
	on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).
	*/
	class Line {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The position of the start of the line.
	    */
	    from, 
	    /**
	    The position at the end of the line (_before_ the line break,
	    or at the end of document for the last line).
	    */
	    to, 
	    /**
	    This line's line number (1-based).
	    */
	    number, 
	    /**
	    The line's content.
	    */
	    text) {
	        this.from = from;
	        this.to = to;
	        this.number = number;
	        this.text = text;
	    }
	    /**
	    The length of the line (not including any line break after it).
	    */
	    get length() { return this.to - this.from; }
	}

	const DefaultSplit = /\r\n?|\n/;
	/**
	Distinguishes different ways in which positions can be mapped.
	*/
	var MapMode = /*@__PURE__*/(function (MapMode) {
	    /**
	    Map a position to a valid new position, even when its context
	    was deleted.
	    */
	    MapMode[MapMode["Simple"] = 0] = "Simple";
	    /**
	    Return null if deletion happens across the position.
	    */
	    MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
	    /**
	    Return null if the character _before_ the position is deleted.
	    */
	    MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
	    /**
	    Return null if the character _after_ the position is deleted.
	    */
	    MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
	return MapMode})(MapMode || (MapMode = {}));
	/**
	A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
	that doesn't store the inserted text. As such, it can't be
	applied, but is cheaper to store and manipulate.
	*/
	class ChangeDesc {
	    // Sections are encoded as pairs of integers. The first is the
	    // length in the current document, and the second is -1 for
	    // unaffected sections, and the length of the replacement content
	    // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
	    // 0), and a replacement two positive numbers.
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    sections) {
	        this.sections = sections;
	    }
	    /**
	    The length of the document before the change.
	    */
	    get length() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2)
	            result += this.sections[i];
	        return result;
	    }
	    /**
	    The length of the document after the change.
	    */
	    get newLength() {
	        let result = 0;
	        for (let i = 0; i < this.sections.length; i += 2) {
	            let ins = this.sections[i + 1];
	            result += ins < 0 ? this.sections[i] : ins;
	        }
	        return result;
	    }
	    /**
	    False when there are actual changes in this set.
	    */
	    get empty() { return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0; }
	    /**
	    Iterate over the unchanged parts left by these changes.
	    */
	    iterGaps(f) {
	        for (let i = 0, posA = 0, posB = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0) {
	                f(posA, posB, len);
	                posB += len;
	            }
	            else {
	                posB += ins;
	            }
	            posA += len;
	        }
	    }
	    /**
	    Iterate over the ranges changed by these changes. (See
	    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
	    variant that also provides you with the inserted text.)
	    
	    When `individual` is true, adjacent changes (which are kept
	    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
	    reported separately.
	    */
	    iterChangedRanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /**
	    Get a description of the inverted form of these changes.
	    */
	    get invertedDesc() {
	        let sections = [];
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            if (ins < 0)
	                sections.push(len, ins);
	            else
	                sections.push(ins, len);
	        }
	        return new ChangeDesc(sections);
	    }
	    /**
	    Compute the combined effect of applying another set of changes
	    after this one. The length of the document after this set should
	    match the length before `other`.
	    */
	    composeDesc(other) { return this.empty ? other : other.empty ? this : composeSets(this, other); }
	    /**
	    Map this description, which should start with the same document
	    as `other`, over another set of changes, so that it can be
	    applied after it. When `before` is true, map as if the changes
	    in `other` happened before the ones in `this`.
	    */
	    mapDesc(other, before = false) { return other.empty ? this : mapSet(this, other, before); }
	    mapPos(pos, assoc = -1, mode = MapMode.Simple) {
	        let posA = 0, posB = 0;
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++], endA = posA + len;
	            if (ins < 0) {
	                if (endA > pos)
	                    return posB + (pos - posA);
	                posB += len;
	            }
	            else {
	                if (mode != MapMode.Simple && endA >= pos &&
	                    (mode == MapMode.TrackDel && posA < pos && endA > pos ||
	                        mode == MapMode.TrackBefore && posA < pos ||
	                        mode == MapMode.TrackAfter && endA > pos))
	                    return null;
	                if (endA > pos || endA == pos && assoc < 0 && !len)
	                    return pos == posA || assoc < 0 ? posB : posB + ins;
	                posB += ins;
	            }
	            posA = endA;
	        }
	        if (pos > posA)
	            throw new RangeError(`Position ${pos} is out of range for changeset of length ${posA}`);
	        return posB;
	    }
	    /**
	    Check whether these changes touch a given range. When one of the
	    changes entirely covers the range, the string `"cover"` is
	    returned.
	    */
	    touchesRange(from, to = from) {
	        for (let i = 0, pos = 0; i < this.sections.length && pos <= to;) {
	            let len = this.sections[i++], ins = this.sections[i++], end = pos + len;
	            if (ins >= 0 && pos <= to && end >= from)
	                return pos < from && end > to ? "cover" : true;
	            pos = end;
	        }
	        return false;
	    }
	    /**
	    @internal
	    */
	    toString() {
	        let result = "";
	        for (let i = 0; i < this.sections.length;) {
	            let len = this.sections[i++], ins = this.sections[i++];
	            result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
	        }
	        return result;
	    }
	    /**
	    Serialize this change desc to a JSON-representable value.
	    */
	    toJSON() { return this.sections; }
	    /**
	    Create a change desc from its JSON representation (as produced
	    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
	    */
	    static fromJSON(json) {
	        if (!Array.isArray(json) || json.length % 2 || json.some(a => typeof a != "number"))
	            throw new RangeError("Invalid JSON representation of ChangeDesc");
	        return new ChangeDesc(json);
	    }
	}
	/**
	A change set represents a group of modifications to a document. It
	stores the document length, and can only be applied to documents
	with exactly that length.
	*/
	class ChangeSet extends ChangeDesc {
	    /**
	    @internal
	    */
	    constructor(sections, 
	    /**
	    @internal
	    */
	    inserted) {
	        super(sections);
	        this.inserted = inserted;
	    }
	    /**
	    Apply the changes to a document, returning the modified
	    document.
	    */
	    apply(doc) {
	        if (this.length != doc.length)
	            throw new RangeError("Applying change set to a document with the wrong length");
	        iterChanges(this, (fromA, toA, fromB, _toB, text) => doc = doc.replace(fromB, fromB + (toA - fromA), text), false);
	        return doc;
	    }
	    mapDesc(other, before = false) { return mapSet(this, other, before, true); }
	    /**
	    Given the document as it existed _before_ the changes, return a
	    change set that represents the inverse of this set, which could
	    be used to go from the document created by the changes back to
	    the document as it existed before the changes.
	    */
	    invert(doc) {
	        let sections = this.sections.slice(), inserted = [];
	        for (let i = 0, pos = 0; i < sections.length; i += 2) {
	            let len = sections[i], ins = sections[i + 1];
	            if (ins >= 0) {
	                sections[i] = ins;
	                sections[i + 1] = len;
	                let index = i >> 1;
	                while (inserted.length < index)
	                    inserted.push(Text.empty);
	                inserted.push(len ? doc.slice(pos, pos + len) : Text.empty);
	            }
	            pos += len;
	        }
	        return new ChangeSet(sections, inserted);
	    }
	    /**
	    Combine two subsequent change sets into a single set. `other`
	    must start in the document produced by `this`. If `this` goes
	    `docA` → `docB` and `other` represents `docB` → `docC`, the
	    returned value will represent the change `docA` → `docC`.
	    */
	    compose(other) { return this.empty ? other : other.empty ? this : composeSets(this, other, true); }
	    /**
	    Given another change set starting in the same document, maps this
	    change set over the other, producing a new change set that can be
	    applied to the document produced by applying `other`. When
	    `before` is `true`, order changes as if `this` comes before
	    `other`, otherwise (the default) treat `other` as coming first.
	    
	    Given two changes `A` and `B`, `A.compose(B.map(A))` and
	    `B.compose(A.map(B, true))` will produce the same document. This
	    provides a basic form of [operational
	    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
	    and can be used for collaborative editing.
	    */
	    map(other, before = false) { return other.empty ? this : mapSet(this, other, before, true); }
	    /**
	    Iterate over the changed ranges in the document, calling `f` for
	    each.
	    
	    When `individual` is true, adjacent changes are reported
	    separately.
	    */
	    iterChanges(f, individual = false) {
	        iterChanges(this, f, individual);
	    }
	    /**
	    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
	    set.
	    */
	    get desc() { return new ChangeDesc(this.sections); }
	    /**
	    @internal
	    */
	    filter(ranges) {
	        let resultSections = [], resultInserted = [], filteredSections = [];
	        let iter = new SectionIter(this);
	        done: for (let i = 0, pos = 0;;) {
	            let next = i == ranges.length ? 1e9 : ranges[i++];
	            while (pos < next || pos == next && iter.len == 0) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, next - pos);
	                addSection(filteredSections, len, -1);
	                let ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
	                addSection(resultSections, len, ins);
	                if (ins > 0)
	                    addInsert(resultInserted, resultSections, iter.text);
	                iter.forward(len);
	                pos += len;
	            }
	            let end = ranges[i++];
	            while (pos < end) {
	                if (iter.done)
	                    break done;
	                let len = Math.min(iter.len, end - pos);
	                addSection(resultSections, len, -1);
	                addSection(filteredSections, len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
	                iter.forward(len);
	                pos += len;
	            }
	        }
	        return { changes: new ChangeSet(resultSections, resultInserted),
	            filtered: new ChangeDesc(filteredSections) };
	    }
	    /**
	    Serialize this change set to a JSON-representable value.
	    */
	    toJSON() {
	        let parts = [];
	        for (let i = 0; i < this.sections.length; i += 2) {
	            let len = this.sections[i], ins = this.sections[i + 1];
	            if (ins < 0)
	                parts.push(len);
	            else if (ins == 0)
	                parts.push([len]);
	            else
	                parts.push([len].concat(this.inserted[i >> 1].toJSON()));
	        }
	        return parts;
	    }
	    /**
	    Create a change set for the given changes, for a document of the
	    given length, using `lineSep` as line separator.
	    */
	    static of(changes, length, lineSep) {
	        let sections = [], inserted = [], pos = 0;
	        let total = null;
	        function flush(force = false) {
	            if (!force && !sections.length)
	                return;
	            if (pos < length)
	                addSection(sections, length - pos, -1);
	            let set = new ChangeSet(sections, inserted);
	            total = total ? total.compose(set.map(total)) : set;
	            sections = [];
	            inserted = [];
	            pos = 0;
	        }
	        function process(spec) {
	            if (Array.isArray(spec)) {
	                for (let sub of spec)
	                    process(sub);
	            }
	            else if (spec instanceof ChangeSet) {
	                if (spec.length != length)
	                    throw new RangeError(`Mismatched change set length (got ${spec.length}, expected ${length})`);
	                flush();
	                total = total ? total.compose(spec.map(total)) : spec;
	            }
	            else {
	                let { from, to = from, insert } = spec;
	                if (from > to || from < 0 || to > length)
	                    throw new RangeError(`Invalid change range ${from} to ${to} (in doc of length ${length})`);
	                let insText = !insert ? Text.empty : typeof insert == "string" ? Text.of(insert.split(lineSep || DefaultSplit)) : insert;
	                let insLen = insText.length;
	                if (from == to && insLen == 0)
	                    return;
	                if (from < pos)
	                    flush();
	                if (from > pos)
	                    addSection(sections, from - pos, -1);
	                addSection(sections, to - from, insLen);
	                addInsert(inserted, sections, insText);
	                pos = to;
	            }
	        }
	        process(changes);
	        flush(!total);
	        return total;
	    }
	    /**
	    Create an empty changeset of the given length.
	    */
	    static empty(length) {
	        return new ChangeSet(length ? [length, -1] : [], []);
	    }
	    /**
	    Create a changeset from its JSON representation (as produced by
	    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
	    */
	    static fromJSON(json) {
	        if (!Array.isArray(json))
	            throw new RangeError("Invalid JSON representation of ChangeSet");
	        let sections = [], inserted = [];
	        for (let i = 0; i < json.length; i++) {
	            let part = json[i];
	            if (typeof part == "number") {
	                sections.push(part, -1);
	            }
	            else if (!Array.isArray(part) || typeof part[0] != "number" || part.some((e, i) => i && typeof e != "string")) {
	                throw new RangeError("Invalid JSON representation of ChangeSet");
	            }
	            else if (part.length == 1) {
	                sections.push(part[0], 0);
	            }
	            else {
	                while (inserted.length < i)
	                    inserted.push(Text.empty);
	                inserted[i] = Text.of(part.slice(1));
	                sections.push(part[0], inserted[i].length);
	            }
	        }
	        return new ChangeSet(sections, inserted);
	    }
	}
	function addSection(sections, len, ins, forceJoin = false) {
	    if (len == 0 && ins <= 0)
	        return;
	    let last = sections.length - 2;
	    if (last >= 0 && ins <= 0 && ins == sections[last + 1])
	        sections[last] += len;
	    else if (len == 0 && sections[last] == 0)
	        sections[last + 1] += ins;
	    else if (forceJoin) {
	        sections[last] += len;
	        sections[last + 1] += ins;
	    }
	    else
	        sections.push(len, ins);
	}
	function addInsert(values, sections, value) {
	    if (value.length == 0)
	        return;
	    let index = (sections.length - 2) >> 1;
	    if (index < values.length) {
	        values[values.length - 1] = values[values.length - 1].append(value);
	    }
	    else {
	        while (values.length < index)
	            values.push(Text.empty);
	        values.push(value);
	    }
	}
	function iterChanges(desc, f, individual) {
	    let inserted = desc.inserted;
	    for (let posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
	        let len = desc.sections[i++], ins = desc.sections[i++];
	        if (ins < 0) {
	            posA += len;
	            posB += len;
	        }
	        else {
	            let endA = posA, endB = posB, text = Text.empty;
	            for (;;) {
	                endA += len;
	                endB += ins;
	                if (ins && inserted)
	                    text = text.append(inserted[(i - 2) >> 1]);
	                if (individual || i == desc.sections.length || desc.sections[i + 1] < 0)
	                    break;
	                len = desc.sections[i++];
	                ins = desc.sections[i++];
	            }
	            f(posA, endA, posB, endB, text);
	            posA = endA;
	            posB = endB;
	        }
	    }
	}
	function mapSet(setA, setB, before, mkSet = false) {
	    let sections = [], insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    for (let posA = 0, posB = 0;;) {
	        if (a.ins == -1) {
	            posA += a.len;
	            a.next();
	        }
	        else if (b.ins == -1 && posB < posA) {
	            let skip = Math.min(b.len, posA - posB);
	            b.forward(skip);
	            addSection(sections, skip, -1);
	            posB += skip;
	        }
	        else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
	            addSection(sections, b.ins, -1);
	            while (posA > posB && !a.done && posA + a.len < posB + b.len) {
	                posA += a.len;
	                a.next();
	            }
	            posB += b.len;
	            b.next();
	        }
	        else if (a.ins >= 0) {
	            let len = 0, end = posA + a.len;
	            for (;;) {
	                if (b.ins >= 0 && posB > posA && posB + b.len < end) {
	                    len += b.ins;
	                    posB += b.len;
	                    b.next();
	                }
	                else if (b.ins == -1 && posB < end) {
	                    let skip = Math.min(b.len, end - posB);
	                    len += skip;
	                    b.forward(skip);
	                    posB += skip;
	                }
	                else {
	                    break;
	                }
	            }
	            addSection(sections, len, a.ins);
	            if (insert)
	                addInsert(insert, sections, a.text);
	            posA = end;
	            a.next();
	        }
	        else if (a.done && b.done) {
	            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
	        }
	        else {
	            throw new Error("Mismatched change set lengths");
	        }
	    }
	}
	function composeSets(setA, setB, mkSet = false) {
	    let sections = [];
	    let insert = mkSet ? [] : null;
	    let a = new SectionIter(setA), b = new SectionIter(setB);
	    for (let open = false;;) {
	        if (a.done && b.done) {
	            return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
	        }
	        else if (a.ins == 0) { // Deletion in A
	            addSection(sections, a.len, 0, open);
	            a.next();
	        }
	        else if (b.len == 0 && !b.done) { // Insertion in B
	            addSection(sections, 0, b.ins, open);
	            if (insert)
	                addInsert(insert, sections, b.text);
	            b.next();
	        }
	        else if (a.done || b.done) {
	            throw new Error("Mismatched change set lengths");
	        }
	        else {
	            let len = Math.min(a.len2, b.len), sectionLen = sections.length;
	            if (a.ins == -1) {
	                let insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
	                addSection(sections, len, insB, open);
	                if (insert && insB)
	                    addInsert(insert, sections, b.text);
	            }
	            else if (b.ins == -1) {
	                addSection(sections, a.off ? 0 : a.len, len, open);
	                if (insert)
	                    addInsert(insert, sections, a.textBit(len));
	            }
	            else {
	                addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
	                if (insert && !b.off)
	                    addInsert(insert, sections, b.text);
	            }
	            open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
	            a.forward2(len);
	            b.forward(len);
	        }
	    }
	}
	class SectionIter {
	    constructor(set) {
	        this.set = set;
	        this.i = 0;
	        this.next();
	    }
	    next() {
	        let { sections } = this.set;
	        if (this.i < sections.length) {
	            this.len = sections[this.i++];
	            this.ins = sections[this.i++];
	        }
	        else {
	            this.len = 0;
	            this.ins = -2;
	        }
	        this.off = 0;
	    }
	    get done() { return this.ins == -2; }
	    get len2() { return this.ins < 0 ? this.len : this.ins; }
	    get text() {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length ? Text.empty : inserted[index];
	    }
	    textBit(len) {
	        let { inserted } = this.set, index = (this.i - 2) >> 1;
	        return index >= inserted.length && !len ? Text.empty
	            : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
	    }
	    forward(len) {
	        if (len == this.len)
	            this.next();
	        else {
	            this.len -= len;
	            this.off += len;
	        }
	    }
	    forward2(len) {
	        if (this.ins == -1)
	            this.forward(len);
	        else if (len == this.ins)
	            this.next();
	        else {
	            this.ins -= len;
	            this.off += len;
	        }
	    }
	}

	/**
	A single selection range. When
	[`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
	is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
	multiple ranges. By default, selections hold exactly one range.
	*/
	class SelectionRange {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The lower boundary of the range.
	    */
	    from, 
	    /**
	    The upper boundary of the range.
	    */
	    to, flags) {
	        this.from = from;
	        this.to = to;
	        this.flags = flags;
	    }
	    /**
	    The anchor of the range—the side that doesn't move when you
	    extend it.
	    */
	    get anchor() { return this.flags & 16 /* Inverted */ ? this.to : this.from; }
	    /**
	    The head of the range, which is moved when the range is
	    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
	    */
	    get head() { return this.flags & 16 /* Inverted */ ? this.from : this.to; }
	    /**
	    True when `anchor` and `head` are at the same position.
	    */
	    get empty() { return this.from == this.to; }
	    /**
	    If this is a cursor that is explicitly associated with the
	    character on one of its sides, this returns the side. -1 means
	    the character before its position, 1 the character after, and 0
	    means no association.
	    */
	    get assoc() { return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0; }
	    /**
	    The bidirectional text level associated with this cursor, if
	    any.
	    */
	    get bidiLevel() {
	        let level = this.flags & 3 /* BidiLevelMask */;
	        return level == 3 ? null : level;
	    }
	    /**
	    The goal column (stored vertical offset) associated with a
	    cursor. This is used to preserve the vertical position when
	    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
	    lines of different length.
	    */
	    get goalColumn() {
	        let value = this.flags >> 5 /* GoalColumnOffset */;
	        return value == 33554431 /* NoGoalColumn */ ? undefined : value;
	    }
	    /**
	    Map this range through a change, producing a valid range in the
	    updated document.
	    */
	    map(change, assoc = -1) {
	        let from = change.mapPos(this.from, assoc), to = change.mapPos(this.to, assoc);
	        return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
	    }
	    /**
	    Extend this range to cover at least `from` to `to`.
	    */
	    extend(from, to = from) {
	        if (from <= this.anchor && to >= this.anchor)
	            return EditorSelection.range(from, to);
	        let head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
	        return EditorSelection.range(this.anchor, head);
	    }
	    /**
	    Compare this range to another range.
	    */
	    eq(other) {
	        return this.anchor == other.anchor && this.head == other.head;
	    }
	    /**
	    Return a JSON-serializable object representing the range.
	    */
	    toJSON() { return { anchor: this.anchor, head: this.head }; }
	    /**
	    Convert a JSON representation of a range to a `SelectionRange`
	    instance.
	    */
	    static fromJSON(json) {
	        if (!json || typeof json.anchor != "number" || typeof json.head != "number")
	            throw new RangeError("Invalid JSON representation for SelectionRange");
	        return EditorSelection.range(json.anchor, json.head);
	    }
	}
	/**
	An editor selection holds one or more selection ranges.
	*/
	class EditorSelection {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The ranges in the selection, sorted by position. Ranges cannot
	    overlap (but they may touch, if they aren't empty).
	    */
	    ranges, 
	    /**
	    The index of the _main_ range in the selection (which is
	    usually the range that was added last).
	    */
	    mainIndex = 0) {
	        this.ranges = ranges;
	        this.mainIndex = mainIndex;
	    }
	    /**
	    Map a selection through a change. Used to adjust the selection
	    position for changes.
	    */
	    map(change, assoc = -1) {
	        if (change.empty)
	            return this;
	        return EditorSelection.create(this.ranges.map(r => r.map(change, assoc)), this.mainIndex);
	    }
	    /**
	    Compare this selection to another selection.
	    */
	    eq(other) {
	        if (this.ranges.length != other.ranges.length ||
	            this.mainIndex != other.mainIndex)
	            return false;
	        for (let i = 0; i < this.ranges.length; i++)
	            if (!this.ranges[i].eq(other.ranges[i]))
	                return false;
	        return true;
	    }
	    /**
	    Get the primary selection range. Usually, you should make sure
	    your code applies to _all_ ranges, by using methods like
	    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
	    */
	    get main() { return this.ranges[this.mainIndex]; }
	    /**
	    Make sure the selection only has one range. Returns a selection
	    holding only the main range from this selection.
	    */
	    asSingle() {
	        return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
	    }
	    /**
	    Extend this selection with an extra range.
	    */
	    addRange(range, main = true) {
	        return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
	    }
	    /**
	    Replace a given range with another range, and then normalize the
	    selection to merge and sort ranges if necessary.
	    */
	    replaceRange(range, which = this.mainIndex) {
	        let ranges = this.ranges.slice();
	        ranges[which] = range;
	        return EditorSelection.create(ranges, this.mainIndex);
	    }
	    /**
	    Convert this selection to an object that can be serialized to
	    JSON.
	    */
	    toJSON() {
	        return { ranges: this.ranges.map(r => r.toJSON()), main: this.mainIndex };
	    }
	    /**
	    Create a selection from a JSON representation.
	    */
	    static fromJSON(json) {
	        if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length)
	            throw new RangeError("Invalid JSON representation for EditorSelection");
	        return new EditorSelection(json.ranges.map((r) => SelectionRange.fromJSON(r)), json.main);
	    }
	    /**
	    Create a selection holding a single range.
	    */
	    static single(anchor, head = anchor) {
	        return new EditorSelection([EditorSelection.range(anchor, head)], 0);
	    }
	    /**
	    Sort and merge the given set of ranges, creating a valid
	    selection.
	    */
	    static create(ranges, mainIndex = 0) {
	        if (ranges.length == 0)
	            throw new RangeError("A selection needs at least one range");
	        for (let pos = 0, i = 0; i < ranges.length; i++) {
	            let range = ranges[i];
	            if (range.empty ? range.from <= pos : range.from < pos)
	                return normalized(ranges.slice(), mainIndex);
	            pos = range.to;
	        }
	        return new EditorSelection(ranges, mainIndex);
	    }
	    /**
	    Create a cursor selection range at the given position. You can
	    safely ignore the optional arguments in most situations.
	    */
	    static cursor(pos, assoc = 0, bidiLevel, goalColumn) {
	        return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) |
	            (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) |
	            ((goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */));
	    }
	    /**
	    Create a selection range.
	    */
	    static range(anchor, head, goalColumn) {
	        let goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
	        return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
	    }
	}
	function normalized(ranges, mainIndex = 0) {
	    let main = ranges[mainIndex];
	    ranges.sort((a, b) => a.from - b.from);
	    mainIndex = ranges.indexOf(main);
	    for (let i = 1; i < ranges.length; i++) {
	        let range = ranges[i], prev = ranges[i - 1];
	        if (range.empty ? range.from <= prev.to : range.from < prev.to) {
	            let from = prev.from, to = Math.max(range.to, prev.to);
	            if (i <= mainIndex)
	                mainIndex--;
	            ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
	        }
	    }
	    return new EditorSelection(ranges, mainIndex);
	}
	function checkSelection(selection, docLength) {
	    for (let range of selection.ranges)
	        if (range.to > docLength)
	            throw new RangeError("Selection points outside of document");
	}

	let nextID = 0;
	/**
	A facet is a labeled value that is associated with an editor
	state. It takes inputs from any number of extensions, and combines
	those into a single output value.

	Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
	associated with an editor or the [tab
	size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
	value, using the input with the hightest precedence).
	*/
	class Facet {
	    constructor(
	    /**
	    @internal
	    */
	    combine, 
	    /**
	    @internal
	    */
	    compareInput, 
	    /**
	    @internal
	    */
	    compare, isStatic, 
	    /**
	    @internal
	    */
	    extensions) {
	        this.combine = combine;
	        this.compareInput = compareInput;
	        this.compare = compare;
	        this.isStatic = isStatic;
	        this.extensions = extensions;
	        /**
	        @internal
	        */
	        this.id = nextID++;
	        this.default = combine([]);
	    }
	    /**
	    Define a new facet.
	    */
	    static define(config = {}) {
	        return new Facet(config.combine || ((a) => a), config.compareInput || ((a, b) => a === b), config.compare || (!config.combine ? sameArray$1 : (a, b) => a === b), !!config.static, config.enables);
	    }
	    /**
	    Returns an extension that adds the given value for this facet.
	    */
	    of(value) {
	        return new FacetProvider([], this, 0 /* Static */, value);
	    }
	    /**
	    Create an extension that computes a value for the facet from a
	    state. You must take care to declare the parts of the state that
	    this value depends on, since your function is only called again
	    for a new state when one of those parts changed.
	    
	    In most cases, you'll want to use the
	    [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
	    defining a field instead.
	    */
	    compute(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 1 /* Single */, get);
	    }
	    /**
	    Create an extension that computes zero or more values for this
	    facet from a state.
	    */
	    computeN(deps, get) {
	        if (this.isStatic)
	            throw new Error("Can't compute a static facet");
	        return new FacetProvider(deps, this, 2 /* Multi */, get);
	    }
	    from(field, get) {
	        if (!get)
	            get = x => x;
	        return this.compute([field], state => get(state.field(field)));
	    }
	}
	function sameArray$1(a, b) {
	    return a == b || a.length == b.length && a.every((e, i) => e === b[i]);
	}
	class FacetProvider {
	    constructor(dependencies, facet, type, value) {
	        this.dependencies = dependencies;
	        this.facet = facet;
	        this.type = type;
	        this.value = value;
	        this.id = nextID++;
	    }
	    dynamicSlot(addresses) {
	        var _a;
	        let getter = this.value;
	        let compare = this.facet.compareInput;
	        let idx = addresses[this.id] >> 1, multi = this.type == 2 /* Multi */;
	        let depDoc = false, depSel = false, depAddrs = [];
	        for (let dep of this.dependencies) {
	            if (dep == "doc")
	                depDoc = true;
	            else if (dep == "selection")
	                depSel = true;
	            else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0)
	                depAddrs.push(addresses[dep.id]);
	        }
	        return (state, tr) => {
	            if (!tr || tr.reconfigured) {
	                state.values[idx] = getter(state);
	                return 1 /* Changed */;
	            }
	            else {
	                let depChanged = (depDoc && tr.docChanged) || (depSel && (tr.docChanged || tr.selection)) ||
	                    depAddrs.some(addr => (ensureAddr(state, addr) & 1 /* Changed */) > 0);
	                if (!depChanged)
	                    return 0;
	                let newVal = getter(state), oldVal = tr.startState.values[idx];
	                if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal))
	                    return 0;
	                state.values[idx] = newVal;
	                return 1 /* Changed */;
	            }
	        };
	    }
	}
	function compareArray(a, b, compare) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!compare(a[i], b[i]))
	            return false;
	    return true;
	}
	function dynamicFacetSlot(addresses, facet, providers) {
	    let providerAddrs = providers.map(p => addresses[p.id]);
	    let providerTypes = providers.map(p => p.type);
	    let dynamic = providerAddrs.filter(p => !(p & 1));
	    let idx = addresses[facet.id] >> 1;
	    return (state, tr) => {
	        let oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
	        let changed = oldAddr == null;
	        for (let dynAddr of dynamic) {
	            if (ensureAddr(state, dynAddr) & 1 /* Changed */)
	                changed = true;
	        }
	        if (!changed)
	            return 0;
	        let values = [];
	        for (let i = 0; i < providerAddrs.length; i++) {
	            let value = getAddr(state, providerAddrs[i]);
	            if (providerTypes[i] == 2 /* Multi */)
	                for (let val of value)
	                    values.push(val);
	            else
	                values.push(value);
	        }
	        let newVal = facet.combine(values);
	        if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr)))
	            return 0;
	        state.values[idx] = newVal;
	        return 1 /* Changed */;
	    };
	}
	function maybeIndex(state, id) {
	    let found = state.config.address[id];
	    return found == null ? null : found >> 1;
	}
	const initField = /*@__PURE__*/Facet.define({ static: true });
	/**
	Fields can store additional information in an editor state, and
	keep it in sync with the rest of the state.
	*/
	class StateField {
	    constructor(
	    /**
	    @internal
	    */
	    id, createF, updateF, compareF, 
	    /**
	    @internal
	    */
	    spec) {
	        this.id = id;
	        this.createF = createF;
	        this.updateF = updateF;
	        this.compareF = compareF;
	        this.spec = spec;
	        /**
	        @internal
	        */
	        this.provides = undefined;
	    }
	    /**
	    Define a state field.
	    */
	    static define(config) {
	        let field = new StateField(nextID++, config.create, config.update, config.compare || ((a, b) => a === b), config);
	        if (config.provide)
	            field.provides = config.provide(field);
	        return field;
	    }
	    create(state) {
	        let init = state.facet(initField).find(i => i.field == this);
	        return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
	    }
	    /**
	    @internal
	    */
	    slot(addresses) {
	        let idx = addresses[this.id] >> 1;
	        return (state, tr) => {
	            if (!tr || (tr.reconfigured && maybeIndex(tr.startState, this.id) == null)) {
	                state.values[idx] = this.create(state);
	                return 1 /* Changed */;
	            }
	            let oldVal, changed = 0;
	            if (tr.reconfigured) {
	                oldVal = tr.startState.values[maybeIndex(tr.startState, this.id)];
	                changed = 1 /* Changed */;
	            }
	            else {
	                oldVal = tr.startState.values[idx];
	            }
	            let value = this.updateF(oldVal, tr);
	            if (!changed && !this.compareF(oldVal, value))
	                changed = 1 /* Changed */;
	            if (changed)
	                state.values[idx] = value;
	            return changed;
	        };
	    }
	    /**
	    Returns an extension that enables this field and overrides the
	    way it is initialized. Can be useful when you need to provide a
	    non-default starting value for the field.
	    */
	    init(create) {
	        return [this, initField.of({ field: this, create })];
	    }
	    /**
	    State field instances can be used as
	    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
	    given state.
	    */
	    get extension() { return this; }
	}
	const Prec_ = { fallback: 3, default: 2, extend: 1, override: 0 };
	function prec(value) {
	    return (ext) => new PrecExtension(ext, value);
	}
	/**
	By default extensions are registered in the order they are found
	in the flattened form of nested array that was provided.
	Individual extension values can be assigned a precedence to
	override this. Extensions that do not have a precedence set get
	the precedence of the nearest parent with a precedence, or
	[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
	final ordering of extensions is determined by first sorting by
	precedence and then by order within each precedence.
	*/
	const Prec = {
	    /**
	    A precedence below the default precedence, which will cause
	    default-precedence extensions to override it even if they are
	    specified later in the extension ordering.
	    */
	    fallback: /*@__PURE__*/prec(Prec_.fallback),
	    /**
	    The regular default precedence.
	    */
	    default: /*@__PURE__*/prec(Prec_.default),
	    /**
	    A higher-than-default precedence.
	    */
	    extend: /*@__PURE__*/prec(Prec_.extend),
	    /**
	    Precedence above the `default` and `extend` precedences.
	    */
	    override: /*@__PURE__*/prec(Prec_.override)
	};
	class PrecExtension {
	    constructor(inner, prec) {
	        this.inner = inner;
	        this.prec = prec;
	    }
	}
	/**
	Extension compartments can be used to make a configuration
	dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
	configuration in a compartment, you can later
	[replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
	transaction.
	*/
	class Compartment {
	    /**
	    Create an instance of this compartment to add to your [state
	    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
	    */
	    of(ext) { return new CompartmentInstance(this, ext); }
	    /**
	    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
	    reconfigures this compartment.
	    */
	    reconfigure(content) {
	        return Compartment.reconfigure.of({ compartment: this, extension: content });
	    }
	    /**
	    Get the current content of the compartment in the state, or
	    `undefined` if it isn't present.
	    */
	    get(state) {
	        return state.config.compartments.get(this);
	    }
	}
	class CompartmentInstance {
	    constructor(compartment, inner) {
	        this.compartment = compartment;
	        this.inner = inner;
	    }
	}
	class Configuration {
	    constructor(base, compartments, dynamicSlots, address, staticValues) {
	        this.base = base;
	        this.compartments = compartments;
	        this.dynamicSlots = dynamicSlots;
	        this.address = address;
	        this.staticValues = staticValues;
	        this.statusTemplate = [];
	        while (this.statusTemplate.length < dynamicSlots.length)
	            this.statusTemplate.push(0 /* Uninitialized */);
	    }
	    staticFacet(facet) {
	        let addr = this.address[facet.id];
	        return addr == null ? facet.default : this.staticValues[addr >> 1];
	    }
	    static resolve(base, compartments, oldState) {
	        let fields = [];
	        let facets = Object.create(null);
	        let newCompartments = new Map();
	        for (let ext of flatten(base, compartments, newCompartments)) {
	            if (ext instanceof StateField)
	                fields.push(ext);
	            else
	                (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
	        }
	        let address = Object.create(null);
	        let staticValues = [];
	        let dynamicSlots = [];
	        for (let field of fields) {
	            address[field.id] = dynamicSlots.length << 1;
	            dynamicSlots.push(a => field.slot(a));
	        }
	        for (let id in facets) {
	            let providers = facets[id], facet = providers[0].facet;
	            if (providers.every(p => p.type == 0 /* Static */)) {
	                address[facet.id] = (staticValues.length << 1) | 1;
	                let value = facet.combine(providers.map(p => p.value));
	                let oldAddr = oldState ? oldState.config.address[facet.id] : null;
	                if (oldAddr != null) {
	                    let oldVal = getAddr(oldState, oldAddr);
	                    if (facet.compare(value, oldVal))
	                        value = oldVal;
	                }
	                staticValues.push(value);
	            }
	            else {
	                for (let p of providers) {
	                    if (p.type == 0 /* Static */) {
	                        address[p.id] = (staticValues.length << 1) | 1;
	                        staticValues.push(p.value);
	                    }
	                    else {
	                        address[p.id] = dynamicSlots.length << 1;
	                        dynamicSlots.push(a => p.dynamicSlot(a));
	                    }
	                }
	                address[facet.id] = dynamicSlots.length << 1;
	                dynamicSlots.push(a => dynamicFacetSlot(a, facet, providers));
	            }
	        }
	        return new Configuration(base, newCompartments, dynamicSlots.map(f => f(address)), address, staticValues);
	    }
	}
	function flatten(extension, compartments, newCompartments) {
	    let result = [[], [], [], []];
	    let seen = new Map();
	    function inner(ext, prec) {
	        let known = seen.get(ext);
	        if (known != null) {
	            if (known >= prec)
	                return;
	            let found = result[known].indexOf(ext);
	            if (found > -1)
	                result[known].splice(found, 1);
	            if (ext instanceof CompartmentInstance)
	                newCompartments.delete(ext.compartment);
	        }
	        seen.set(ext, prec);
	        if (Array.isArray(ext)) {
	            for (let e of ext)
	                inner(e, prec);
	        }
	        else if (ext instanceof CompartmentInstance) {
	            if (newCompartments.has(ext.compartment))
	                throw new RangeError(`Duplicate use of compartment in extensions`);
	            let content = compartments.get(ext.compartment) || ext.inner;
	            newCompartments.set(ext.compartment, content);
	            inner(content, prec);
	        }
	        else if (ext instanceof PrecExtension) {
	            inner(ext.inner, ext.prec);
	        }
	        else if (ext instanceof StateField) {
	            result[prec].push(ext);
	            if (ext.provides)
	                inner(ext.provides, prec);
	        }
	        else if (ext instanceof FacetProvider) {
	            result[prec].push(ext);
	            if (ext.facet.extensions)
	                inner(ext.facet.extensions, prec);
	        }
	        else {
	            let content = ext.extension;
	            if (!content)
	                throw new Error(`Unrecognized extension value in extension set (${ext}). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks.`);
	            inner(content, prec);
	        }
	    }
	    inner(extension, Prec_.default);
	    return result.reduce((a, b) => a.concat(b));
	}
	function ensureAddr(state, addr) {
	    if (addr & 1)
	        return 2 /* Computed */;
	    let idx = addr >> 1;
	    let status = state.status[idx];
	    if (status == 4 /* Computing */)
	        throw new Error("Cyclic dependency between fields and/or facets");
	    if (status & 2 /* Computed */)
	        return status;
	    state.status[idx] = 4 /* Computing */;
	    let changed = state.config.dynamicSlots[idx](state, state.applying);
	    return state.status[idx] = 2 /* Computed */ | changed;
	}
	function getAddr(state, addr) {
	    return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
	}

	const languageData = /*@__PURE__*/Facet.define();
	const allowMultipleSelections = /*@__PURE__*/Facet.define({
	    combine: values => values.some(v => v),
	    static: true
	});
	const lineSeparator = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : undefined,
	    static: true
	});
	const changeFilter = /*@__PURE__*/Facet.define();
	const transactionFilter = /*@__PURE__*/Facet.define();
	const transactionExtender = /*@__PURE__*/Facet.define();
	const readOnly = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : false
	});

	/**
	Annotations are tagged values that are used to add metadata to
	transactions in an extensible way. They should be used to model
	things that effect the entire transaction (such as its [time
	stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
	[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
	_alongside_ the other changes made by the transaction, [state
	effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
	*/
	class Annotation {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The annotation type.
	    */
	    type, 
	    /**
	    The value of this annotation.
	    */
	    value) {
	        this.type = type;
	        this.value = value;
	    }
	    /**
	    Define a new type of annotation.
	    */
	    static define() { return new AnnotationType(); }
	}
	/**
	Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
	*/
	class AnnotationType {
	    /**
	    Create an instance of this annotation.
	    */
	    of(value) { return new Annotation(this, value); }
	}
	/**
	Representation of a type of state effect. Defined with
	[`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
	*/
	class StateEffectType {
	    /**
	    @internal
	    */
	    constructor(
	    // The `any` types in these function types are there to work
	    // around TypeScript issue #37631, where the type guard on
	    // `StateEffect.is` mysteriously stops working when these properly
	    // have type `Value`.
	    /**
	    @internal
	    */
	    map) {
	        this.map = map;
	    }
	    /**
	    Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
	    type.
	    */
	    of(value) { return new StateEffect(this, value); }
	}
	/**
	State effects can be used to represent additional effects
	associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
	are often useful to model changes to custom [state
	fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
	document or selection changes.
	*/
	class StateEffect {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    type, 
	    /**
	    The value of this effect.
	    */
	    value) {
	        this.type = type;
	        this.value = value;
	    }
	    /**
	    Map this effect through a position mapping. Will return
	    `undefined` when that ends up deleting the effect.
	    */
	    map(mapping) {
	        let mapped = this.type.map(this.value, mapping);
	        return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
	    }
	    /**
	    Tells you whether this effect object is of a given
	    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
	    */
	    is(type) { return this.type == type; }
	    /**
	    Define a new effect type. The type parameter indicates the type
	    of values that his effect holds.
	    */
	    static define(spec = {}) {
	        return new StateEffectType(spec.map || (v => v));
	    }
	    /**
	    Map an array of effects through a change set.
	    */
	    static mapEffects(effects, mapping) {
	        if (!effects.length)
	            return effects;
	        let result = [];
	        for (let effect of effects) {
	            let mapped = effect.map(mapping);
	            if (mapped)
	                result.push(mapped);
	        }
	        return result;
	    }
	}
	/**
	This effect can be used to reconfigure the root extensions of
	the editor. Doing this will discard any extensions
	[appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
	the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
	compartments.
	*/
	StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
	/**
	Append extensions to the top-level configuration of the editor.
	*/
	StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
	/**
	Changes to the editor state are grouped into transactions.
	Typically, a user action creates a single transaction, which may
	contain any number of document changes, may change the selection,
	or have other effects. Create a transaction by calling
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
	*/
	class Transaction {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The state from which the transaction starts.
	    */
	    startState, 
	    /**
	    The document changes made by this transaction.
	    */
	    changes, 
	    /**
	    The selection set by this transaction, or undefined if it
	    doesn't explicitly set a selection.
	    */
	    selection, 
	    /**
	    The effects added to the transaction.
	    */
	    effects, 
	    /**
	    @internal
	    */
	    annotations, 
	    /**
	    Whether the selection should be scrolled into view after this
	    transaction is dispatched.
	    */
	    scrollIntoView) {
	        this.startState = startState;
	        this.changes = changes;
	        this.selection = selection;
	        this.effects = effects;
	        this.annotations = annotations;
	        this.scrollIntoView = scrollIntoView;
	        /**
	        @internal
	        */
	        this._doc = null;
	        /**
	        @internal
	        */
	        this._state = null;
	        if (selection)
	            checkSelection(selection, changes.newLength);
	        if (!annotations.some((a) => a.type == Transaction.time))
	            this.annotations = annotations.concat(Transaction.time.of(Date.now()));
	    }
	    /**
	    The new document produced by the transaction. Contrary to
	    [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
	    force the entire new state to be computed right away, so it is
	    recommended that [transaction
	    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
	    when they need to look at the new document.
	    */
	    get newDoc() {
	        return this._doc || (this._doc = this.changes.apply(this.startState.doc));
	    }
	    /**
	    The new selection produced by the transaction. If
	    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
	    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
	    current selection through the changes made by the transaction.
	    */
	    get newSelection() {
	        return this.selection || this.startState.selection.map(this.changes);
	    }
	    /**
	    The new state created by the transaction. Computed on demand
	    (but retained for subsequent access), so itis recommended not to
	    access it in [transaction
	    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
	    */
	    get state() {
	        if (!this._state)
	            this.startState.applyTransaction(this);
	        return this._state;
	    }
	    /**
	    Get the value of the given annotation type, if any.
	    */
	    annotation(type) {
	        for (let ann of this.annotations)
	            if (ann.type == type)
	                return ann.value;
	        return undefined;
	    }
	    /**
	    Indicates whether the transaction changed the document.
	    */
	    get docChanged() { return !this.changes.empty; }
	    /**
	    Indicates whether this transaction reconfigures the state
	    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
	    with a top-level configuration
	    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
	    */
	    get reconfigured() { return this.startState.config != this.state.config; }
	    /**
	    Returns true if the transaction has a [user
	    event](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent) annotation that is equal to
	    or more specific than `event`. For example, if the transaction
	    has `"select.pointer"` as user event, `"select"` and
	    `"select.pointer"` will match it.
	    */
	    isUserEvent(event) {
	        let e = this.annotation(Transaction.userEvent);
	        return e && (e == event || e.length > event.length && e.slice(0, event.length) == event && e[event.length] == ".");
	    }
	}
	/**
	Annotation used to store transaction timestamps.
	*/
	Transaction.time = /*@__PURE__*/Annotation.define();
	/**
	Annotation used to associate a transaction with a user interface
	event. Holds a string identifying the event, using a
	dot-separated format to support attaching more specific
	information. The events used by the core libraries are:

	 - `"input"` when content is entered
	   - `"input.type"` for typed input
	     - `"input.type.compose"` for composition
	   - `"input.paste"` for pasted input
	   - `"input.drop"` when adding content with drag-and-drop
	   - `"input.complete"` when autocompleting
	 - `"delete"` when the user deletes content
	   - `"delete.selection"` when deleting the selection
	   - `"delete.forward"` when deleting forward from the selection
	   - `"delete.backward"` when deleting backward from the selection
	   - `"delete.cut"` when cutting to the clipboard
	 - `"move"` when content is moved
	   - `"move.drop"` when content is moved within the editor through drag-and-drop
	 - `"select"` when explicitly changing the selection
	   - `"select.pointer"` when selecting with a mouse or other pointing device
	 - `"undo"` and `"redo"` for history actions

	Use [`isUserEvent`](https://codemirror.net/6/docs/ref/#state.Transaction.isUserEvent) to check
	whether the annotation matches a given event.
	*/
	Transaction.userEvent = /*@__PURE__*/Annotation.define();
	/**
	Annotation indicating whether a transaction should be added to
	the undo history or not.
	*/
	Transaction.addToHistory = /*@__PURE__*/Annotation.define();
	/**
	Annotation indicating (when present and true) that a transaction
	represents a change made by some other actor, not the user. This
	is used, for example, to tag other people's changes in
	collaborative editing.
	*/
	Transaction.remote = /*@__PURE__*/Annotation.define();
	function joinRanges(a, b) {
	    let result = [];
	    for (let iA = 0, iB = 0;;) {
	        let from, to;
	        if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
	            from = a[iA++];
	            to = a[iA++];
	        }
	        else if (iB < b.length) {
	            from = b[iB++];
	            to = b[iB++];
	        }
	        else
	            return result;
	        if (!result.length || result[result.length - 1] < from)
	            result.push(from, to);
	        else if (result[result.length - 1] < to)
	            result[result.length - 1] = to;
	    }
	}
	function mergeTransaction(a, b, sequential) {
	    var _a;
	    let mapForA, mapForB, changes;
	    if (sequential) {
	        mapForA = b.changes;
	        mapForB = ChangeSet.empty(b.changes.length);
	        changes = a.changes.compose(b.changes);
	    }
	    else {
	        mapForA = b.changes.map(a.changes);
	        mapForB = a.changes.mapDesc(b.changes, true);
	        changes = a.changes.compose(mapForA);
	    }
	    return {
	        changes,
	        selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
	        effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
	        annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
	        scrollIntoView: a.scrollIntoView || b.scrollIntoView
	    };
	}
	function resolveTransactionInner(state, spec, docSize) {
	    let sel = spec.selection, annotations = asArray$1(spec.annotations);
	    if (spec.userEvent)
	        annotations = annotations.concat(Transaction.userEvent.of(spec.userEvent));
	    return {
	        changes: spec.changes instanceof ChangeSet ? spec.changes
	            : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
	        selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
	        effects: asArray$1(spec.effects),
	        annotations,
	        scrollIntoView: !!spec.scrollIntoView
	    };
	}
	function resolveTransaction(state, specs, filter) {
	    let s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
	    if (specs.length && specs[0].filter === false)
	        filter = false;
	    for (let i = 1; i < specs.length; i++) {
	        if (specs[i].filter === false)
	            filter = false;
	        let seq = !!specs[i].sequential;
	        s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
	    }
	    let tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
	    return extendTransaction(filter ? filterTransaction(tr) : tr);
	}
	// Finish a transaction by applying filters if necessary.
	function filterTransaction(tr) {
	    let state = tr.startState;
	    // Change filters
	    let result = true;
	    for (let filter of state.facet(changeFilter)) {
	        let value = filter(tr);
	        if (value === false) {
	            result = false;
	            break;
	        }
	        if (Array.isArray(value))
	            result = result === true ? value : joinRanges(result, value);
	    }
	    if (result !== true) {
	        let changes, back;
	        if (result === false) {
	            back = tr.changes.invertedDesc;
	            changes = ChangeSet.empty(state.doc.length);
	        }
	        else {
	            let filtered = tr.changes.filter(result);
	            changes = filtered.changes;
	            back = filtered.filtered.invertedDesc;
	        }
	        tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
	    }
	    // Transaction filters
	    let filters = state.facet(transactionFilter);
	    for (let i = filters.length - 1; i >= 0; i--) {
	        let filtered = filters[i](tr);
	        if (filtered instanceof Transaction)
	            tr = filtered;
	        else if (Array.isArray(filtered) && filtered.length == 1 && filtered[0] instanceof Transaction)
	            tr = filtered[0];
	        else
	            tr = resolveTransaction(state, asArray$1(filtered), false);
	    }
	    return tr;
	}
	function extendTransaction(tr) {
	    let state = tr.startState, extenders = state.facet(transactionExtender), spec = tr;
	    for (let i = extenders.length - 1; i >= 0; i--) {
	        let extension = extenders[i](tr);
	        if (extension && Object.keys(extension).length)
	            spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
	    }
	    return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
	}
	const none$5 = [];
	function asArray$1(value) {
	    return value == null ? none$5 : Array.isArray(value) ? value : [value];
	}

	/**
	The categories produced by a [character
	categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
	do things like selecting by word.
	*/
	var CharCategory = /*@__PURE__*/(function (CharCategory) {
	    /**
	    Word characters.
	    */
	    CharCategory[CharCategory["Word"] = 0] = "Word";
	    /**
	    Whitespace.
	    */
	    CharCategory[CharCategory["Space"] = 1] = "Space";
	    /**
	    Anything else.
	    */
	    CharCategory[CharCategory["Other"] = 2] = "Other";
	return CharCategory})(CharCategory || (CharCategory = {}));
	const nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
	let wordChar;
	try {
	    wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
	}
	catch (_) { }
	function hasWordChar(str) {
	    if (wordChar)
	        return wordChar.test(str);
	    for (let i = 0; i < str.length; i++) {
	        let ch = str[i];
	        if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch)))
	            return true;
	    }
	    return false;
	}
	function makeCategorizer(wordChars) {
	    return (char) => {
	        if (!/\S/.test(char))
	            return CharCategory.Space;
	        if (hasWordChar(char))
	            return CharCategory.Word;
	        for (let i = 0; i < wordChars.length; i++)
	            if (char.indexOf(wordChars[i]) > -1)
	                return CharCategory.Word;
	        return CharCategory.Other;
	    };
	}

	/**
	The editor state class is a persistent (immutable) data structure.
	To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
	[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
	instance, without modifying the original object.

	As such, _never_ mutate properties of a state directly. That'll
	just break things.
	*/
	class EditorState {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    config, 
	    /**
	    The current document.
	    */
	    doc, 
	    /**
	    The current selection.
	    */
	    selection, tr = null) {
	        this.config = config;
	        this.doc = doc;
	        this.selection = selection;
	        /**
	        @internal
	        */
	        this.applying = null;
	        this.status = config.statusTemplate.slice();
	        if (tr && tr.startState.config == config) {
	            this.values = tr.startState.values.slice();
	        }
	        else {
	            this.values = config.dynamicSlots.map(_ => null);
	            // Copy over old values for shared facets/fields if this is a reconfigure
	            if (tr)
	                for (let id in config.address) {
	                    let cur = config.address[id], prev = tr.startState.config.address[id];
	                    if (prev != null && (cur & 1) == 0)
	                        this.values[cur >> 1] = getAddr(tr.startState, prev);
	                }
	        }
	        this.applying = tr;
	        // Fill in the computed state immediately, so that further queries
	        // for it made during the update return this state
	        if (tr)
	            tr._state = this;
	        for (let i = 0; i < this.config.dynamicSlots.length; i++)
	            ensureAddr(this, i << 1);
	        this.applying = null;
	    }
	    field(field, require = true) {
	        let addr = this.config.address[field.id];
	        if (addr == null) {
	            if (require)
	                throw new RangeError("Field is not present in this state");
	            return undefined;
	        }
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /**
	    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
	    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
	    can be passed. Unless
	    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
	    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
	    are assumed to start in the _current_ document (not the document
	    produced by previous specs), and its
	    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
	    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
	    to the document created by its _own_ changes. The resulting
	    transaction contains the combined effect of all the different
	    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
	    specs take precedence over earlier ones.
	    */
	    update(...specs) {
	        return resolveTransaction(this, specs, true);
	    }
	    /**
	    @internal
	    */
	    applyTransaction(tr) {
	        let conf = this.config, { base, compartments } = conf;
	        for (let effect of tr.effects) {
	            if (effect.is(Compartment.reconfigure)) {
	                if (conf) {
	                    compartments = new Map;
	                    conf.compartments.forEach((val, key) => compartments.set(key, val));
	                    conf = null;
	                }
	                compartments.set(effect.value.compartment, effect.value.extension);
	            }
	            else if (effect.is(StateEffect.reconfigure)) {
	                conf = null;
	                base = effect.value;
	            }
	            else if (effect.is(StateEffect.appendConfig)) {
	                conf = null;
	                base = asArray$1(base).concat(effect.value);
	            }
	        }
	        new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);
	    }
	    /**
	    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
	    replaces every selection range with the given content.
	    */
	    replaceSelection(text) {
	        if (typeof text == "string")
	            text = this.toText(text);
	        return this.changeByRange(range => ({ changes: { from: range.from, to: range.to, insert: text },
	            range: EditorSelection.cursor(range.from + text.length) }));
	    }
	    /**
	    Create a set of changes and a new selection by running the given
	    function for each range in the active selection. The function
	    can return an optional set of changes (in the coordinate space
	    of the start document), plus an updated range (in the coordinate
	    space of the document produced by the call's own changes). This
	    method will merge all the changes and ranges into a single
	    changeset and selection, and return it as a [transaction
	    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
	    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
	    */
	    changeByRange(f) {
	        let sel = this.selection;
	        let result1 = f(sel.ranges[0]);
	        let changes = this.changes(result1.changes), ranges = [result1.range];
	        let effects = asArray$1(result1.effects);
	        for (let i = 1; i < sel.ranges.length; i++) {
	            let result = f(sel.ranges[i]);
	            let newChanges = this.changes(result.changes), newMapped = newChanges.map(changes);
	            for (let j = 0; j < i; j++)
	                ranges[j] = ranges[j].map(newMapped);
	            let mapBy = changes.mapDesc(newChanges, true);
	            ranges.push(result.range.map(mapBy));
	            changes = changes.compose(newMapped);
	            effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray$1(result.effects), mapBy));
	        }
	        return {
	            changes,
	            selection: EditorSelection.create(ranges, sel.mainIndex),
	            effects
	        };
	    }
	    /**
	    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
	    description, taking the state's document length and line
	    separator into account.
	    */
	    changes(spec = []) {
	        if (spec instanceof ChangeSet)
	            return spec;
	        return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
	    }
	    /**
	    Using the state's [line
	    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
	    [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
	    */
	    toText(string) {
	        return Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
	    }
	    /**
	    Return the given range of the document as a string.
	    */
	    sliceDoc(from = 0, to = this.doc.length) {
	        return this.doc.sliceString(from, to, this.lineBreak);
	    }
	    /**
	    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
	    */
	    facet(facet) {
	        let addr = this.config.address[facet.id];
	        if (addr == null)
	            return facet.default;
	        ensureAddr(this, addr);
	        return getAddr(this, addr);
	    }
	    /**
	    Convert this state to a JSON-serializable object. When custom
	    fields should be serialized, you can pass them in as an object
	    mapping property names (in the resulting object, which should
	    not use `doc` or `selection`) to fields.
	    */
	    toJSON(fields) {
	        let result = {
	            doc: this.sliceDoc(),
	            selection: this.selection.toJSON()
	        };
	        if (fields)
	            for (let prop in fields) {
	                let value = fields[prop];
	                if (value instanceof StateField)
	                    result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
	            }
	        return result;
	    }
	    /**
	    Deserialize a state from its JSON representation. When custom
	    fields should be deserialized, pass the same object you passed
	    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
	    third argument.
	    */
	    static fromJSON(json, config = {}, fields) {
	        if (!json || typeof json.doc != "string")
	            throw new RangeError("Invalid JSON representation for EditorState");
	        let fieldInit = [];
	        if (fields)
	            for (let prop in fields) {
	                let field = fields[prop], value = json[prop];
	                fieldInit.push(field.init(state => field.spec.fromJSON(value, state)));
	            }
	        return EditorState.create({
	            doc: json.doc,
	            selection: EditorSelection.fromJSON(json.selection),
	            extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
	        });
	    }
	    /**
	    Create a new state. You'll usually only need this when
	    initializing an editor—updated states are created by applying
	    transactions.
	    */
	    static create(config = {}) {
	        let configuration = Configuration.resolve(config.extensions || [], new Map);
	        let doc = config.doc instanceof Text ? config.doc
	            : Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
	        let selection = !config.selection ? EditorSelection.single(0)
	            : config.selection instanceof EditorSelection ? config.selection
	                : EditorSelection.single(config.selection.anchor, config.selection.head);
	        checkSelection(selection, doc.length);
	        if (!configuration.staticFacet(allowMultipleSelections))
	            selection = selection.asSingle();
	        return new EditorState(configuration, doc, selection);
	    }
	    /**
	    The size (in columns) of a tab in the document, determined by
	    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
	    */
	    get tabSize() { return this.facet(EditorState.tabSize); }
	    /**
	    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
	    string for this state.
	    */
	    get lineBreak() { return this.facet(EditorState.lineSeparator) || "\n"; }
	    /**
	    Returns true when the editor is
	    [configured](https://codemirror.net/6/docs/ref/#state.EditorState^readOnly) to be read-only.
	    */
	    get readOnly() { return this.facet(readOnly); }
	    /**
	    Look up a translation for the given phrase (via the
	    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
	    original string if no translation is found.
	    */
	    phrase(phrase) {
	        for (let map of this.facet(EditorState.phrases))
	            if (Object.prototype.hasOwnProperty.call(map, phrase))
	                return map[phrase];
	        return phrase;
	    }
	    /**
	    Find the values for a given language data field, provided by the
	    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
	    */
	    languageDataAt(name, pos, side = -1) {
	        let values = [];
	        for (let provider of this.facet(languageData)) {
	            for (let result of provider(this, pos, side)) {
	                if (Object.prototype.hasOwnProperty.call(result, name))
	                    values.push(result[name]);
	            }
	        }
	        return values;
	    }
	    /**
	    Return a function that can categorize strings (expected to
	    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
	    into one of:
	    
	     - Word (contains an alphanumeric character or a character
	       explicitly listed in the local language's `"wordChars"`
	       language data, which should be a string)
	     - Space (contains only whitespace)
	     - Other (anything else)
	    */
	    charCategorizer(at) {
	        return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
	    }
	    /**
	    Find the word at the given position, meaning the range
	    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
	    around it. If no word characters are adjacent to the position,
	    this returns null.
	    */
	    wordAt(pos) {
	        let { text, from, length } = this.doc.lineAt(pos);
	        let cat = this.charCategorizer(pos);
	        let start = pos - from, end = pos - from;
	        while (start > 0) {
	            let prev = findClusterBreak(text, start, false);
	            if (cat(text.slice(prev, start)) != CharCategory.Word)
	                break;
	            start = prev;
	        }
	        while (end < length) {
	            let next = findClusterBreak(text, end);
	            if (cat(text.slice(end, next)) != CharCategory.Word)
	                break;
	            end = next;
	        }
	        return start == end ? null : EditorSelection.range(start + from, end + from);
	    }
	}
	/**
	A facet that, when enabled, causes the editor to allow multiple
	ranges to be selected. Be careful though, because by default the
	editor relies on the native DOM selection, which cannot handle
	multiple selections. An extension like
	[`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
	secondary selections visible to the user.
	*/
	EditorState.allowMultipleSelections = allowMultipleSelections;
	/**
	Configures the tab size to use in this state. The first
	(highest-precedence) value of the facet is used. If no value is
	given, this defaults to 4.
	*/
	EditorState.tabSize = /*@__PURE__*/Facet.define({
	    combine: values => values.length ? values[0] : 4
	});
	/**
	The line separator to use. By default, any of `"\n"`, `"\r\n"`
	and `"\r"` is treated as a separator when splitting lines, and
	lines are joined with `"\n"`.

	When you configure a value here, only that precise separator
	will be used, allowing you to round-trip documents through the
	editor without normalizing line separators.
	*/
	EditorState.lineSeparator = lineSeparator;
	/**
	This facet controls the value of the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) getter, which is
	consulted by commands and extensions that implement editing
	functionality to determine whether they should apply. It
	defaults to false, but when its highest-precedence value is
	`true`, such functionality disables itself.

	Not to be confused with
	[`EditorView.editable`](https://codemirror.net/6/docs/ref/#view.EditorView^editable), which
	controls whether the editor's DOM is set to be editable (and
	thus focusable).
	*/
	EditorState.readOnly = readOnly;
	/**
	Registers translation phrases. The
	[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
	all objects registered with this facet to find translations for
	its argument.
	*/
	EditorState.phrases = /*@__PURE__*/Facet.define();
	/**
	A facet used to register [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
	*/
	EditorState.languageData = languageData;
	/**
	Facet used to register change filters, which are called for each
	transaction (unless explicitly
	[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
	part of the transaction's changes.

	Such a function can return `true` to indicate that it doesn't
	want to do anything, `false` to completely stop the changes in
	the transaction, or a set of ranges in which changes should be
	suppressed. Such ranges are represented as an array of numbers,
	with each pair of two number indicating the start and end of a
	range. So for example `[10, 20, 100, 110]` suppresses changes
	between 10 and 20, and between 100 and 110.
	*/
	EditorState.changeFilter = changeFilter;
	/**
	Facet used to register a hook that gets a chance to update or
	replace transaction specs before they are applied. This will
	only be applied for transactions that don't have
	[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
	can either return a single transaction spec (possibly the input
	transaction), or an array of specs (which will be combined in
	the same way as the arguments to
	[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

	When possible, it is recommended to avoid accessing
	[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
	since it will force creation of a state that will then be
	discarded again, if the transaction is actually filtered.

	(This functionality should be used with care. Indiscriminately
	modifying transaction is likely to break something or degrade
	the user experience.)
	*/
	EditorState.transactionFilter = transactionFilter;
	/**
	This is a more limited form of
	[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
	which can only add
	[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
	[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
	of filter runs even the transaction has disabled regular
	[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
	for effects that don't need to touch the changes or selection,
	but do want to process every transaction.

	Extenders run _after_ filters, when both are applied.
	*/
	EditorState.transactionExtender = transactionExtender;
	Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

	/**
	Utility function for combining behaviors to fill in a config
	object from an array of provided configs. Will, by default, error
	when a field gets two values that aren't `===`-equal, but you can
	provide combine functions per field to do something else.
	*/
	function combineConfig(configs, defaults, // Should hold only the optional properties of Config, but I haven't managed to express that
	combine = {}) {
	    let result = {};
	    for (let config of configs)
	        for (let key of Object.keys(config)) {
	            let value = config[key], current = result[key];
	            if (current === undefined)
	                result[key] = value;
	            else if (current === value || value === undefined) ; // No conflict
	            else if (Object.hasOwnProperty.call(combine, key))
	                result[key] = combine[key](current, value);
	            else
	                throw new Error("Config merge conflict for field " + key);
	        }
	    for (let key in defaults)
	        if (result[key] === undefined)
	            result[key] = defaults[key];
	    return result;
	}

	const C = "\u037c";
	const COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol.for(C);
	const SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
	const top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

	// :: - Style modules encapsulate a set of CSS rules defined from
	// JavaScript. Their definitions are only available in a given DOM
	// root after it has been _mounted_ there with `StyleModule.mount`.
	//
	// Style modules should be created once and stored somewhere, as
	// opposed to re-creating them every time you need them. The amount of
	// CSS rules generated for a given DOM root is bounded by the amount
	// of style modules that were used. So to avoid leaking rules, don't
	// create these dynamically, but treat them as one-time allocations.
	class StyleModule {
	  // :: (Object<Style>, ?{finish: ?(string) → string})
	  // Create a style module from the given spec.
	  //
	  // When `finish` is given, it is called on regular (non-`@`)
	  // selectors (after `&` expansion) to compute the final selector.
	  constructor(spec, options) {
	    this.rules = [];
	    let {finish} = options || {};

	    function splitSelector(selector) {
	      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/)
	    }

	    function render(selectors, spec, target, isKeyframes) {
	      let local = [], isAt = /^@(\w+)\b/.exec(selectors[0]), keyframes = isAt && isAt[1] == "keyframes";
	      if (isAt && spec == null) return target.push(selectors[0] + ";")
	      for (let prop in spec) {
	        let value = spec[prop];
	        if (/&/.test(prop)) {
	          render(prop.split(/,\s*/).map(part => selectors.map(sel => part.replace(/&/, sel))).reduce((a, b) => a.concat(b)),
	                 value, target);
	        } else if (value && typeof value == "object") {
	          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.")
	          render(splitSelector(prop), value, local, keyframes);
	        } else if (value != null) {
	          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, l => "-" + l.toLowerCase()) + ": " + value + ";");
	        }
	      }
	      if (local.length || keyframes) {
	        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") +
	                    " {" + local.join(" ") + "}");
	      }
	    }

	    for (let prop in spec) render(splitSelector(prop), spec[prop], this.rules);
	  }

	  // :: () → string
	  // Returns a string containing the module's CSS rules.
	  getRules() { return this.rules.join("\n") }

	  // :: () → string
	  // Generate a new unique CSS class name.
	  static newName() {
	    let id = top[COUNT] || 1;
	    top[COUNT] = id + 1;
	    return C + id.toString(36)
	  }

	  // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
	  //
	  // Mount the given set of modules in the given DOM root, which ensures
	  // that the CSS rules defined by the module are available in that
	  // context.
	  //
	  // Rules are only added to the document once per root.
	  //
	  // Rule order will follow the order of the modules, so that rules from
	  // modules later in the array take precedence of those from earlier
	  // modules. If you call this function multiple times for the same root
	  // in a way that changes the order of already mounted modules, the old
	  // order will be changed.
	  static mount(root, modules) {
	    (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
	  }
	}

	let adoptedSet = null;

	class StyleSet {
	  constructor(root) {
	    if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
	      if (adoptedSet) {
	        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
	        return root[SET] = adoptedSet
	      }
	      this.sheet = new CSSStyleSheet;
	      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
	      adoptedSet = this;
	    } else {
	      this.styleTag = (root.ownerDocument || root).createElement("style");
	      let target = root.head || root;
	      target.insertBefore(this.styleTag, target.firstChild);
	    }
	    this.modules = [];
	    root[SET] = this;
	  }

	  mount(modules) {
	    let sheet = this.sheet;
	    let pos = 0 /* Current rule offset */, j = 0; /* Index into this.modules */
	    for (let i = 0; i < modules.length; i++) {
	      let mod = modules[i], index = this.modules.indexOf(mod);
	      if (index < j && index > -1) { // Ordering conflict
	        this.modules.splice(index, 1);
	        j--;
	        index = -1;
	      }
	      if (index == -1) {
	        this.modules.splice(j++, 0, mod);
	        if (sheet) for (let k = 0; k < mod.rules.length; k++)
	          sheet.insertRule(mod.rules[k], pos++);
	      } else {
	        while (j < index) pos += this.modules[j++].rules.length;
	        pos += mod.rules.length;
	        j++;
	      }
	    }

	    if (!sheet) {
	      let text = "";
	      for (let i = 0; i < this.modules.length; i++)
	        text += this.modules[i].getRules() + "\n";
	      this.styleTag.textContent = text;
	    }
	  }
	}

	// Style::Object<union<Style,string>>
	//
	// A style is an object that, in the simple case, maps CSS property
	// names to strings holding their values, as in `{color: "red",
	// fontWeight: "bold"}`. The property names can be given in
	// camel-case—the library will insert a dash before capital letters
	// when converting them to CSS.
	//
	// If you include an underscore in a property name, it and everything
	// after it will be removed from the output, which can be useful when
	// providing a property multiple times, for browser compatibility
	// reasons.
	//
	// A property in a style object can also be a sub-selector, which
	// extends the current context to add a pseudo-selector or a child
	// selector. Such a property should contain a `&` character, which
	// will be replaced by the current selector. For example `{"&:before":
	// {content: '"hi"'}}`. Sub-selectors and regular properties can
	// freely be mixed in a given object. Any property containing a `&` is
	// assumed to be a sub-selector.
	//
	// Finally, a property can specify an @-block to be wrapped around the
	// styles defined inside the object that's the property's value. For
	// example to create a media query you can do `{"@media screen and
	// (min-width: 400px)": {...}}`.

	/**
	Each range is associated with a value, which must inherit from
	this class.
	*/
	class RangeValue {
	    /**
	    Compare this value with another value. The default
	    implementation compares by identity.
	    */
	    eq(other) { return this == other; }
	    /**
	    Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.
	    */
	    range(from, to = from) { return new Range$1(from, to, this); }
	}
	RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
	RangeValue.prototype.point = false;
	RangeValue.prototype.mapMode = MapMode.TrackDel;
	/**
	A range associates a value with a range of positions.
	*/
	class Range$1 {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The range's start position.
	    */
	    from, 
	    /**
	    Its end position.
	    */
	    to, 
	    /**
	    The value associated with this range.
	    */
	    value) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	    }
	}
	function cmpRange(a, b) {
	    return a.from - b.from || a.value.startSide - b.value.startSide;
	}
	class Chunk {
	    constructor(from, to, value, 
	    // Chunks are marked with the largest point that occurs
	    // in them (or -1 for no points), so that scans that are
	    // only interested in points (such as the
	    // heightmap-related logic) can skip range-only chunks.
	    maxPoint) {
	        this.from = from;
	        this.to = to;
	        this.value = value;
	        this.maxPoint = maxPoint;
	    }
	    get length() { return this.to[this.to.length - 1]; }
	    // Find the index of the given position and side. Use the ranges'
	    // `from` pos when `end == false`, `to` when `end == true`.
	    findIndex(pos, side, end, startAt = 0) {
	        let arr = end ? this.to : this.from;
	        for (let lo = startAt, hi = arr.length;;) {
	            if (lo == hi)
	                return lo;
	            let mid = (lo + hi) >> 1;
	            let diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
	            if (mid == lo)
	                return diff >= 0 ? lo : hi;
	            if (diff >= 0)
	                hi = mid;
	            else
	                lo = mid + 1;
	        }
	    }
	    between(offset, from, to, f) {
	        for (let i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++)
	            if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false)
	                return false;
	    }
	    map(offset, changes) {
	        let value = [], from = [], to = [], newPos = -1, maxPoint = -1;
	        for (let i = 0; i < this.value.length; i++) {
	            let val = this.value[i], curFrom = this.from[i] + offset, curTo = this.to[i] + offset, newFrom, newTo;
	            if (curFrom == curTo) {
	                let mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
	                if (mapped == null)
	                    continue;
	                newFrom = newTo = mapped;
	            }
	            else {
	                newFrom = changes.mapPos(curFrom, val.startSide);
	                newTo = changes.mapPos(curTo, val.endSide);
	                if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0)
	                    continue;
	            }
	            if ((newTo - newFrom || val.endSide - val.startSide) < 0)
	                continue;
	            if (newPos < 0)
	                newPos = newFrom;
	            if (val.point)
	                maxPoint = Math.max(maxPoint, newTo - newFrom);
	            value.push(val);
	            from.push(newFrom - newPos);
	            to.push(newTo - newPos);
	        }
	        return { mapped: value.length ? new Chunk(from, to, value, maxPoint) : null, pos: newPos };
	    }
	}
	/**
	A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#rangeset.Range) in a
	way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.map) and
	[update](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.update). This is an immutable data
	structure.
	*/
	class RangeSet {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    chunkPos, 
	    /**
	    @internal
	    */
	    chunk, 
	    /**
	    @internal
	    */
	    nextLayer = RangeSet.empty, 
	    /**
	    @internal
	    */
	    maxPoint) {
	        this.chunkPos = chunkPos;
	        this.chunk = chunk;
	        this.nextLayer = nextLayer;
	        this.maxPoint = maxPoint;
	    }
	    /**
	    @internal
	    */
	    get length() {
	        let last = this.chunk.length - 1;
	        return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
	    }
	    /**
	    The number of ranges in the set.
	    */
	    get size() {
	        if (this.isEmpty)
	            return 0;
	        let size = this.nextLayer.size;
	        for (let chunk of this.chunk)
	            size += chunk.value.length;
	        return size;
	    }
	    /**
	    @internal
	    */
	    chunkEnd(index) {
	        return this.chunkPos[index] + this.chunk[index].length;
	    }
	    /**
	    Update the range set, optionally adding new ranges or filtering
	    out existing ones.
	    
	    (The extra type parameter is just there as a kludge to work
	    around TypeScript variance issues that prevented `RangeSet<X>`
	    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
	    `Y`.)
	    */
	    update(updateSpec) {
	        let { add = [], sort = false, filterFrom = 0, filterTo = this.length } = updateSpec;
	        let filter = updateSpec.filter;
	        if (add.length == 0 && !filter)
	            return this;
	        if (sort)
	            add.slice().sort(cmpRange);
	        if (this.isEmpty)
	            return add.length ? RangeSet.of(add) : this;
	        let cur = new LayerCursor(this, null, -1).goto(0), i = 0, spill = [];
	        let builder = new RangeSetBuilder();
	        while (cur.value || i < add.length) {
	            if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
	                let range = add[i++];
	                if (!builder.addInner(range.from, range.to, range.value))
	                    spill.push(range);
	            }
	            else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length &&
	                (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) &&
	                (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) &&
	                builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
	                cur.nextChunk();
	            }
	            else {
	                if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
	                    if (!builder.addInner(cur.from, cur.to, cur.value))
	                        spill.push(new Range$1(cur.from, cur.to, cur.value));
	                }
	                cur.next();
	            }
	        }
	        return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty
	            : this.nextLayer.update({ add: spill, filter, filterFrom, filterTo }));
	    }
	    /**
	    Map this range set through a set of changes, return the new set.
	    */
	    map(changes) {
	        if (changes.length == 0 || this.isEmpty)
	            return this;
	        let chunks = [], chunkPos = [], maxPoint = -1;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            let touch = changes.touchesRange(start, start + chunk.length);
	            if (touch === false) {
	                maxPoint = Math.max(maxPoint, chunk.maxPoint);
	                chunks.push(chunk);
	                chunkPos.push(changes.mapPos(start));
	            }
	            else if (touch === true) {
	                let { mapped, pos } = chunk.map(start, changes);
	                if (mapped) {
	                    maxPoint = Math.max(maxPoint, mapped.maxPoint);
	                    chunks.push(mapped);
	                    chunkPos.push(pos);
	                }
	            }
	        }
	        let next = this.nextLayer.map(changes);
	        return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
	    }
	    /**
	    Iterate over the ranges that touch the region `from` to `to`,
	    calling `f` for each. There is no guarantee that the ranges will
	    be reported in any specific order. When the callback returns
	    `false`, iteration stops.
	    */
	    between(from, to, f) {
	        if (this.isEmpty)
	            return;
	        for (let i = 0; i < this.chunk.length; i++) {
	            let start = this.chunkPos[i], chunk = this.chunk[i];
	            if (to >= start && from <= start + chunk.length &&
	                chunk.between(start, from - start, to - start, f) === false)
	                return;
	        }
	        this.nextLayer.between(from, to, f);
	    }
	    /**
	    Iterate over the ranges in this set, in order, including all
	    ranges that end at or after `from`.
	    */
	    iter(from = 0) {
	        return HeapCursor.from([this]).goto(from);
	    }
	    /**
	    @internal
	    */
	    get isEmpty() { return this.nextLayer == this; }
	    /**
	    Iterate over the ranges in a collection of sets, in order,
	    starting from `from`.
	    */
	    static iter(sets, from = 0) {
	        return HeapCursor.from(sets).goto(from);
	    }
	    /**
	    Iterate over two groups of sets, calling methods on `comparator`
	    to notify it of possible differences.
	    */
	    static compare(oldSets, newSets, 
	    /**
	    This indicates how the underlying data changed between these
	    ranges, and is needed to synchronize the iteration. `from` and
	    `to` are coordinates in the _new_ space, after these changes.
	    */
	    textDiff, comparator, 
	    /**
	    Can be used to ignore all non-point ranges, and points below
	    the given size. When -1, all ranges are compared.
	    */
	    minPointSize = -1) {
	        let a = oldSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
	            !set.isEmpty && newSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
	        let b = newSets.filter(set => set.maxPoint >= 500 /* BigPointSize */ ||
	            !set.isEmpty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPointSize);
	        let sharedChunks = findSharedChunks(a, b);
	        let sideA = new SpanCursor(a, sharedChunks, minPointSize);
	        let sideB = new SpanCursor(b, sharedChunks, minPointSize);
	        textDiff.iterGaps((fromA, fromB, length) => compare$1(sideA, fromA, sideB, fromB, length, comparator));
	        if (textDiff.empty && textDiff.length == 0)
	            compare$1(sideA, 0, sideB, 0, 0, comparator);
	    }
	    /**
	    Compare the contents of two groups of range sets, returning true
	    if they are equivalent in the given range.
	    */
	    static eq(oldSets, newSets, from = 0, to) {
	        if (to == null)
	            to = 1000000000 /* Far */;
	        let a = oldSets.filter(set => !set.isEmpty && newSets.indexOf(set) < 0);
	        let b = newSets.filter(set => !set.isEmpty && oldSets.indexOf(set) < 0);
	        if (a.length != b.length)
	            return false;
	        if (!a.length)
	            return true;
	        let sharedChunks = findSharedChunks(a, b);
	        let sideA = new SpanCursor(a, sharedChunks, 0).goto(from), sideB = new SpanCursor(b, sharedChunks, 0).goto(from);
	        for (;;) {
	            if (sideA.to != sideB.to ||
	                !sameValues(sideA.active, sideB.active) ||
	                sideA.point && (!sideB.point || !sideA.point.eq(sideB.point)))
	                return false;
	            if (sideA.to >= to)
	                return true;
	            sideA.next();
	            sideB.next();
	        }
	    }
	    /**
	    Iterate over a group of range sets at the same time, notifying
	    the iterator about the ranges covering every given piece of
	    content. Returns the open count (see
	    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end
	    of the iteration.
	    */
	    static spans(sets, from, to, iterator, 
	    /**
	    When given and greater than -1, only points of at least this
	    size are taken into account.
	    */
	    minPointSize = -1) {
	        let cursor = new SpanCursor(sets, null, minPointSize).goto(from), pos = from;
	        let open = cursor.openStart;
	        for (;;) {
	            let curTo = Math.min(cursor.to, to);
	            if (cursor.point) {
	                iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
	                open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
	            }
	            else if (curTo > pos) {
	                iterator.span(pos, curTo, cursor.active, open);
	                open = cursor.openEnd(curTo);
	            }
	            if (cursor.to > to)
	                break;
	            pos = cursor.to;
	            cursor.next();
	        }
	        return open;
	    }
	    /**
	    Create a range set for the given range or array of ranges. By
	    default, this expects the ranges to be _sorted_ (by start
	    position and, if two start at the same position,
	    `value.startSide`). You can pass `true` as second argument to
	    cause the method to sort them.
	    */
	    static of(ranges, sort = false) {
	        let build = new RangeSetBuilder();
	        for (let range of ranges instanceof Range$1 ? [ranges] : sort ? lazySort(ranges) : ranges)
	            build.add(range.from, range.to, range.value);
	        return build.finish();
	    }
	}
	/**
	The empty set of ranges.
	*/
	RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
	function lazySort(ranges) {
	    if (ranges.length > 1)
	        for (let prev = ranges[0], i = 1; i < ranges.length; i++) {
	            let cur = ranges[i];
	            if (cmpRange(prev, cur) > 0)
	                return ranges.slice().sort(cmpRange);
	            prev = cur;
	        }
	    return ranges;
	}
	RangeSet.empty.nextLayer = RangeSet.empty;
	/**
	A range set builder is a data structure that helps build up a
	[range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) directly, without first allocating
	an array of [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range) objects.
	*/
	class RangeSetBuilder {
	    /**
	    Create an empty builder.
	    */
	    constructor() {
	        this.chunks = [];
	        this.chunkPos = [];
	        this.chunkStart = -1;
	        this.last = null;
	        this.lastFrom = -1000000000 /* Far */;
	        this.lastTo = -1000000000 /* Far */;
	        this.from = [];
	        this.to = [];
	        this.value = [];
	        this.maxPoint = -1;
	        this.setMaxPoint = -1;
	        this.nextLayer = null;
	    }
	    finishChunk(newArrays) {
	        this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
	        this.chunkPos.push(this.chunkStart);
	        this.chunkStart = -1;
	        this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
	        this.maxPoint = -1;
	        if (newArrays) {
	            this.from = [];
	            this.to = [];
	            this.value = [];
	        }
	    }
	    /**
	    Add a range. Ranges should be added in sorted (by `from` and
	    `value.startSide`) order.
	    */
	    add(from, to, value) {
	        if (!this.addInner(from, to, value))
	            (this.nextLayer || (this.nextLayer = new RangeSetBuilder)).add(from, to, value);
	    }
	    /**
	    @internal
	    */
	    addInner(from, to, value) {
	        let diff = from - this.lastTo || value.startSide - this.last.endSide;
	        if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0)
	            throw new Error("Ranges must be added sorted by `from` position and `startSide`");
	        if (diff < 0)
	            return false;
	        if (this.from.length == 250 /* ChunkSize */)
	            this.finishChunk(true);
	        if (this.chunkStart < 0)
	            this.chunkStart = from;
	        this.from.push(from - this.chunkStart);
	        this.to.push(to - this.chunkStart);
	        this.last = value;
	        this.lastFrom = from;
	        this.lastTo = to;
	        this.value.push(value);
	        if (value.point)
	            this.maxPoint = Math.max(this.maxPoint, to - from);
	        return true;
	    }
	    /**
	    @internal
	    */
	    addChunk(from, chunk) {
	        if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0)
	            return false;
	        if (this.from.length)
	            this.finishChunk(true);
	        this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
	        this.chunks.push(chunk);
	        this.chunkPos.push(from);
	        let last = chunk.value.length - 1;
	        this.last = chunk.value[last];
	        this.lastFrom = chunk.from[last] + from;
	        this.lastTo = chunk.to[last] + from;
	        return true;
	    }
	    /**
	    Finish the range set. Returns the new set. The builder can't be
	    used anymore after this has been called.
	    */
	    finish() { return this.finishInner(RangeSet.empty); }
	    /**
	    @internal
	    */
	    finishInner(next) {
	        if (this.from.length)
	            this.finishChunk(false);
	        if (this.chunks.length == 0)
	            return next;
	        let result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
	        this.from = null; // Make sure further `add` calls produce errors
	        return result;
	    }
	}
	function findSharedChunks(a, b) {
	    let inA = new Map();
	    for (let set of a)
	        for (let i = 0; i < set.chunk.length; i++)
	            if (set.chunk[i].maxPoint < 500 /* BigPointSize */)
	                inA.set(set.chunk[i], set.chunkPos[i]);
	    let shared = new Set();
	    for (let set of b)
	        for (let i = 0; i < set.chunk.length; i++)
	            if (inA.get(set.chunk[i]) == set.chunkPos[i])
	                shared.add(set.chunk[i]);
	    return shared;
	}
	class LayerCursor {
	    constructor(layer, skip, minPoint, rank = 0) {
	        this.layer = layer;
	        this.skip = skip;
	        this.minPoint = minPoint;
	        this.rank = rank;
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    get endSide() { return this.value ? this.value.endSide : 0; }
	    goto(pos, side = -1000000000 /* Far */) {
	        this.chunkIndex = this.rangeIndex = 0;
	        this.gotoInner(pos, side, false);
	        return this;
	    }
	    gotoInner(pos, side, forward) {
	        while (this.chunkIndex < this.layer.chunk.length) {
	            let next = this.layer.chunk[this.chunkIndex];
	            if (!(this.skip && this.skip.has(next) ||
	                this.layer.chunkEnd(this.chunkIndex) < pos ||
	                next.maxPoint < this.minPoint))
	                break;
	            this.chunkIndex++;
	            forward = false;
	        }
	        if (this.chunkIndex < this.layer.chunk.length) {
	            let rangeIndex = this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
	            if (!forward || this.rangeIndex < rangeIndex)
	                this.setRangeIndex(rangeIndex);
	        }
	        this.next();
	    }
	    forward(pos, side) {
	        if ((this.to - pos || this.endSide - side) < 0)
	            this.gotoInner(pos, side, true);
	    }
	    next() {
	        for (;;) {
	            if (this.chunkIndex == this.layer.chunk.length) {
	                this.from = this.to = 1000000000 /* Far */;
	                this.value = null;
	                break;
	            }
	            else {
	                let chunkPos = this.layer.chunkPos[this.chunkIndex], chunk = this.layer.chunk[this.chunkIndex];
	                let from = chunkPos + chunk.from[this.rangeIndex];
	                this.from = from;
	                this.to = chunkPos + chunk.to[this.rangeIndex];
	                this.value = chunk.value[this.rangeIndex];
	                this.setRangeIndex(this.rangeIndex + 1);
	                if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint)
	                    break;
	            }
	        }
	    }
	    setRangeIndex(index) {
	        if (index == this.layer.chunk[this.chunkIndex].value.length) {
	            this.chunkIndex++;
	            if (this.skip) {
	                while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex]))
	                    this.chunkIndex++;
	            }
	            this.rangeIndex = 0;
	        }
	        else {
	            this.rangeIndex = index;
	        }
	    }
	    nextChunk() {
	        this.chunkIndex++;
	        this.rangeIndex = 0;
	        this.next();
	    }
	    compare(other) {
	        return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
	    }
	}
	class HeapCursor {
	    constructor(heap) {
	        this.heap = heap;
	    }
	    static from(sets, skip = null, minPoint = -1) {
	        let heap = [];
	        for (let i = 0; i < sets.length; i++) {
	            for (let cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
	                if (cur.maxPoint >= minPoint)
	                    heap.push(new LayerCursor(cur, skip, minPoint, i));
	            }
	        }
	        return heap.length == 1 ? heap[0] : new HeapCursor(heap);
	    }
	    get startSide() { return this.value ? this.value.startSide : 0; }
	    goto(pos, side = -1000000000 /* Far */) {
	        for (let cur of this.heap)
	            cur.goto(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        for (let cur of this.heap)
	            cur.forward(pos, side);
	        for (let i = this.heap.length >> 1; i >= 0; i--)
	            heapBubble(this.heap, i);
	        if ((this.to - pos || this.value.endSide - side) < 0)
	            this.next();
	    }
	    next() {
	        if (this.heap.length == 0) {
	            this.from = this.to = 1000000000 /* Far */;
	            this.value = null;
	            this.rank = -1;
	        }
	        else {
	            let top = this.heap[0];
	            this.from = top.from;
	            this.to = top.to;
	            this.value = top.value;
	            this.rank = top.rank;
	            if (top.value)
	                top.next();
	            heapBubble(this.heap, 0);
	        }
	    }
	}
	function heapBubble(heap, index) {
	    for (let cur = heap[index];;) {
	        let childIndex = (index << 1) + 1;
	        if (childIndex >= heap.length)
	            break;
	        let child = heap[childIndex];
	        if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
	            child = heap[childIndex + 1];
	            childIndex++;
	        }
	        if (cur.compare(child) < 0)
	            break;
	        heap[childIndex] = cur;
	        heap[index] = child;
	        index = childIndex;
	    }
	}
	class SpanCursor {
	    constructor(sets, skip, minPoint) {
	        this.minPoint = minPoint;
	        this.active = [];
	        this.activeTo = [];
	        this.activeRank = [];
	        this.minActive = -1;
	        // A currently active point range, if any
	        this.point = null;
	        this.pointFrom = 0;
	        this.pointRank = 0;
	        this.to = -1000000000 /* Far */;
	        this.endSide = 0;
	        this.openStart = -1;
	        this.cursor = HeapCursor.from(sets, skip, minPoint);
	    }
	    goto(pos, side = -1000000000 /* Far */) {
	        this.cursor.goto(pos, side);
	        this.active.length = this.activeTo.length = this.activeRank.length = 0;
	        this.minActive = -1;
	        this.to = pos;
	        this.endSide = side;
	        this.openStart = -1;
	        this.next();
	        return this;
	    }
	    forward(pos, side) {
	        while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0)
	            this.removeActive(this.minActive);
	        this.cursor.forward(pos, side);
	    }
	    removeActive(index) {
	        remove(this.active, index);
	        remove(this.activeTo, index);
	        remove(this.activeRank, index);
	        this.minActive = findMinIndex(this.active, this.activeTo);
	    }
	    addActive(trackOpen) {
	        let i = 0, { value, to, rank } = this.cursor;
	        while (i < this.activeRank.length && this.activeRank[i] <= rank)
	            i++;
	        insert(this.active, i, value);
	        insert(this.activeTo, i, to);
	        insert(this.activeRank, i, rank);
	        if (trackOpen)
	            insert(trackOpen, i, this.cursor.from);
	        this.minActive = findMinIndex(this.active, this.activeTo);
	    }
	    // After calling this, if `this.point` != null, the next range is a
	    // point. Otherwise, it's a regular range, covered by `this.active`.
	    next() {
	        let from = this.to, wasPoint = this.point;
	        this.point = null;
	        let trackOpen = this.openStart < 0 ? [] : null, trackExtra = 0;
	        for (;;) {
	            let a = this.minActive;
	            if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
	                if (this.activeTo[a] > from) {
	                    this.to = this.activeTo[a];
	                    this.endSide = this.active[a].endSide;
	                    break;
	                }
	                this.removeActive(a);
	                if (trackOpen)
	                    remove(trackOpen, a);
	            }
	            else if (!this.cursor.value) {
	                this.to = this.endSide = 1000000000 /* Far */;
	                break;
	            }
	            else if (this.cursor.from > from) {
	                this.to = this.cursor.from;
	                this.endSide = this.cursor.startSide;
	                break;
	            }
	            else {
	                let nextVal = this.cursor.value;
	                if (!nextVal.point) { // Opening a range
	                    this.addActive(trackOpen);
	                    this.cursor.next();
	                }
	                else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to && nextVal.endSide == this.endSide) {
	                    // Ignore any non-empty points that end precisely at the end of the prev point
	                    this.cursor.next();
	                }
	                else { // New point
	                    this.point = nextVal;
	                    this.pointFrom = this.cursor.from;
	                    this.pointRank = this.cursor.rank;
	                    this.to = this.cursor.to;
	                    this.endSide = nextVal.endSide;
	                    if (this.cursor.from < from)
	                        trackExtra = 1;
	                    this.cursor.next();
	                    if (this.to > from)
	                        this.forward(this.to, this.endSide);
	                    break;
	                }
	            }
	        }
	        if (trackOpen) {
	            let openStart = 0;
	            while (openStart < trackOpen.length && trackOpen[openStart] < from)
	                openStart++;
	            this.openStart = openStart + trackExtra;
	        }
	    }
	    activeForPoint(to) {
	        if (!this.active.length)
	            return this.active;
	        let active = [];
	        for (let i = this.active.length - 1; i >= 0; i--) {
	            if (this.activeRank[i] < this.pointRank)
	                break;
	            if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide)
	                active.push(this.active[i]);
	        }
	        return active.reverse();
	    }
	    openEnd(to) {
	        let open = 0;
	        for (let i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--)
	            open++;
	        return open;
	    }
	}
	function compare$1(a, startA, b, startB, length, comparator) {
	    a.goto(startA);
	    b.goto(startB);
	    let endB = startB + length;
	    let pos = startB, dPos = startB - startA;
	    for (;;) {
	        let diff = (a.to + dPos) - b.to || a.endSide - b.endSide;
	        let end = diff < 0 ? a.to + dPos : b.to, clipEnd = Math.min(end, endB);
	        if (a.point || b.point) {
	            if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) &&
	                sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to))))
	                comparator.comparePoint(pos, clipEnd, a.point, b.point);
	        }
	        else {
	            if (clipEnd > pos && !sameValues(a.active, b.active))
	                comparator.compareRange(pos, clipEnd, a.active, b.active);
	        }
	        if (end > endB)
	            break;
	        pos = end;
	        if (diff <= 0)
	            a.next();
	        if (diff >= 0)
	            b.next();
	    }
	}
	function sameValues(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (a[i] != b[i] && !a[i].eq(b[i]))
	            return false;
	    return true;
	}
	function remove(array, index) {
	    for (let i = index, e = array.length - 1; i < e; i++)
	        array[i] = array[i + 1];
	    array.pop();
	}
	function insert(array, index, value) {
	    for (let i = array.length - 1; i >= index; i--)
	        array[i + 1] = array[i];
	    array[index] = value;
	}
	function findMinIndex(value, array) {
	    let found = -1, foundPos = 1000000000 /* Far */;
	    for (let i = 0; i < array.length; i++)
	        if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
	            found = i;
	            foundPos = array[i];
	        }
	    return found;
	}

	var base = {
	  8: "Backspace",
	  9: "Tab",
	  10: "Enter",
	  12: "NumLock",
	  13: "Enter",
	  16: "Shift",
	  17: "Control",
	  18: "Alt",
	  20: "CapsLock",
	  27: "Escape",
	  32: " ",
	  33: "PageUp",
	  34: "PageDown",
	  35: "End",
	  36: "Home",
	  37: "ArrowLeft",
	  38: "ArrowUp",
	  39: "ArrowRight",
	  40: "ArrowDown",
	  44: "PrintScreen",
	  45: "Insert",
	  46: "Delete",
	  59: ";",
	  61: "=",
	  91: "Meta",
	  92: "Meta",
	  106: "*",
	  107: "+",
	  108: ",",
	  109: "-",
	  110: ".",
	  111: "/",
	  144: "NumLock",
	  145: "ScrollLock",
	  160: "Shift",
	  161: "Shift",
	  162: "Control",
	  163: "Control",
	  164: "Alt",
	  165: "Alt",
	  173: "-",
	  186: ";",
	  187: "=",
	  188: ",",
	  189: "-",
	  190: ".",
	  191: "/",
	  192: "`",
	  219: "[",
	  220: "\\",
	  221: "]",
	  222: "'",
	  229: "q"
	};

	var shift$1 = {
	  48: ")",
	  49: "!",
	  50: "@",
	  51: "#",
	  52: "$",
	  53: "%",
	  54: "^",
	  55: "&",
	  56: "*",
	  57: "(",
	  59: ":",
	  61: "+",
	  173: "_",
	  186: ":",
	  187: "+",
	  188: "<",
	  189: "_",
	  190: ">",
	  191: "?",
	  192: "~",
	  219: "{",
	  220: "|",
	  221: "}",
	  222: "\"",
	  229: "Q"
	};

	var chrome$1 = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
	var safari$1 = typeof navigator != "undefined" && /Apple Computer/.test(navigator.vendor);
	var gecko$1 = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
	var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
	var ie$1 = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
	var brokenModifierNames = chrome$1 && (mac || +chrome$1[1] < 57) || gecko$1 && mac;

	// Fill in the digit keys
	for (var i = 0; i < 10; i++) base[48 + i] = base[96 + i] = String(i);

	// The function keys
	for (var i = 1; i <= 24; i++) base[i + 111] = "F" + i;

	// And the alphabetic keys
	for (var i = 65; i <= 90; i++) {
	  base[i] = String.fromCharCode(i + 32);
	  shift$1[i] = String.fromCharCode(i);
	}

	// For each code that doesn't have a shift-equivalent, copy the base name
	for (var code in base) if (!shift$1.hasOwnProperty(code)) shift$1[code] = base[code];

	function keyName(event) {
	  // Don't trust event.key in Chrome when there are modifiers until
	  // they fix https://bugs.chromium.org/p/chromium/issues/detail?id=633838
	  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
	    (safari$1 || ie$1) && event.shiftKey && event.key && event.key.length == 1;
	  var name = (!ignoreKey && event.key) ||
	    (event.shiftKey ? shift$1 : base)[event.keyCode] ||
	    event.key || "Unidentified";
	  // Edge sometimes produces wrong names (Issue #3)
	  if (name == "Esc") name = "Escape";
	  if (name == "Del") name = "Delete";
	  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
	  if (name == "Left") name = "ArrowLeft";
	  if (name == "Up") name = "ArrowUp";
	  if (name == "Right") name = "ArrowRight";
	  if (name == "Down") name = "ArrowDown";
	  return name
	}

	function getSelection(root) {
	    let target;
	    // Browsers differ on whether shadow roots have a getSelection
	    // method. If it exists, use that, otherwise, call it on the
	    // document.
	    if (root.nodeType == 11) { // Shadow root
	        target = root.getSelection ? root : root.ownerDocument;
	    }
	    else {
	        target = root;
	    }
	    return target.getSelection();
	}
	function contains(dom, node) {
	    return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
	}
	function deepActiveElement() {
	    let elt = document.activeElement;
	    while (elt && elt.shadowRoot)
	        elt = elt.shadowRoot.activeElement;
	    return elt;
	}
	function hasSelection(dom, selection) {
	    if (!selection.anchorNode)
	        return false;
	    try {
	        // Firefox will raise 'permission denied' errors when accessing
	        // properties of `sel.anchorNode` when it's in a generated CSS
	        // element.
	        return contains(dom, selection.anchorNode);
	    }
	    catch (_) {
	        return false;
	    }
	}
	function clientRectsFor(dom) {
	    if (dom.nodeType == 3)
	        return textRange(dom, 0, dom.nodeValue.length).getClientRects();
	    else if (dom.nodeType == 1)
	        return dom.getClientRects();
	    else
	        return [];
	}
	// Scans forward and backward through DOM positions equivalent to the
	// given one to see if the two are in the same place (i.e. after a
	// text node vs at the end of that text node)
	function isEquivalentPosition(node, off, targetNode, targetOff) {
	    return targetNode ? (scanFor(node, off, targetNode, targetOff, -1) ||
	        scanFor(node, off, targetNode, targetOff, 1)) : false;
	}
	function domIndex(node) {
	    for (var index = 0;; index++) {
	        node = node.previousSibling;
	        if (!node)
	            return index;
	    }
	}
	function scanFor(node, off, targetNode, targetOff, dir) {
	    for (;;) {
	        if (node == targetNode && off == targetOff)
	            return true;
	        if (off == (dir < 0 ? 0 : maxOffset(node))) {
	            if (node.nodeName == "DIV")
	                return false;
	            let parent = node.parentNode;
	            if (!parent || parent.nodeType != 1)
	                return false;
	            off = domIndex(node) + (dir < 0 ? 0 : 1);
	            node = parent;
	        }
	        else if (node.nodeType == 1) {
	            node = node.childNodes[off + (dir < 0 ? -1 : 0)];
	            if (node.nodeType == 1 && node.contentEditable == "false")
	                return false;
	            off = dir < 0 ? maxOffset(node) : 0;
	        }
	        else {
	            return false;
	        }
	    }
	}
	function maxOffset(node) {
	    return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
	}
	const Rect0 = { left: 0, right: 0, top: 0, bottom: 0 };
	function flattenRect(rect, left) {
	    let x = left ? rect.left : rect.right;
	    return { left: x, right: x, top: rect.top, bottom: rect.bottom };
	}
	function windowRect(win) {
	    return { left: 0, right: win.innerWidth,
	        top: 0, bottom: win.innerHeight };
	}
	const ScrollSpace = 5;
	function scrollRectIntoView(dom, rect, side) {
	    let doc = dom.ownerDocument, win = doc.defaultView;
	    for (let cur = dom.parentNode; cur;) {
	        if (cur.nodeType == 1) { // Element
	            let bounding, top = cur == doc.body;
	            if (top) {
	                bounding = windowRect(win);
	            }
	            else {
	                if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
	                    cur = cur.parentNode;
	                    continue;
	                }
	                let rect = cur.getBoundingClientRect();
	                // Make sure scrollbar width isn't included in the rectangle
	                bounding = { left: rect.left, right: rect.left + cur.clientWidth,
	                    top: rect.top, bottom: rect.top + cur.clientHeight };
	            }
	            let moveX = 0, moveY = 0;
	            if (rect.top < bounding.top) {
	                moveY = -(bounding.top - rect.top + ScrollSpace);
	                if (side > 0 && rect.bottom > bounding.bottom + moveY)
	                    moveY = rect.bottom - bounding.bottom + moveY + ScrollSpace;
	            }
	            else if (rect.bottom > bounding.bottom) {
	                moveY = rect.bottom - bounding.bottom + ScrollSpace;
	                if (side < 0 && (rect.top - moveY) < bounding.top)
	                    moveY = -(bounding.top + moveY - rect.top + ScrollSpace);
	            }
	            if (rect.left < bounding.left) {
	                moveX = -(bounding.left - rect.left + ScrollSpace);
	                if (side > 0 && rect.right > bounding.right + moveX)
	                    moveX = rect.right - bounding.right + moveX + ScrollSpace;
	            }
	            else if (rect.right > bounding.right) {
	                moveX = rect.right - bounding.right + ScrollSpace;
	                if (side < 0 && rect.left < bounding.left + moveX)
	                    moveX = -(bounding.left + moveX - rect.left + ScrollSpace);
	            }
	            if (moveX || moveY) {
	                if (top) {
	                    win.scrollBy(moveX, moveY);
	                }
	                else {
	                    if (moveY) {
	                        let start = cur.scrollTop;
	                        cur.scrollTop += moveY;
	                        moveY = cur.scrollTop - start;
	                    }
	                    if (moveX) {
	                        let start = cur.scrollLeft;
	                        cur.scrollLeft += moveX;
	                        moveX = cur.scrollLeft - start;
	                    }
	                    rect = { left: rect.left - moveX, top: rect.top - moveY,
	                        right: rect.right - moveX, bottom: rect.bottom - moveY };
	                }
	            }
	            if (top)
	                break;
	            cur = cur.assignedSlot || cur.parentNode;
	        }
	        else if (cur.nodeType == 11) { // A shadow root
	            cur = cur.host;
	        }
	        else {
	            break;
	        }
	    }
	}
	class DOMSelection {
	    constructor() {
	        this.anchorNode = null;
	        this.anchorOffset = 0;
	        this.focusNode = null;
	        this.focusOffset = 0;
	    }
	    eq(domSel) {
	        return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset &&
	            this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
	    }
	    set(domSel) {
	        this.anchorNode = domSel.anchorNode;
	        this.anchorOffset = domSel.anchorOffset;
	        this.focusNode = domSel.focusNode;
	        this.focusOffset = domSel.focusOffset;
	    }
	}
	let preventScrollSupported = null;
	// Feature-detects support for .focus({preventScroll: true}), and uses
	// a fallback kludge when not supported.
	function focusPreventScroll(dom) {
	    if (dom.setActive)
	        return dom.setActive(); // in IE
	    if (preventScrollSupported)
	        return dom.focus(preventScrollSupported);
	    let stack = [];
	    for (let cur = dom; cur; cur = cur.parentNode) {
	        stack.push(cur, cur.scrollTop, cur.scrollLeft);
	        if (cur == cur.ownerDocument)
	            break;
	    }
	    dom.focus(preventScrollSupported == null ? {
	        get preventScroll() {
	            preventScrollSupported = { preventScroll: true };
	            return true;
	        }
	    } : undefined);
	    if (!preventScrollSupported) {
	        preventScrollSupported = false;
	        for (let i = 0; i < stack.length;) {
	            let elt = stack[i++], top = stack[i++], left = stack[i++];
	            if (elt.scrollTop != top)
	                elt.scrollTop = top;
	            if (elt.scrollLeft != left)
	                elt.scrollLeft = left;
	        }
	    }
	}
	let scratchRange;
	function textRange(node, from, to = from) {
	    let range = scratchRange || (scratchRange = document.createRange());
	    range.setEnd(node, to);
	    range.setStart(node, from);
	    return range;
	}
	function dispatchKey(elt, name, code) {
	    let options = { key: name, code: name, keyCode: code, which: code, cancelable: true };
	    let down = new KeyboardEvent("keydown", options);
	    down.synthetic = true;
	    elt.dispatchEvent(down);
	    let up = new KeyboardEvent("keyup", options);
	    up.synthetic = true;
	    elt.dispatchEvent(up);
	    return down.defaultPrevented || up.defaultPrevented;
	}
	let _plainTextSupported = null;
	function contentEditablePlainTextSupported() {
	    if (_plainTextSupported == null) {
	        _plainTextSupported = false;
	        let dummy = document.createElement("div");
	        try {
	            dummy.contentEditable = "plaintext-only";
	            _plainTextSupported = dummy.contentEditable == "plaintext-only";
	        }
	        catch (_) { }
	    }
	    return _plainTextSupported;
	}

	class DOMPos {
	    constructor(node, offset, precise = true) {
	        this.node = node;
	        this.offset = offset;
	        this.precise = precise;
	    }
	    static before(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom), precise); }
	    static after(dom, precise) { return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise); }
	}
	const none$3 = [];
	class ContentView {
	    constructor() {
	        this.parent = null;
	        this.dom = null;
	        this.dirty = 2 /* Node */;
	    }
	    get editorView() {
	        if (!this.parent)
	            throw new Error("Accessing view in orphan content view");
	        return this.parent.editorView;
	    }
	    get overrideDOMText() { return null; }
	    get posAtStart() {
	        return this.parent ? this.parent.posBefore(this) : 0;
	    }
	    get posAtEnd() {
	        return this.posAtStart + this.length;
	    }
	    posBefore(view) {
	        let pos = this.posAtStart;
	        for (let child of this.children) {
	            if (child == view)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	        throw new RangeError("Invalid child in posBefore");
	    }
	    posAfter(view) {
	        return this.posBefore(view) + view.length;
	    }
	    // Will return a rectangle directly before (when side < 0), after
	    // (side > 0) or directly on (when the browser supports it) the
	    // given position.
	    coordsAt(_pos, _side) { return null; }
	    sync(track) {
	        var _a;
	        if (this.dirty & 2 /* Node */) {
	            let parent = this.dom, pos = null;
	            for (let child of this.children) {
	                if (child.dirty) {
	                    let next = pos ? pos.nextSibling : parent.firstChild;
	                    if (!child.dom && next && !((_a = ContentView.get(next)) === null || _a === void 0 ? void 0 : _a.parent))
	                        child.reuseDOM(next);
	                    child.sync(track);
	                    child.dirty = 0 /* Not */;
	                }
	                if (track && track.node == parent && pos != child.dom)
	                    track.written = true;
	                syncNodeInto(parent, pos, child.dom);
	                pos = child.dom;
	            }
	            let next = pos ? pos.nextSibling : parent.firstChild;
	            if (next && track && track.node == parent)
	                track.written = true;
	            while (next)
	                next = rm$1(next);
	        }
	        else if (this.dirty & 1 /* Child */) {
	            for (let child of this.children)
	                if (child.dirty) {
	                    child.sync(track);
	                    child.dirty = 0 /* Not */;
	                }
	        }
	    }
	    reuseDOM(_dom) { return false; }
	    localPosFromDOM(node, offset) {
	        let after;
	        if (node == this.dom) {
	            after = this.dom.childNodes[offset];
	        }
	        else {
	            let bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
	            for (;;) {
	                let parent = node.parentNode;
	                if (parent == this.dom)
	                    break;
	                if (bias == 0 && parent.firstChild != parent.lastChild) {
	                    if (node == parent.firstChild)
	                        bias = -1;
	                    else
	                        bias = 1;
	                }
	                node = parent;
	            }
	            if (bias < 0)
	                after = node;
	            else
	                after = node.nextSibling;
	        }
	        if (after == this.dom.firstChild)
	            return 0;
	        while (after && !ContentView.get(after))
	            after = after.nextSibling;
	        if (!after)
	            return this.length;
	        for (let i = 0, pos = 0;; i++) {
	            let child = this.children[i];
	            if (child.dom == after)
	                return pos;
	            pos += child.length + child.breakAfter;
	        }
	    }
	    domBoundsAround(from, to, offset = 0) {
	        let fromI = -1, fromStart = -1, toI = -1, toEnd = -1;
	        for (let i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (pos < from && end > to)
	                return child.domBoundsAround(from, to, pos);
	            if (end >= from && fromI == -1) {
	                fromI = i;
	                fromStart = pos;
	            }
	            if (pos > to && child.dom.parentNode == this.dom) {
	                toI = i;
	                toEnd = prevEnd;
	                break;
	            }
	            prevEnd = end;
	            pos = end + child.breakAfter;
	        }
	        return { from: fromStart, to: toEnd < 0 ? offset + this.length : toEnd,
	            startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
	            endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null };
	    }
	    markDirty(andParent = false) {
	        this.dirty |= 2 /* Node */;
	        this.markParentsDirty(andParent);
	    }
	    markParentsDirty(childList) {
	        for (let parent = this.parent; parent; parent = parent.parent) {
	            if (childList)
	                parent.dirty |= 2 /* Node */;
	            if (parent.dirty & 1 /* Child */)
	                return;
	            parent.dirty |= 1 /* Child */;
	            childList = false;
	        }
	    }
	    setParent(parent) {
	        if (this.parent != parent) {
	            this.parent = parent;
	            if (this.dirty)
	                this.markParentsDirty(true);
	        }
	    }
	    setDOM(dom) {
	        if (this.dom)
	            this.dom.cmView = null;
	        this.dom = dom;
	        dom.cmView = this;
	    }
	    get rootView() {
	        for (let v = this;;) {
	            let parent = v.parent;
	            if (!parent)
	                return v;
	            v = parent;
	        }
	    }
	    replaceChildren(from, to, children = none$3) {
	        this.markDirty();
	        for (let i = from; i < to; i++) {
	            let child = this.children[i];
	            if (child.parent == this)
	                child.parent = null;
	        }
	        this.children.splice(from, to - from, ...children);
	        for (let i = 0; i < children.length; i++)
	            children[i].setParent(this);
	    }
	    ignoreMutation(_rec) { return false; }
	    ignoreEvent(_event) { return false; }
	    childCursor(pos = this.length) {
	        return new ChildCursor(this.children, pos, this.children.length);
	    }
	    childPos(pos, bias = 1) {
	        return this.childCursor().findPos(pos, bias);
	    }
	    toString() {
	        let name = this.constructor.name.replace("View", "");
	        return name + (this.children.length ? "(" + this.children.join() + ")" :
	            this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") +
	            (this.breakAfter ? "#" : "");
	    }
	    static get(node) { return node.cmView; }
	}
	ContentView.prototype.breakAfter = 0;
	// Remove a DOM node and return its next sibling.
	function rm$1(dom) {
	    let next = dom.nextSibling;
	    dom.parentNode.removeChild(dom);
	    return next;
	}
	function syncNodeInto(parent, after, dom) {
	    let next = after ? after.nextSibling : parent.firstChild;
	    if (dom.parentNode == parent)
	        while (next != dom)
	            next = rm$1(next);
	    else
	        parent.insertBefore(dom, next);
	}
	class ChildCursor {
	    constructor(children, pos, i) {
	        this.children = children;
	        this.pos = pos;
	        this.i = i;
	        this.off = 0;
	    }
	    findPos(pos, bias = 1) {
	        for (;;) {
	            if (pos > this.pos || pos == this.pos &&
	                (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
	                this.off = pos - this.pos;
	                return this;
	            }
	            let next = this.children[--this.i];
	            this.pos -= next.length + next.breakAfter;
	        }
	    }
	}

	let [nav, doc] = typeof navigator != "undefined"
	    ? [navigator, document]
	    : [{ userAgent: "", vendor: "", platform: "" }, { documentElement: { style: {} } }];
	const ie_edge = /*@__PURE__*//Edge\/(\d+)/.exec(nav.userAgent);
	const ie_upto10 = /*@__PURE__*//MSIE \d/.test(nav.userAgent);
	const ie_11up = /*@__PURE__*//Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
	const ie = !!(ie_upto10 || ie_11up || ie_edge);
	const gecko = !ie && /*@__PURE__*//gecko\/(\d+)/i.test(nav.userAgent);
	const chrome = !ie && /*@__PURE__*//Chrome\/(\d+)/.exec(nav.userAgent);
	const webkit = "webkitFontSmoothing" in doc.documentElement.style;
	const safari = !ie && /*@__PURE__*//Apple Computer/.test(nav.vendor);
	var browser = {
	    mac: /*@__PURE__*//Mac/.test(nav.platform),
	    ie,
	    ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
	    gecko,
	    gecko_version: gecko ? +(/*@__PURE__*//Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
	    chrome: !!chrome,
	    chrome_version: chrome ? +chrome[1] : 0,
	    ios: safari && (/*@__PURE__*//Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2),
	    android: /*@__PURE__*//Android\b/.test(nav.userAgent),
	    webkit,
	    safari,
	    webkit_version: webkit ? +(/*@__PURE__*//\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
	    tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
	};

	const none$2 = [];
	class InlineView extends ContentView {
	    /**
	    Return true when this view is equivalent to `other` and can take
	    on its role.
	    */
	    become(_other) { return false; }
	    // When this is a zero-length view with a side, this should return a
	    // negative number to indicate it is before its position, or a
	    // positive number when after its position.
	    getSide() { return 0; }
	}
	InlineView.prototype.children = none$2;
	const MaxJoinLen = 256;
	class TextView extends InlineView {
	    constructor(text) {
	        super();
	        this.text = text;
	    }
	    get length() { return this.text.length; }
	    createDOM(textDOM) {
	        this.setDOM(textDOM || document.createTextNode(this.text));
	    }
	    sync(track) {
	        if (!this.dom)
	            this.createDOM();
	        if (this.dom.nodeValue != this.text) {
	            if (track && track.node == this.dom)
	                track.written = true;
	            this.dom.nodeValue = this.text;
	        }
	    }
	    reuseDOM(dom) {
	        if (dom.nodeType != 3)
	            return false;
	        this.createDOM(dom);
	        return true;
	    }
	    merge(from, to, source) {
	        if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen))
	            return false;
	        this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
	        this.markDirty();
	        return true;
	    }
	    slice(from) {
	        let result = new TextView(this.text.slice(from));
	        this.text = this.text.slice(0, from);
	        return result;
	    }
	    localPosFromDOM(node, offset) {
	        return node == this.dom ? offset : offset ? this.text.length : 0;
	    }
	    domAtPos(pos) { return new DOMPos(this.dom, pos); }
	    domBoundsAround(_from, _to, offset) {
	        return { from: offset, to: offset + this.length, startDOM: this.dom, endDOM: this.dom.nextSibling };
	    }
	    coordsAt(pos, side) {
	        return textCoords(this.dom, pos, side);
	    }
	}
	class MarkView extends InlineView {
	    constructor(mark, children = [], length = 0) {
	        super();
	        this.mark = mark;
	        this.children = children;
	        this.length = length;
	        for (let ch of children)
	            ch.setParent(this);
	    }
	    createDOM() {
	        let dom = document.createElement(this.mark.tagName);
	        if (this.mark.class)
	            dom.className = this.mark.class;
	        if (this.mark.attrs)
	            for (let name in this.mark.attrs)
	                dom.setAttribute(name, this.mark.attrs[name]);
	        this.setDOM(dom);
	    }
	    sync(track) {
	        if (!this.dom || (this.dirty & 4 /* Attrs */))
	            this.createDOM();
	        super.sync(track);
	    }
	    merge(from, to, source, openStart, openEnd) {
	        if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) ||
	            (from && openStart <= 0) || (to < this.length && openEnd <= 0)))
	            return false;
	        mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
	        this.markDirty();
	        return true;
	    }
	    slice(from) {
	        let result = [], off = 0, detachFrom = -1, i = 0;
	        for (let elt of this.children) {
	            let end = off + elt.length;
	            if (end > from)
	                result.push(off < from ? elt.slice(from - off) : elt);
	            if (detachFrom < 0 && off >= from)
	                detachFrom = i;
	            off = end;
	            i++;
	        }
	        let length = this.length - from;
	        this.length = from;
	        if (detachFrom > -1)
	            this.replaceChildren(detachFrom, this.children.length);
	        return new MarkView(this.mark, result, length);
	    }
	    domAtPos(pos) {
	        return inlineDOMAtPos(this.dom, this.children, pos);
	    }
	    coordsAt(pos, side) {
	        return coordsInChildren(this, pos, side);
	    }
	}
	function textCoords(text, pos, side) {
	    let length = text.nodeValue.length;
	    if (pos > length)
	        pos = length;
	    let from = pos, to = pos, flatten = 0;
	    if (pos == 0 && side < 0 || pos == length && side >= 0) {
	        if (!(browser.chrome || browser.gecko)) { // These browsers reliably return valid rectangles for empty ranges
	            if (pos) {
	                from--;
	                flatten = 1;
	            } // FIXME this is wrong in RTL text
	            else {
	                to++;
	                flatten = -1;
	            }
	        }
	    }
	    else {
	        if (side < 0)
	            from--;
	        else
	            to++;
	    }
	    let rects = textRange(text, from, to).getClientRects();
	    if (!rects.length)
	        return Rect0;
	    let rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
	    if (browser.safari && !flatten && rect.width == 0)
	        rect = Array.prototype.find.call(rects, r => r.width) || rect;
	    return flatten ? flattenRect(rect, flatten < 0) : rect;
	}
	// Also used for collapsed ranges that don't have a placeholder widget!
	class WidgetView extends InlineView {
	    constructor(widget, length, side) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.side = side;
	    }
	    static create(widget, length, side) {
	        return new (widget.customView || WidgetView)(widget, length, side);
	    }
	    slice(from) {
	        let result = WidgetView.create(this.widget, this.length - from, this.side);
	        this.length -= from;
	        return result;
	    }
	    sync() {
	        if (!this.dom || !this.widget.updateDOM(this.dom)) {
	            this.setDOM(this.widget.toDOM(this.editorView));
	            this.dom.contentEditable = "false";
	        }
	    }
	    getSide() { return this.side; }
	    merge(from, to, source, openStart, openEnd) {
	        if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) ||
	            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
	            return false;
	        this.length = from + (source ? source.length : 0) + (this.length - to);
	        return true;
	    }
	    become(other) {
	        if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
	            if (this.widget.constructor == other.widget.constructor) {
	                if (!this.widget.eq(other.widget))
	                    this.markDirty(true);
	                this.widget = other.widget;
	                return true;
	            }
	        }
	        return false;
	    }
	    ignoreMutation() { return true; }
	    ignoreEvent(event) { return this.widget.ignoreEvent(event); }
	    get overrideDOMText() {
	        if (this.length == 0)
	            return Text.empty;
	        let top = this;
	        while (top.parent)
	            top = top.parent;
	        let view = top.editorView, text = view && view.state.doc, start = this.posAtStart;
	        return text ? text.slice(start, start + this.length) : Text.empty;
	    }
	    domAtPos(pos) {
	        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
	    }
	    domBoundsAround() { return null; }
	    coordsAt(pos, side) {
	        let rects = this.dom.getClientRects(), rect = null;
	        if (!rects.length)
	            return Rect0;
	        for (let i = pos > 0 ? rects.length - 1 : 0;; i += (pos > 0 ? -1 : 1)) {
	            rect = rects[i];
	            if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom)
	                break;
	        }
	        return (pos == 0 && side > 0 || pos == this.length && side <= 0) ? rect : flattenRect(rect, pos == 0);
	    }
	}
	class CompositionView extends WidgetView {
	    domAtPos(pos) { return new DOMPos(this.widget.text, pos); }
	    sync() { if (!this.dom)
	        this.setDOM(this.widget.toDOM()); }
	    localPosFromDOM(node, offset) {
	        return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
	    }
	    ignoreMutation() { return false; }
	    get overrideDOMText() { return null; }
	    coordsAt(pos, side) { return textCoords(this.widget.text, pos, side); }
	}
	function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
	    let cur = parent.childCursor();
	    let { i: toI, off: toOff } = cur.findPos(to, 1);
	    let { i: fromI, off: fromOff } = cur.findPos(from, -1);
	    let dLen = from - to;
	    for (let view of elts)
	        dLen += view.length;
	    parent.length += dLen;
	    let { children } = parent;
	    // Both from and to point into the same child view
	    if (fromI == toI && fromOff) {
	        let start = children[fromI];
	        // Maybe just update that view and be done
	        if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd))
	            return;
	        if (elts.length == 0) {
	            start.merge(fromOff, toOff, null, openStart, openEnd);
	            return;
	        }
	        // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
	        let after = start.slice(toOff);
	        if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd))
	            elts[elts.length - 1] = after;
	        else
	            elts.push(after);
	        toI++;
	        openEnd = toOff = 0;
	    }
	    // Make sure start and end positions fall on node boundaries
	    // (fromOff/toOff are no longer used after this), and that if the
	    // start or end of the elts can be merged with adjacent nodes,
	    // this is done
	    if (toOff) {
	        let end = children[toI];
	        if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
	            elts.pop();
	            openEnd = elts.length ? 0 : openStart;
	        }
	        else {
	            end.merge(0, toOff, null, 0, 0);
	        }
	    }
	    else if (toI < children.length && elts.length &&
	        children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
	        elts.pop();
	        openEnd = elts.length ? 0 : openStart;
	    }
	    if (fromOff) {
	        let start = children[fromI];
	        if (elts.length && start.merge(fromOff, start.length, elts[0], openStart, 0)) {
	            elts.shift();
	            openStart = elts.length ? 0 : openEnd;
	        }
	        else {
	            start.merge(fromOff, start.length, null, 0, 0);
	        }
	        fromI++;
	    }
	    else if (fromI && elts.length) {
	        let end = children[fromI - 1];
	        if (end.merge(end.length, end.length, elts[0], openStart, 0)) {
	            elts.shift();
	            openStart = elts.length ? 0 : openEnd;
	        }
	    }
	    // Then try to merge any mergeable nodes at the start and end of
	    // the changed range
	    while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
	        elts.pop();
	        toI--;
	        openEnd = elts.length ? 0 : openStart;
	    }
	    while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
	        elts.shift();
	        fromI++;
	        openStart = elts.length ? 0 : openEnd;
	    }
	    if (!elts.length && fromI && toI < children.length &&
	        children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd))
	        fromI--;
	    // And if anything remains, splice the child array to insert the new elts
	    if (elts.length || fromI != toI)
	        parent.replaceChildren(fromI, toI, elts);
	}
	function inlineDOMAtPos(dom, children, pos) {
	    let i = 0;
	    for (let off = 0; i < children.length; i++) {
	        let child = children[i], end = off + child.length;
	        if (end == off && child.getSide() <= 0)
	            continue;
	        if (pos > off && pos < end && child.dom.parentNode == dom)
	            return child.domAtPos(pos - off);
	        if (pos <= off)
	            break;
	        off = end;
	    }
	    for (; i > 0; i--) {
	        let before = children[i - 1].dom;
	        if (before.parentNode == dom)
	            return DOMPos.after(before);
	    }
	    return new DOMPos(dom, 0);
	}
	// Assumes `view`, if a mark view, has precisely 1 child.
	function joinInlineInto(parent, view, open) {
	    let last, { children } = parent;
	    if (open > 0 && view instanceof MarkView && children.length &&
	        (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
	        joinInlineInto(last, view.children[0], open - 1);
	    }
	    else {
	        children.push(view);
	        view.setParent(parent);
	    }
	    parent.length += view.length;
	}
	function coordsInChildren(view, pos, side) {
	    for (let off = 0, i = 0; i < view.children.length; i++) {
	        let child = view.children[i], end = off + child.length, next;
	        if ((side <= 0 || end == view.length || child.getSide() > 0 ? end >= pos : end > pos) &&
	            (pos < end || i + 1 == view.children.length || (next = view.children[i + 1]).length || next.getSide() > 0)) {
	            let flatten = 0;
	            if (end == off) {
	                if (child.getSide() <= 0)
	                    continue;
	                flatten = side = -child.getSide();
	            }
	            let rect = child.coordsAt(pos - off, side);
	            return flatten && rect ? flattenRect(rect, side < 0) : rect;
	        }
	        off = end;
	    }
	    let last = view.dom.lastChild;
	    if (!last)
	        return view.dom.getBoundingClientRect();
	    let rects = clientRectsFor(last);
	    return rects[rects.length - 1];
	}

	function combineAttrs(source, target) {
	    for (let name in source) {
	        if (name == "class" && target.class)
	            target.class += " " + source.class;
	        else if (name == "style" && target.style)
	            target.style += ";" + source.style;
	        else
	            target[name] = source[name];
	    }
	    return target;
	}
	function attrsEq(a, b) {
	    if (a == b)
	        return true;
	    if (!a || !b)
	        return false;
	    let keysA = Object.keys(a), keysB = Object.keys(b);
	    if (keysA.length != keysB.length)
	        return false;
	    for (let key of keysA) {
	        if (keysB.indexOf(key) == -1 || a[key] !== b[key])
	            return false;
	    }
	    return true;
	}
	function updateAttrs(dom, prev, attrs) {
	    if (prev)
	        for (let name in prev)
	            if (!(attrs && name in attrs))
	                dom.removeAttribute(name);
	    if (attrs)
	        for (let name in attrs)
	            if (!(prev && prev[name] == attrs[name]))
	                dom.setAttribute(name, attrs[name]);
	}

	/**
	Widgets added to the content are described by subclasses of this
	class. Using a description object like that makes it possible to
	delay creating of the DOM structure for a widget until it is
	needed, and to avoid redrawing widgets even when the decorations
	that define them are recreated.
	*/
	class WidgetType {
	    /**
	    Compare this instance to another instance of the same type.
	    (TypeScript can't express this, but only instances of the same
	    specific class will be passed to this method.) This is used to
	    avoid redrawing widgets when they are replaced by a new
	    decoration of the same type. The default implementation just
	    returns `false`, which will cause new instances of the widget to
	    always be redrawn.
	    */
	    eq(_widget) { return false; }
	    /**
	    Update a DOM element created by a widget of the same type (but
	    different, non-`eq` content) to reflect this widget. May return
	    true to indicate that it could update, false to indicate it
	    couldn't (in which case the widget will be redrawn). The default
	    implementation just returns false.
	    */
	    updateDOM(_dom) { return false; }
	    /**
	    @internal
	    */
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other);
	    }
	    /**
	    The estimated height this widget will have, to be used when
	    estimating the height of content that hasn't been drawn. May
	    return -1 to indicate you don't know. The default implementation
	    returns -1.
	    */
	    get estimatedHeight() { return -1; }
	    /**
	    Can be used to configure which kinds of events inside the widget
	    should be ignored by the editor. The default is to ignore all
	    events.
	    */
	    ignoreEvent(_event) { return true; }
	    /**
	    @internal
	    */
	    get customView() { return null; }
	}
	/**
	The different types of blocks that can occur in an editor view.
	*/
	var BlockType = /*@__PURE__*/(function (BlockType) {
	    /**
	    A line of text.
	    */
	    BlockType[BlockType["Text"] = 0] = "Text";
	    /**
	    A block widget associated with the position after it.
	    */
	    BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
	    /**
	    A block widget associated with the position before it.
	    */
	    BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
	    /**
	    A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
	    */
	    BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
	return BlockType})(BlockType || (BlockType = {}));
	/**
	A decoration provides information on how to draw or style a piece
	of content. You'll usually use it wrapped in a
	[`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
	*/
	class Decoration extends RangeValue {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    startSide, 
	    /**
	    @internal
	    */
	    endSide, 
	    /**
	    @internal
	    */
	    widget, 
	    /**
	    The config object used to create this decoration. You can
	    include additional properties in there to store metadata about
	    your decoration.
	    */
	    spec) {
	        super();
	        this.startSide = startSide;
	        this.endSide = endSide;
	        this.widget = widget;
	        this.spec = spec;
	    }
	    /**
	    @internal
	    */
	    get heightRelevant() { return false; }
	    /**
	    Create a mark decoration, which influences the styling of the
	    content in its range. Nested mark decorations will cause nested
	    DOM elements to be created. Nesting order is determined by
	    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
	    (below the facet-provided decorations) [view
	    plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
	    on line boundaries and on the boundaries of higher-precedence
	    decorations.
	    */
	    static mark(spec) {
	        return new MarkDecoration(spec);
	    }
	    /**
	    Create a widget decoration, which adds an element at the given
	    position.
	    */
	    static widget(spec) {
	        let side = spec.side || 0;
	        if (spec.block)
	            side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
	        return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
	    }
	    /**
	    Create a replace decoration which replaces the given range with
	    a widget, or simply hides it.
	    */
	    static replace(spec) {
	        let block = !!spec.block;
	        let { start, end } = getInclusive(spec);
	        let startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
	        let endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
	        return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
	    }
	    /**
	    Create a line decoration, which can add DOM attributes to the
	    line starting at the given position.
	    */
	    static line(spec) {
	        return new LineDecoration(spec);
	    }
	    /**
	    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
	    decorated range or ranges. If the ranges aren't already sorted,
	    pass `true` for `sort` to make the library sort them for you.
	    */
	    static set(of, sort = false) {
	        return RangeSet.of(of, sort);
	    }
	    /**
	    @internal
	    */
	    hasHeight() { return this.widget ? this.widget.estimatedHeight > -1 : false; }
	}
	/**
	The empty set of decorations.
	*/
	Decoration.none = RangeSet.empty;
	class MarkDecoration extends Decoration {
	    constructor(spec) {
	        let { start, end } = getInclusive(spec);
	        super(100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
	        this.tagName = spec.tagName || "span";
	        this.class = spec.class || "";
	        this.attrs = spec.attributes || null;
	    }
	    eq(other) {
	        return this == other ||
	            other instanceof MarkDecoration &&
	                this.tagName == other.tagName &&
	                this.class == other.class &&
	                attrsEq(this.attrs, other.attrs);
	    }
	    range(from, to = from) {
	        if (from >= to)
	            throw new RangeError("Mark decorations may not be empty");
	        return super.range(from, to);
	    }
	}
	MarkDecoration.prototype.point = false;
	class LineDecoration extends Decoration {
	    constructor(spec) {
	        super(-100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
	    }
	    eq(other) {
	        return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
	    }
	    range(from, to = from) {
	        if (to != from)
	            throw new RangeError("Line decoration ranges must be zero-length");
	        return super.range(from, to);
	    }
	}
	LineDecoration.prototype.mapMode = MapMode.TrackBefore;
	LineDecoration.prototype.point = true;
	class PointDecoration extends Decoration {
	    constructor(spec, startSide, endSide, block, widget, isReplace) {
	        super(startSide, endSide, widget, spec);
	        this.block = block;
	        this.isReplace = isReplace;
	        this.mapMode = !block ? MapMode.TrackDel : startSide < 0 ? MapMode.TrackBefore : MapMode.TrackAfter;
	    }
	    // Only relevant when this.block == true
	    get type() {
	        return this.startSide < this.endSide ? BlockType.WidgetRange
	            : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
	    }
	    get heightRelevant() { return this.block || !!this.widget && this.widget.estimatedHeight >= 5; }
	    eq(other) {
	        return other instanceof PointDecoration &&
	            widgetsEq(this.widget, other.widget) &&
	            this.block == other.block &&
	            this.startSide == other.startSide && this.endSide == other.endSide;
	    }
	    range(from, to = from) {
	        if (this.isReplace && (from > to || (from == to && this.startSide > 0 && this.endSide < 0)))
	            throw new RangeError("Invalid range for replacement decoration");
	        if (!this.isReplace && to != from)
	            throw new RangeError("Widget decorations can only have zero-length ranges");
	        return super.range(from, to);
	    }
	}
	PointDecoration.prototype.point = true;
	function getInclusive(spec) {
	    let { inclusiveStart: start, inclusiveEnd: end } = spec;
	    if (start == null)
	        start = spec.inclusive;
	    if (end == null)
	        end = spec.inclusive;
	    return { start: start || false, end: end || false };
	}
	function widgetsEq(a, b) {
	    return a == b || !!(a && b && a.compare(b));
	}
	function addRange(from, to, ranges, margin = 0) {
	    let last = ranges.length - 1;
	    if (last >= 0 && ranges[last] + margin > from)
	        ranges[last] = Math.max(ranges[last], to);
	    else
	        ranges.push(from, to);
	}

	class LineView extends ContentView {
	    constructor() {
	        super(...arguments);
	        this.children = [];
	        this.length = 0;
	        this.prevAttrs = undefined;
	        this.attrs = null;
	        this.breakAfter = 0;
	    }
	    // Consumes source
	    merge(from, to, source, takeDeco, openStart, openEnd) {
	        if (source) {
	            if (!(source instanceof LineView))
	                return false;
	            if (!this.dom)
	                source.transferDOM(this); // Reuse source.dom when appropriate
	        }
	        if (takeDeco)
	            this.setDeco(source ? source.attrs : null);
	        mergeInlineChildren(this, from, to, source ? source.children : none$1$1, openStart, openEnd);
	        return true;
	    }
	    split(at) {
	        let end = new LineView;
	        end.breakAfter = this.breakAfter;
	        if (this.length == 0)
	            return end;
	        let { i, off } = this.childPos(at);
	        if (off) {
	            end.append(this.children[i].slice(off), 0);
	            this.children[i].merge(off, this.children[i].length, null, 0, 0);
	            i++;
	        }
	        for (let j = i; j < this.children.length; j++)
	            end.append(this.children[j], 0);
	        while (i > 0 && this.children[i - 1].length == 0) {
	            this.children[i - 1].parent = null;
	            i--;
	        }
	        this.children.length = i;
	        this.markDirty();
	        this.length = at;
	        return end;
	    }
	    transferDOM(other) {
	        if (!this.dom)
	            return;
	        other.setDOM(this.dom);
	        other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
	        this.prevAttrs = undefined;
	        this.dom = null;
	    }
	    setDeco(attrs) {
	        if (!attrsEq(this.attrs, attrs)) {
	            if (this.dom) {
	                this.prevAttrs = this.attrs;
	                this.markDirty();
	            }
	            this.attrs = attrs;
	        }
	    }
	    // Only called when building a line view in ContentBuilder
	    append(child, openStart) {
	        joinInlineInto(this, child, openStart);
	    }
	    // Only called when building a line view in ContentBuilder
	    addLineDeco(deco) {
	        let attrs = deco.spec.attributes;
	        if (attrs)
	            this.attrs = combineAttrs(attrs, this.attrs || {});
	    }
	    domAtPos(pos) {
	        return inlineDOMAtPos(this.dom, this.children, pos);
	    }
	    sync(track) {
	        if (!this.dom || (this.dirty & 4 /* Attrs */)) {
	            this.setDOM(document.createElement("div"));
	            this.dom.className = "cm-line";
	            this.prevAttrs = this.attrs ? null : undefined;
	        }
	        if (this.prevAttrs !== undefined) {
	            updateAttrs(this.dom, this.prevAttrs, this.attrs);
	            this.dom.classList.add("cm-line");
	            this.prevAttrs = undefined;
	        }
	        super.sync(track);
	        let last = this.dom.lastChild;
	        while (last && ContentView.get(last) instanceof MarkView)
	            last = last.lastChild;
	        if (!last ||
	            last.nodeName != "BR" && ContentView.get(last) instanceof WidgetView &&
	                (!browser.ios || !this.children.some(ch => ch instanceof TextView))) {
	            let hack = document.createElement("BR");
	            hack.cmIgnore = true;
	            this.dom.appendChild(hack);
	        }
	    }
	    measureTextSize() {
	        if (this.children.length == 0 || this.length > 20)
	            return null;
	        let totalWidth = 0;
	        for (let child of this.children) {
	            if (!(child instanceof TextView))
	                return null;
	            let rects = clientRectsFor(child.dom);
	            if (rects.length != 1)
	                return null;
	            totalWidth += rects[0].width;
	        }
	        return { lineHeight: this.dom.getBoundingClientRect().height,
	            charWidth: totalWidth / this.length };
	    }
	    coordsAt(pos, side) {
	        return coordsInChildren(this, pos, side);
	    }
	    match(_other) { return false; }
	    get type() { return BlockType.Text; }
	    static find(docView, pos) {
	        for (let i = 0, off = 0;; i++) {
	            let block = docView.children[i], end = off + block.length;
	            if (end >= pos) {
	                if (block instanceof LineView)
	                    return block;
	                if (block.length)
	                    return null;
	            }
	            off = end + block.breakAfter;
	        }
	    }
	}
	const none$1$1 = [];
	class BlockWidgetView extends ContentView {
	    constructor(widget, length, type) {
	        super();
	        this.widget = widget;
	        this.length = length;
	        this.type = type;
	        this.breakAfter = 0;
	    }
	    merge(from, to, source, _takeDeco, openStart, openEnd) {
	        if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) ||
	            from > 0 && openStart <= 0 || to < this.length && openEnd <= 0))
	            return false;
	        this.length = from + (source ? source.length : 0) + (this.length - to);
	        return true;
	    }
	    domAtPos(pos) {
	        return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
	    }
	    split(at) {
	        let len = this.length - at;
	        this.length = at;
	        return new BlockWidgetView(this.widget, len, this.type);
	    }
	    get children() { return none$1$1; }
	    sync() {
	        if (!this.dom || !this.widget.updateDOM(this.dom)) {
	            this.setDOM(this.widget.toDOM(this.editorView));
	            this.dom.contentEditable = "false";
	        }
	    }
	    get overrideDOMText() {
	        return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : Text.empty;
	    }
	    domBoundsAround() { return null; }
	    match(other) {
	        if (other instanceof BlockWidgetView && other.type == this.type &&
	            other.widget.constructor == this.widget.constructor) {
	            if (!other.widget.eq(this.widget))
	                this.markDirty(true);
	            this.widget = other.widget;
	            this.length = other.length;
	            this.breakAfter = other.breakAfter;
	            return true;
	        }
	        return false;
	    }
	    ignoreMutation() { return true; }
	    ignoreEvent(event) { return this.widget.ignoreEvent(event); }
	}

	class ContentBuilder {
	    constructor(doc, pos, end) {
	        this.doc = doc;
	        this.pos = pos;
	        this.end = end;
	        this.content = [];
	        this.curLine = null;
	        this.breakAtStart = 0;
	        this.openStart = -1;
	        this.openEnd = -1;
	        this.text = "";
	        this.textOff = 0;
	        this.cursor = doc.iter();
	        this.skip = pos;
	    }
	    posCovered() {
	        if (this.content.length == 0)
	            return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
	        let last = this.content[this.content.length - 1];
	        return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
	    }
	    getLine() {
	        if (!this.curLine)
	            this.content.push(this.curLine = new LineView);
	        return this.curLine;
	    }
	    addWidget(view) {
	        this.curLine = null;
	        this.content.push(view);
	    }
	    finish() {
	        if (!this.posCovered())
	            this.getLine();
	    }
	    wrapMarks(view, active) {
	        for (let mark of active)
	            view = new MarkView(mark, [view], view.length);
	        return view;
	    }
	    buildText(length, active, openStart) {
	        while (length > 0) {
	            if (this.textOff == this.text.length) {
	                let { value, lineBreak, done } = this.cursor.next(this.skip);
	                this.skip = 0;
	                if (done)
	                    throw new Error("Ran out of text content when drawing inline views");
	                if (lineBreak) {
	                    if (!this.posCovered())
	                        this.getLine();
	                    if (this.content.length)
	                        this.content[this.content.length - 1].breakAfter = 1;
	                    else
	                        this.breakAtStart = 1;
	                    this.curLine = null;
	                    length--;
	                    continue;
	                }
	                else {
	                    this.text = value;
	                    this.textOff = 0;
	                }
	            }
	            let take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
	            this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
	            this.textOff += take;
	            length -= take;
	            openStart = 0;
	        }
	    }
	    span(from, to, active, openStart) {
	        this.buildText(to - from, active, openStart);
	        this.pos = to;
	        if (this.openStart < 0)
	            this.openStart = openStart;
	    }
	    point(from, to, deco, active, openStart) {
	        let len = to - from;
	        if (deco instanceof PointDecoration) {
	            if (deco.block) {
	                let { type } = deco;
	                if (type == BlockType.WidgetAfter && !this.posCovered())
	                    this.getLine();
	                this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
	            }
	            else {
	                let widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
	                this.getLine().append(widget, openStart);
	            }
	        }
	        else if (this.doc.lineAt(this.pos).from == this.pos) { // Line decoration
	            this.getLine().addLineDeco(deco);
	        }
	        if (len) {
	            // Advance the iterator past the replaced content
	            if (this.textOff + len <= this.text.length) {
	                this.textOff += len;
	            }
	            else {
	                this.skip += len - (this.text.length - this.textOff);
	                this.text = "";
	                this.textOff = 0;
	            }
	            this.pos = to;
	        }
	        if (this.openStart < 0)
	            this.openStart = openStart;
	    }
	    static build(text, from, to, decorations) {
	        let builder = new ContentBuilder(text, from, to);
	        builder.openEnd = RangeSet.spans(decorations, from, to, builder);
	        if (builder.openStart < 0)
	            builder.openStart = builder.openEnd;
	        builder.finish();
	        return builder;
	    }
	}
	class NullWidget extends WidgetType {
	    constructor(tag) {
	        super();
	        this.tag = tag;
	    }
	    eq(other) { return other.tag == this.tag; }
	    toDOM() { return document.createElement(this.tag); }
	    updateDOM(elt) { return elt.nodeName.toLowerCase() == this.tag; }
	}

	const none$4 = [];
	const clickAddsSelectionRange = /*@__PURE__*/Facet.define();
	const dragMovesSelection$1 = /*@__PURE__*/Facet.define();
	const mouseSelectionStyle = /*@__PURE__*/Facet.define();
	const exceptionSink = /*@__PURE__*/Facet.define();
	const updateListener = /*@__PURE__*/Facet.define();
	const inputHandler = /*@__PURE__*/Facet.define();
	const scrollTo = /*@__PURE__*/StateEffect.define({
	    map: (range, changes) => range.map(changes)
	});
	/**
	Log or report an unhandled exception in client code. Should
	probably only be used by extension code that allows client code to
	provide functions, and calls those functions in a context where an
	exception can't be propagated to calling code in a reasonable way
	(for example when in an event handler).

	Either calls a handler registered with
	[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
	`window.onerror`, if defined, or `console.error` (in which case
	it'll pass `context`, when given, as first argument).
	*/
	function logException(state, exception, context) {
	    let handler = state.facet(exceptionSink);
	    if (handler.length)
	        handler[0](exception);
	    else if (window.onerror)
	        window.onerror(String(exception), context, undefined, undefined, exception);
	    else if (context)
	        console.error(context + ":", exception);
	    else
	        console.error(exception);
	}
	const editable = /*@__PURE__*/Facet.define({ combine: values => values.length ? values[0] : true });
	/**
	Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
	[fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
	provides.
	*/
	class PluginFieldProvider {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    @internal
	    */
	    field, 
	    /**
	    @internal
	    */
	    get) {
	        this.field = field;
	        this.get = get;
	    }
	}
	/**
	Plugin fields are a mechanism for allowing plugins to provide
	values that can be retrieved through the
	[`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
	*/
	class PluginField {
	    /**
	    Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
	    to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
	    option.
	    */
	    from(get) {
	        return new PluginFieldProvider(this, get);
	    }
	    /**
	    Define a new plugin field.
	    */
	    static define() { return new PluginField(); }
	}
	/**
	This field can be used by plugins to provide
	[decorations](https://codemirror.net/6/docs/ref/#view.Decoration).

	**Note**: For reasons of data flow (plugins are only updated
	after the viewport is computed), decorations produced by plugins
	are _not_ taken into account when predicting the vertical layout
	structure of the editor. Thus, things like large widgets or big
	replacements (i.e. code folding) should be provided through the
	state-level [`decorations` facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations),
	not this plugin field. Specifically, replacing decorations that
	cross line boundaries will break if provided through a plugin.
	*/
	PluginField.decorations = /*@__PURE__*/PluginField.define();
	/**
	Used to provide ranges that should be treated as atoms as far as
	cursor motion is concerned. This causes methods like
	[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
	[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
	commands built on top of them) to skip across such regions when
	a selection endpoint would enter them. This does _not_ prevent
	direct programmatic [selection
	updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
	regions.
	*/
	PluginField.atomicRanges = /*@__PURE__*/PluginField.define();
	/**
	Plugins can provide additional scroll margins (space around the
	sides of the scrolling element that should be considered
	invisible) through this field. This can be useful when the
	plugin introduces elements that cover part of that element (for
	example a horizontally fixed gutter).
	*/
	PluginField.scrollMargins = /*@__PURE__*/PluginField.define();
	let nextPluginID = 0;
	const viewPlugin = /*@__PURE__*/Facet.define();
	/**
	View plugins associate stateful values with a view. They can
	influence the way the content is drawn, and are notified of things
	that happen in the view.
	*/
	class ViewPlugin {
	    constructor(
	    /**
	    @internal
	    */
	    id, 
	    /**
	    @internal
	    */
	    create, 
	    /**
	    @internal
	    */
	    fields) {
	        this.id = id;
	        this.create = create;
	        this.fields = fields;
	        this.extension = viewPlugin.of(this);
	    }
	    /**
	    Define a plugin from a constructor function that creates the
	    plugin's value, given an editor view.
	    */
	    static define(create, spec) {
	        let { eventHandlers, provide, decorations } = spec || {};
	        let fields = [];
	        if (provide)
	            for (let provider of Array.isArray(provide) ? provide : [provide])
	                fields.push(provider);
	        if (eventHandlers)
	            fields.push(domEventHandlers.from((value) => ({ plugin: value, handlers: eventHandlers })));
	        if (decorations)
	            fields.push(PluginField.decorations.from(decorations));
	        return new ViewPlugin(nextPluginID++, create, fields);
	    }
	    /**
	    Create a plugin for a class whose constructor takes a single
	    editor view as argument.
	    */
	    static fromClass(cls, spec) {
	        return ViewPlugin.define(view => new cls(view), spec);
	    }
	}
	const domEventHandlers = /*@__PURE__*/PluginField.define();
	class PluginInstance {
	    constructor(spec) {
	        this.spec = spec;
	        // When starting an update, all plugins have this field set to the
	        // update object, indicating they need to be updated. When finished
	        // updating, it is set to `false`. Retrieving a plugin that needs to
	        // be updated with `view.plugin` forces an eager update.
	        this.mustUpdate = null;
	        // This is null when the plugin is initially created, but
	        // initialized on the first update.
	        this.value = null;
	    }
	    takeField(type, target) {
	        for (let { field, get } of this.spec.fields)
	            if (field == type)
	                target.push(get(this.value));
	    }
	    update(view) {
	        if (!this.value) {
	            try {
	                this.value = this.spec.create(view);
	            }
	            catch (e) {
	                logException(view.state, e, "CodeMirror plugin crashed");
	                return PluginInstance.dummy;
	            }
	        }
	        else if (this.mustUpdate) {
	            let update = this.mustUpdate;
	            this.mustUpdate = null;
	            if (!this.value.update)
	                return this;
	            try {
	                this.value.update(update);
	            }
	            catch (e) {
	                logException(update.state, e, "CodeMirror plugin crashed");
	                if (this.value.destroy)
	                    try {
	                        this.value.destroy();
	                    }
	                    catch (_) { }
	                return PluginInstance.dummy;
	            }
	        }
	        return this;
	    }
	    destroy(view) {
	        var _a;
	        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
	            try {
	                this.value.destroy();
	            }
	            catch (e) {
	                logException(view.state, e, "CodeMirror plugin crashed");
	            }
	        }
	    }
	}
	PluginInstance.dummy = /*@__PURE__*/new PluginInstance(/*@__PURE__*/ViewPlugin.define(() => ({})));
	const editorAttributes = /*@__PURE__*/Facet.define({
	    combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
	});
	const contentAttributes = /*@__PURE__*/Facet.define({
	    combine: values => values.reduce((a, b) => combineAttrs(b, a), {})
	});
	// Provide decorations
	const decorations = /*@__PURE__*/Facet.define();
	const styleModule = /*@__PURE__*/Facet.define();
	class ChangedRange {
	    constructor(fromA, toA, fromB, toB) {
	        this.fromA = fromA;
	        this.toA = toA;
	        this.fromB = fromB;
	        this.toB = toB;
	    }
	    join(other) {
	        return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
	    }
	    addToSet(set) {
	        let i = set.length, me = this;
	        for (; i > 0; i--) {
	            let range = set[i - 1];
	            if (range.fromA > me.toA)
	                continue;
	            if (range.toA < me.fromA)
	                break;
	            me = me.join(range);
	            set.splice(i - 1, 1);
	        }
	        set.splice(i, 0, me);
	        return set;
	    }
	    static extendWithRanges(diff, ranges) {
	        if (ranges.length == 0)
	            return diff;
	        let result = [];
	        for (let dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
	            let next = dI == diff.length ? null : diff[dI], off = posA - posB;
	            let end = next ? next.fromB : 1e9;
	            while (rI < ranges.length && ranges[rI] < end) {
	                let from = ranges[rI], to = ranges[rI + 1];
	                let fromB = Math.max(posB, from), toB = Math.min(end, to);
	                if (fromB <= toB)
	                    new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
	                if (to > end)
	                    break;
	                else
	                    rI += 2;
	            }
	            if (!next)
	                return result;
	            new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
	            posA = next.toA;
	            posB = next.toB;
	        }
	    }
	}
	/**
	View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
	class, which describe what happened, whenever the view is updated.
	*/
	class ViewUpdate {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The editor view that the update is associated with.
	    */
	    view, 
	    /**
	    The new editor state.
	    */
	    state, 
	    /**
	    The transactions involved in the update. May be empty.
	    */
	    transactions = none$4) {
	        this.view = view;
	        this.state = state;
	        this.transactions = transactions;
	        /**
	        @internal
	        */
	        this.flags = 0;
	        this.startState = view.state;
	        this.changes = ChangeSet.empty(this.startState.doc.length);
	        for (let tr of transactions)
	            this.changes = this.changes.compose(tr.changes);
	        let changedRanges = [];
	        this.changes.iterChangedRanges((fromA, toA, fromB, toB) => changedRanges.push(new ChangedRange(fromA, toA, fromB, toB)));
	        this.changedRanges = changedRanges;
	        let focus = view.hasFocus;
	        if (focus != view.inputState.notifiedFocused) {
	            view.inputState.notifiedFocused = focus;
	            this.flags |= 1 /* Focus */;
	        }
	        if (this.docChanged)
	            this.flags |= 2 /* Height */;
	    }
	    /**
	    Tells you whether the [viewport](https://codemirror.net/6/docs/ref/#view.EditorView.viewport) or
	    [visible ranges](https://codemirror.net/6/docs/ref/#view.EditorView.visibleRanges) changed in this
	    update.
	    */
	    get viewportChanged() {
	        return (this.flags & 4 /* Viewport */) > 0;
	    }
	    /**
	    Indicates whether the line height in the editor changed in this update.
	    */
	    get heightChanged() {
	        return (this.flags & 2 /* Height */) > 0;
	    }
	    /**
	    Returns true when the document changed or the size of the editor
	    or the lines or characters within it has changed.
	    */
	    get geometryChanged() {
	        return this.docChanged || (this.flags & (8 /* Geometry */ | 2 /* Height */)) > 0;
	    }
	    /**
	    True when this update indicates a focus change.
	    */
	    get focusChanged() {
	        return (this.flags & 1 /* Focus */) > 0;
	    }
	    /**
	    Whether the document changed in this update.
	    */
	    get docChanged() {
	        return this.transactions.some(tr => tr.docChanged);
	    }
	    /**
	    Whether the selection was explicitly set in this update.
	    */
	    get selectionSet() {
	        return this.transactions.some(tr => tr.selection);
	    }
	    /**
	    @internal
	    */
	    get empty() { return this.flags == 0 && this.transactions.length == 0; }
	}

	class DocView extends ContentView {
	    constructor(view) {
	        super();
	        this.view = view;
	        this.compositionDeco = Decoration.none;
	        this.decorations = [];
	        // Track a minimum width for the editor. When measuring sizes in
	        // checkLayout, this is updated to point at the width of a given
	        // element and its extent in the document. When a change happens in
	        // that range, these are reset. That way, once we've seen a
	        // line/element of a given length, we keep the editor wide enough to
	        // fit at least that element, until it is changed, at which point we
	        // forget it again.
	        this.minWidth = 0;
	        this.minWidthFrom = 0;
	        this.minWidthTo = 0;
	        // Track whether the DOM selection was set in a lossy way, so that
	        // we don't mess it up when reading it back it
	        this.impreciseAnchor = null;
	        this.impreciseHead = null;
	        this.setDOM(view.contentDOM);
	        this.children = [new LineView];
	        this.children[0].setParent(this);
	        this.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], this.updateDeco(), 0);
	    }
	    get root() { return this.view.root; }
	    get editorView() { return this.view; }
	    get length() { return this.view.state.doc.length; }
	    // Update the document view to a given state. scrollIntoView can be
	    // used as a hint to compute a new viewport that includes that
	    // position, if we know the editor is going to scroll that position
	    // into view.
	    update(update) {
	        let changedRanges = update.changedRanges;
	        if (this.minWidth > 0 && changedRanges.length) {
	            if (!changedRanges.every(({ fromA, toA }) => toA < this.minWidthFrom || fromA > this.minWidthTo)) {
	                this.minWidth = 0;
	            }
	            else {
	                this.minWidthFrom = update.changes.mapPos(this.minWidthFrom, 1);
	                this.minWidthTo = update.changes.mapPos(this.minWidthTo, 1);
	            }
	        }
	        if (this.view.inputState.composing < 0)
	            this.compositionDeco = Decoration.none;
	        else if (update.transactions.length)
	            this.compositionDeco = computeCompositionDeco(this.view, update.changes);
	        // When the DOM nodes around the selection are moved to another
	        // parent, Chrome sometimes reports a different selection through
	        // getSelection than the one that it actually shows to the user.
	        // This forces a selection update when lines are joined to work
	        // around that. Issue #54
	        let forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && update &&
	            update.state.doc.lines != update.startState.doc.lines;
	        let prevDeco = this.decorations, deco = this.updateDeco();
	        let decoDiff = findChangedDeco(prevDeco, deco, update.changes);
	        changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
	        let pointerSel = update.transactions.some(tr => tr.isUserEvent("select.pointer"));
	        if (this.dirty == 0 /* Not */ && changedRanges.length == 0 &&
	            !(update.flags & 4 /* Viewport */) &&
	            update.state.selection.main.from >= this.view.viewport.from &&
	            update.state.selection.main.to <= this.view.viewport.to) {
	            this.updateSelection(forceSelection, pointerSel);
	            return false;
	        }
	        else {
	            this.updateInner(changedRanges, deco, update.startState.doc.length, forceSelection, pointerSel);
	            return true;
	        }
	    }
	    // Used both by update and checkLayout do perform the actual DOM
	    // update
	    updateInner(changes, deco, oldLength, forceSelection = false, pointerSel = false) {
	        this.updateChildren(changes, deco, oldLength);
	        let { observer } = this.view;
	        observer.ignore(() => {
	            // Lock the height during redrawing, since Chrome sometimes
	            // messes with the scroll position during DOM mutation (though
	            // no relayout is triggered and I cannot imagine how it can
	            // recompute the scroll position without a layout)
	            this.dom.style.height = this.view.viewState.domHeight + "px";
	            this.dom.style.minWidth = this.minWidth ? this.minWidth + "px" : "";
	            // Chrome will sometimes, when DOM mutations occur directly
	            // around the selection, get confused and report a different
	            // selection from the one it displays (issue #218). This tries
	            // to detect that situation.
	            let track = browser.chrome || browser.ios ? { node: observer.selectionRange.focusNode, written: false } : undefined;
	            this.sync(track);
	            this.dirty = 0 /* Not */;
	            if (track && (track.written || observer.selectionRange.focusNode != track.node))
	                forceSelection = true;
	            this.updateSelection(forceSelection, pointerSel);
	            this.dom.style.height = "";
	        });
	        let gaps = [];
	        if (this.view.viewport.from || this.view.viewport.to < this.view.state.doc.length)
	            for (let child of this.children)
	                if (child instanceof BlockWidgetView && child.widget instanceof BlockGapWidget)
	                    gaps.push(child.dom);
	        observer.updateGaps(gaps);
	    }
	    updateChildren(changes, deco, oldLength) {
	        let cursor = this.childCursor(oldLength);
	        for (let i = changes.length - 1;; i--) {
	            let next = i >= 0 ? changes[i] : null;
	            if (!next)
	                break;
	            let { fromA, toA, fromB, toB } = next;
	            let { content, breakAtStart, openStart, openEnd } = ContentBuilder.build(this.view.state.doc, fromB, toB, deco);
	            let { i: toI, off: toOff } = cursor.findPos(toA, 1);
	            let { i: fromI, off: fromOff } = cursor.findPos(fromA, -1);
	            this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
	        }
	    }
	    replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
	        let before = this.children[fromI], last = content.length ? content[content.length - 1] : null;
	        let breakAtEnd = last ? last.breakAfter : breakAtStart;
	        // Change within a single line
	        if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 &&
	            before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd))
	            return;
	        let after = this.children[toI];
	        // Make sure the end of the line after the update is preserved in `after`
	        if (toOff < after.length) {
	            // If we're splitting a line, separate part of the start line to
	            // avoid that being mangled when updating the start line.
	            if (fromI == toI) {
	                after = after.split(toOff);
	                toOff = 0;
	            }
	            // If the element after the replacement should be merged with
	            // the last replacing element, update `content`
	            if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
	                content[content.length - 1] = after;
	            }
	            else {
	                // Remove the start of the after element, if necessary, and
	                // add it to `content`.
	                if (toOff)
	                    after.merge(0, toOff, null, false, 0, openEnd);
	                content.push(after);
	            }
	        }
	        else if (after.breakAfter) {
	            // The element at `toI` is entirely covered by this range.
	            // Preserve its line break, if any.
	            if (last)
	                last.breakAfter = 1;
	            else
	                breakAtStart = 1;
	        }
	        // Since we've handled the next element from the current elements
	        // now, make sure `toI` points after that.
	        toI++;
	        before.breakAfter = breakAtStart;
	        if (fromOff > 0) {
	            if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
	                before.breakAfter = content.shift().breakAfter;
	            }
	            else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
	                before.merge(fromOff, before.length, null, false, openStart, 0);
	            }
	            fromI++;
	        }
	        // Try to merge widgets on the boundaries of the replacement
	        while (fromI < toI && content.length) {
	            if (this.children[toI - 1].match(content[content.length - 1]))
	                toI--, content.pop();
	            else if (this.children[fromI].match(content[0]))
	                fromI++, content.shift();
	            else
	                break;
	        }
	        if (fromI < toI || content.length)
	            this.replaceChildren(fromI, toI, content);
	    }
	    // Sync the DOM selection to this.state.selection
	    updateSelection(force = false, fromPointer = false) {
	        if (!(fromPointer || this.mayControlSelection()) ||
	            browser.ios && this.view.inputState.rapidCompositionStart)
	            return;
	        let main = this.view.state.selection.main;
	        // FIXME need to handle the case where the selection falls inside a block range
	        let anchor = this.domAtPos(main.anchor);
	        let head = main.empty ? anchor : this.domAtPos(main.head);
	        // Always reset on Firefox when next to an uneditable node to
	        // avoid invisible cursor bugs (#111)
	        if (browser.gecko && main.empty && betweenUneditable(anchor)) {
	            let dummy = document.createTextNode("");
	            this.view.observer.ignore(() => anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null));
	            anchor = head = new DOMPos(dummy, 0);
	            force = true;
	        }
	        let domSel = this.view.observer.selectionRange;
	        // If the selection is already here, or in an equivalent position, don't touch it
	        if (force || !domSel.focusNode ||
	            !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) ||
	            !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
	            this.view.observer.ignore(() => {
	                let rawSel = getSelection(this.root);
	                if (main.empty) {
	                    // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
	                    if (browser.gecko) {
	                        let nextTo = nextToUneditable(anchor.node, anchor.offset);
	                        if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
	                            let text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
	                            if (text)
	                                anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
	                        }
	                    }
	                    rawSel.collapse(anchor.node, anchor.offset);
	                    if (main.bidiLevel != null && domSel.cursorBidiLevel != null)
	                        domSel.cursorBidiLevel = main.bidiLevel;
	                }
	                else if (rawSel.extend) {
	                    // Selection.extend can be used to create an 'inverted' selection
	                    // (one where the focus is before the anchor), but not all
	                    // browsers support it yet.
	                    rawSel.collapse(anchor.node, anchor.offset);
	                    rawSel.extend(head.node, head.offset);
	                }
	                else {
	                    // Primitive (IE) way
	                    let range = document.createRange();
	                    if (main.anchor > main.head)
	                        [anchor, head] = [head, anchor];
	                    range.setEnd(head.node, head.offset);
	                    range.setStart(anchor.node, anchor.offset);
	                    rawSel.removeAllRanges();
	                    rawSel.addRange(range);
	                }
	            });
	            this.view.observer.setSelectionRange(anchor, head);
	        }
	        this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
	        this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
	    }
	    enforceCursorAssoc() {
	        if (this.view.composing)
	            return;
	        let cursor = this.view.state.selection.main;
	        let sel = getSelection(this.root);
	        if (!cursor.empty || !cursor.assoc || !sel.modify)
	            return;
	        let line = LineView.find(this, cursor.head);
	        if (!line)
	            return;
	        let lineStart = line.posAtStart;
	        if (cursor.head == lineStart || cursor.head == lineStart + line.length)
	            return;
	        let before = this.coordsAt(cursor.head, -1), after = this.coordsAt(cursor.head, 1);
	        if (!before || !after || before.bottom > after.top)
	            return;
	        let dom = this.domAtPos(cursor.head + cursor.assoc);
	        sel.collapse(dom.node, dom.offset);
	        sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
	    }
	    mayControlSelection() {
	        return this.view.state.facet(editable) ? this.root.activeElement == this.dom
	            : hasSelection(this.dom, this.view.observer.selectionRange);
	    }
	    nearest(dom) {
	        for (let cur = dom; cur;) {
	            let domView = ContentView.get(cur);
	            if (domView && domView.rootView == this)
	                return domView;
	            cur = cur.parentNode;
	        }
	        return null;
	    }
	    posFromDOM(node, offset) {
	        let view = this.nearest(node);
	        if (!view)
	            throw new RangeError("Trying to find position for a DOM position outside of the document");
	        return view.localPosFromDOM(node, offset) + view.posAtStart;
	    }
	    domAtPos(pos) {
	        let { i, off } = this.childCursor().findPos(pos, -1);
	        for (; i < this.children.length - 1;) {
	            let child = this.children[i];
	            if (off < child.length || child instanceof LineView)
	                break;
	            i++;
	            off = 0;
	        }
	        return this.children[i].domAtPos(off);
	    }
	    coordsAt(pos, side) {
	        for (let off = this.length, i = this.children.length - 1;; i--) {
	            let child = this.children[i], start = off - child.breakAfter - child.length;
	            if (pos > start ||
	                (pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter &&
	                    (!i || side == 2 || this.children[i - 1].breakAfter ||
	                        (this.children[i - 1].type == BlockType.WidgetBefore && side > -2))))
	                return child.coordsAt(pos - start, side);
	            off = start;
	        }
	    }
	    measureVisibleLineHeights() {
	        let result = [], { from, to } = this.view.viewState.viewport;
	        let minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
	        for (let pos = 0, i = 0; i < this.children.length; i++) {
	            let child = this.children[i], end = pos + child.length;
	            if (end > to)
	                break;
	            if (pos >= from) {
	                result.push(child.dom.getBoundingClientRect().height);
	                let width = child.dom.scrollWidth;
	                if (width > minWidth) {
	                    this.minWidth = minWidth = width;
	                    this.minWidthFrom = pos;
	                    this.minWidthTo = end;
	                }
	            }
	            pos = end + child.breakAfter;
	        }
	        return result;
	    }
	    measureTextSize() {
	        for (let child of this.children) {
	            if (child instanceof LineView) {
	                let measure = child.measureTextSize();
	                if (measure)
	                    return measure;
	            }
	        }
	        // If no workable line exists, force a layout of a measurable element
	        let dummy = document.createElement("div"), lineHeight, charWidth;
	        dummy.className = "cm-line";
	        dummy.textContent = "abc def ghi jkl mno pqr stu";
	        this.view.observer.ignore(() => {
	            this.dom.appendChild(dummy);
	            let rect = clientRectsFor(dummy.firstChild)[0];
	            lineHeight = dummy.getBoundingClientRect().height;
	            charWidth = rect ? rect.width / 27 : 7;
	            dummy.remove();
	        });
	        return { lineHeight, charWidth };
	    }
	    childCursor(pos = this.length) {
	        // Move back to start of last element when possible, so that
	        // `ChildCursor.findPos` doesn't have to deal with the edge case
	        // of being after the last element.
	        let i = this.children.length;
	        if (i)
	            pos -= this.children[--i].length;
	        return new ChildCursor(this.children, pos, i);
	    }
	    computeBlockGapDeco() {
	        let deco = [], vs = this.view.viewState;
	        for (let pos = 0, i = 0;; i++) {
	            let next = i == vs.viewports.length ? null : vs.viewports[i];
	            let end = next ? next.from - 1 : this.length;
	            if (end > pos) {
	                let height = vs.lineAt(end, 0).bottom - vs.lineAt(pos, 0).top;
	                deco.push(Decoration.replace({ widget: new BlockGapWidget(height), block: true, inclusive: true }).range(pos, end));
	            }
	            if (!next)
	                break;
	            pos = next.to + 1;
	        }
	        return Decoration.set(deco);
	    }
	    updateDeco() {
	        return this.decorations = [
	            ...this.view.pluginField(PluginField.decorations),
	            ...this.view.state.facet(decorations),
	            this.compositionDeco,
	            this.computeBlockGapDeco(),
	            this.view.viewState.lineGapDeco
	        ];
	    }
	    scrollRangeIntoView(range) {
	        let rect = this.coordsAt(range.head, range.empty ? range.assoc : range.head > range.anchor ? -1 : 1), other;
	        if (!rect)
	            return;
	        if (!range.empty && (other = this.coordsAt(range.anchor, range.anchor > range.head ? -1 : 1)))
	            rect = { left: Math.min(rect.left, other.left), top: Math.min(rect.top, other.top),
	                right: Math.max(rect.right, other.right), bottom: Math.max(rect.bottom, other.bottom) };
	        let mLeft = 0, mRight = 0, mTop = 0, mBottom = 0;
	        for (let margins of this.view.pluginField(PluginField.scrollMargins))
	            if (margins) {
	                let { left, right, top, bottom } = margins;
	                if (left != null)
	                    mLeft = Math.max(mLeft, left);
	                if (right != null)
	                    mRight = Math.max(mRight, right);
	                if (top != null)
	                    mTop = Math.max(mTop, top);
	                if (bottom != null)
	                    mBottom = Math.max(mBottom, bottom);
	            }
	        scrollRectIntoView(this.dom, {
	            left: rect.left - mLeft, top: rect.top - mTop,
	            right: rect.right + mRight, bottom: rect.bottom + mBottom
	        }, range.head < range.anchor ? -1 : 1);
	    }
	}
	function betweenUneditable(pos) {
	    return pos.node.nodeType == 1 && pos.node.firstChild &&
	        (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") &&
	        (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
	}
	class BlockGapWidget extends WidgetType {
	    constructor(height) {
	        super();
	        this.height = height;
	    }
	    toDOM() {
	        let elt = document.createElement("div");
	        this.updateDOM(elt);
	        return elt;
	    }
	    eq(other) { return other.height == this.height; }
	    updateDOM(elt) {
	        elt.style.height = this.height + "px";
	        return true;
	    }
	    get estimatedHeight() { return this.height; }
	}
	function computeCompositionDeco(view, changes) {
	    let sel = view.observer.selectionRange;
	    let textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
	    if (!textNode)
	        return Decoration.none;
	    let cView = view.docView.nearest(textNode);
	    let from, to, topNode = textNode;
	    if (cView instanceof InlineView) {
	        while (cView.parent instanceof InlineView)
	            cView = cView.parent;
	        from = cView.posAtStart;
	        to = from + cView.length;
	        topNode = cView.dom;
	    }
	    else if (cView instanceof LineView) {
	        while (topNode.parentNode != cView.dom)
	            topNode = topNode.parentNode;
	        let prev = topNode.previousSibling;
	        while (prev && !ContentView.get(prev))
	            prev = prev.previousSibling;
	        from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
	    }
	    else {
	        return Decoration.none;
	    }
	    let newFrom = changes.mapPos(from, 1), newTo = Math.max(newFrom, changes.mapPos(to, -1));
	    let text = textNode.nodeValue, { state } = view;
	    if (newTo - newFrom < text.length) {
	        if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text)
	            newTo = newFrom + text.length;
	        else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text)
	            newFrom = newTo - text.length;
	        else
	            return Decoration.none;
	    }
	    else if (state.sliceDoc(newFrom, newTo) != text) {
	        return Decoration.none;
	    }
	    return Decoration.set(Decoration.replace({ widget: new CompositionWidget(topNode, textNode) }).range(newFrom, newTo));
	}
	class CompositionWidget extends WidgetType {
	    constructor(top, text) {
	        super();
	        this.top = top;
	        this.text = text;
	    }
	    eq(other) { return this.top == other.top && this.text == other.text; }
	    toDOM() { return this.top; }
	    ignoreEvent() { return false; }
	    get customView() { return CompositionView; }
	}
	function nearbyTextNode(node, offset, side) {
	    for (;;) {
	        if (node.nodeType == 3)
	            return node;
	        if (node.nodeType == 1 && offset > 0 && side <= 0) {
	            node = node.childNodes[offset - 1];
	            offset = maxOffset(node);
	        }
	        else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
	            node = node.childNodes[offset];
	            offset = 0;
	        }
	        else {
	            return null;
	        }
	    }
	}
	function nextToUneditable(node, offset) {
	    if (node.nodeType != 1)
	        return 0;
	    return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) |
	        (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
	}
	class DecorationComparator$1 {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange(from, to) { addRange(from, to, this.changes); }
	    comparePoint(from, to) { addRange(from, to, this.changes); }
	}
	function findChangedDeco(a, b, diff) {
	    let comp = new DecorationComparator$1;
	    RangeSet.compare(a, b, diff, comp);
	    return comp.changes;
	}

	/**
	Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
	*/
	var Direction = /*@__PURE__*/(function (Direction) {
	    // (These are chosen to match the base levels, in bidi algorithm
	    // terms, of spans in that direction.)
	    /**
	    Left-to-right.
	    */
	    Direction[Direction["LTR"] = 0] = "LTR";
	    /**
	    Right-to-left.
	    */
	    Direction[Direction["RTL"] = 1] = "RTL";
	return Direction})(Direction || (Direction = {}));
	const LTR = Direction.LTR, RTL = Direction.RTL;
	// Decode a string with each type encoded as log2(type)
	function dec(str) {
	    let result = [];
	    for (let i = 0; i < str.length; i++)
	        result.push(1 << +str[i]);
	    return result;
	}
	// Character types for codepoints 0 to 0xf8
	const LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
	// Character types for codepoints 0x600 to 0x6f9
	const ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
	const Brackets = /*@__PURE__*/Object.create(null), BracketStack = [];
	// There's a lot more in
	// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
	// which are left out to keep code size down.
	for (let p of ["()", "[]", "{}"]) {
	    let l = /*@__PURE__*/p.charCodeAt(0), r = /*@__PURE__*/p.charCodeAt(1);
	    Brackets[l] = r;
	    Brackets[r] = -l;
	}
	function charType(ch) {
	    return ch <= 0xf7 ? LowTypes[ch] :
	        0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ :
	            0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] :
	                0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ :
	                    0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ :
	                        ch == 0x200c ? 256 /* NI */ : 1 /* L */;
	}
	const BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
	/**
	Represents a contiguous range of text that has a single direction
	(as in left-to-right or right-to-left).
	*/
	class BidiSpan {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The start of the span (relative to the start of the line).
	    */
	    from, 
	    /**
	    The end of the span.
	    */
	    to, 
	    /**
	    The ["bidi
	    level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
	    of the span (in this context, 0 means
	    left-to-right, 1 means right-to-left, 2 means left-to-right
	    number inside right-to-left text).
	    */
	    level) {
	        this.from = from;
	        this.to = to;
	        this.level = level;
	    }
	    /**
	    The direction of this span.
	    */
	    get dir() { return this.level % 2 ? RTL : LTR; }
	    /**
	    @internal
	    */
	    side(end, dir) { return (this.dir == dir) == end ? this.to : this.from; }
	    /**
	    @internal
	    */
	    static find(order, index, level, assoc) {
	        let maybe = -1;
	        for (let i = 0; i < order.length; i++) {
	            let span = order[i];
	            if (span.from <= index && span.to >= index) {
	                if (span.level == level)
	                    return i;
	                // When multiple spans match, if assoc != 0, take the one that
	                // covers that side, otherwise take the one with the minimum
	                // level.
	                if (maybe < 0 || (assoc != 0 ? (assoc < 0 ? span.from < index : span.to > index) : order[maybe].level > span.level))
	                    maybe = i;
	            }
	        }
	        if (maybe < 0)
	            throw new RangeError("Index out of range");
	        return maybe;
	    }
	}
	// Reused array of character types
	const types = [];
	function computeOrder(line, direction) {
	    let len = line.length, outerType = direction == LTR ? 1 /* L */ : 2 /* R */, oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
	    if (!line || outerType == 1 /* L */ && !BidiRE.test(line))
	        return trivialOrder(len);
	    // W1. Examine each non-spacing mark (NSM) in the level run, and
	    // change the type of the NSM to the type of the previous
	    // character. If the NSM is at the start of the level run, it will
	    // get the type of sor.
	    // W2. Search backwards from each instance of a European number
	    // until the first strong type (R, L, AL, or sor) is found. If an
	    // AL is found, change the type of the European number to Arabic
	    // number.
	    // W3. Change all ALs to R.
	    // (Left after this: L, R, EN, AN, ET, CS, NI)
	    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
	        let type = charType(line.charCodeAt(i));
	        if (type == 512 /* NSM */)
	            type = prev;
	        else if (type == 8 /* EN */ && prevStrong == 4 /* AL */)
	            type = 16 /* AN */;
	        types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
	        if (type & 7 /* Strong */)
	            prevStrong = type;
	        prev = type;
	    }
	    // W5. A sequence of European terminators adjacent to European
	    // numbers changes to all European numbers.
	    // W6. Otherwise, separators and terminators change to Other
	    // Neutral.
	    // W7. Search backwards from each instance of a European number
	    // until the first strong type (R, L, or sor) is found. If an L is
	    // found, then change the type of the European number to L.
	    // (Left after this: L, R, EN+AN, NI)
	    for (let i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
	        let type = types[i];
	        if (type == 128 /* CS */) {
	            if (i < len - 1 && prev == types[i + 1] && (prev & 24 /* Num */))
	                type = types[i] = prev;
	            else
	                types[i] = 256 /* NI */;
	        }
	        else if (type == 64 /* ET */) {
	            let end = i + 1;
	            while (end < len && types[end] == 64 /* ET */)
	                end++;
	            let replace = (i && prev == 8 /* EN */) || (end < len && types[end] == 8 /* EN */) ? (prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */) : 256 /* NI */;
	            for (let j = i; j < end; j++)
	                types[j] = replace;
	            i = end - 1;
	        }
	        else if (type == 8 /* EN */ && prevStrong == 1 /* L */) {
	            types[i] = 1 /* L */;
	        }
	        prev = type;
	        if (type & 7 /* Strong */)
	            prevStrong = type;
	    }
	    // N0. Process bracket pairs in an isolating run sequence
	    // sequentially in the logical order of the text positions of the
	    // opening paired brackets using the logic given below. Within this
	    // scope, bidirectional types EN and AN are treated as R.
	    for (let i = 0, sI = 0, context = 0, ch, br, type; i < len; i++) {
	        // Keeps [startIndex, type, strongSeen] triples for each open
	        // bracket on BracketStack.
	        if (br = Brackets[ch = line.charCodeAt(i)]) {
	            if (br < 0) { // Closing bracket
	                for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
	                    if (BracketStack[sJ + 1] == -br) {
	                        let flags = BracketStack[sJ + 2];
	                        let type = (flags & 2 /* EmbedInside */) ? outerType :
	                            !(flags & 4 /* OppositeInside */) ? 0 :
	                                (flags & 1 /* OppositeBefore */) ? oppositeType : outerType;
	                        if (type)
	                            types[i] = types[BracketStack[sJ]] = type;
	                        sI = sJ;
	                        break;
	                    }
	                }
	            }
	            else if (BracketStack.length == 189 /* MaxDepth */) {
	                break;
	            }
	            else {
	                BracketStack[sI++] = i;
	                BracketStack[sI++] = ch;
	                BracketStack[sI++] = context;
	            }
	        }
	        else if ((type = types[i]) == 2 /* R */ || type == 1 /* L */) {
	            let embed = type == outerType;
	            context = embed ? 0 : 1 /* OppositeBefore */;
	            for (let sJ = sI - 3; sJ >= 0; sJ -= 3) {
	                let cur = BracketStack[sJ + 2];
	                if (cur & 2 /* EmbedInside */)
	                    break;
	                if (embed) {
	                    BracketStack[sJ + 2] |= 2 /* EmbedInside */;
	                }
	                else {
	                    if (cur & 4 /* OppositeInside */)
	                        break;
	                    BracketStack[sJ + 2] |= 4 /* OppositeInside */;
	                }
	            }
	        }
	    }
	    // N1. A sequence of neutrals takes the direction of the
	    // surrounding strong text if the text on both sides has the same
	    // direction. European and Arabic numbers act as if they were R in
	    // terms of their influence on neutrals. Start-of-level-run (sor)
	    // and end-of-level-run (eor) are used at level run boundaries.
	    // N2. Any remaining neutrals take the embedding direction.
	    // (Left after this: L, R, EN+AN)
	    for (let i = 0; i < len; i++) {
	        if (types[i] == 256 /* NI */) {
	            let end = i + 1;
	            while (end < len && types[end] == 256 /* NI */)
	                end++;
	            let beforeL = (i ? types[i - 1] : outerType) == 1 /* L */;
	            let afterL = (end < len ? types[end] : outerType) == 1 /* L */;
	            let replace = beforeL == afterL ? (beforeL ? 1 /* L */ : 2 /* R */) : outerType;
	            for (let j = i; j < end; j++)
	                types[j] = replace;
	            i = end - 1;
	        }
	    }
	    // Here we depart from the documented algorithm, in order to avoid
	    // building up an actual levels array. Since there are only three
	    // levels (0, 1, 2) in an implementation that doesn't take
	    // explicit embedding into account, we can build up the order on
	    // the fly, without following the level-based algorithm.
	    let order = [];
	    if (outerType == 1 /* L */) {
	        for (let i = 0; i < len;) {
	            let start = i, rtl = types[i++] != 1 /* L */;
	            while (i < len && rtl == (types[i] != 1 /* L */))
	                i++;
	            if (rtl) {
	                for (let j = i; j > start;) {
	                    let end = j, l = types[--j] != 2 /* R */;
	                    while (j > start && l == (types[j - 1] != 2 /* R */))
	                        j--;
	                    order.push(new BidiSpan(j, end, l ? 2 : 1));
	                }
	            }
	            else {
	                order.push(new BidiSpan(start, i, 0));
	            }
	        }
	    }
	    else {
	        for (let i = 0; i < len;) {
	            let start = i, rtl = types[i++] == 2 /* R */;
	            while (i < len && rtl == (types[i] == 2 /* R */))
	                i++;
	            order.push(new BidiSpan(start, i, rtl ? 1 : 2));
	        }
	    }
	    return order;
	}
	function trivialOrder(length) {
	    return [new BidiSpan(0, length, 0)];
	}
	let movedOver = "";
	function moveVisually(line, order, dir, start, forward) {
	    var _a;
	    let startIndex = start.head - line.from, spanI = -1;
	    if (startIndex == 0) {
	        if (!forward || !line.length)
	            return null;
	        if (order[0].level != dir) {
	            startIndex = order[0].side(false, dir);
	            spanI = 0;
	        }
	    }
	    else if (startIndex == line.length) {
	        if (forward)
	            return null;
	        let last = order[order.length - 1];
	        if (last.level != dir) {
	            startIndex = last.side(true, dir);
	            spanI = order.length - 1;
	        }
	    }
	    if (spanI < 0)
	        spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
	    let span = order[spanI];
	    // End of span. (But not end of line--that was checked for above.)
	    if (startIndex == span.side(forward, dir)) {
	        span = order[spanI += forward ? 1 : -1];
	        startIndex = span.side(!forward, dir);
	    }
	    let indexForward = forward == (span.dir == dir);
	    let nextIndex = findClusterBreak(line.text, startIndex, indexForward);
	    movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
	    if (nextIndex != span.side(forward, dir))
	        return EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
	    let nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
	    if (!nextSpan && span.level != dir)
	        return EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
	    if (nextSpan && nextSpan.level < span.level)
	        return EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
	    return EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
	}

	function groupAt(state, pos, bias = 1) {
	    let categorize = state.charCategorizer(pos);
	    let line = state.doc.lineAt(pos), linePos = pos - line.from;
	    if (line.length == 0)
	        return EditorSelection.cursor(pos);
	    if (linePos == 0)
	        bias = 1;
	    else if (linePos == line.length)
	        bias = -1;
	    let from = linePos, to = linePos;
	    if (bias < 0)
	        from = findClusterBreak(line.text, linePos, false);
	    else
	        to = findClusterBreak(line.text, linePos);
	    let cat = categorize(line.text.slice(from, to));
	    while (from > 0) {
	        let prev = findClusterBreak(line.text, from, false);
	        if (categorize(line.text.slice(prev, from)) != cat)
	            break;
	        from = prev;
	    }
	    while (to < line.length) {
	        let next = findClusterBreak(line.text, to);
	        if (categorize(line.text.slice(to, next)) != cat)
	            break;
	        to = next;
	    }
	    return EditorSelection.range(from + line.from, to + line.from);
	}
	// Search the DOM for the {node, offset} position closest to the given
	// coordinates. Very inefficient and crude, but can usually be avoided
	// by calling caret(Position|Range)FromPoint instead.
	function getdx(x, rect) {
	    return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
	}
	function getdy(y, rect) {
	    return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
	}
	function yOverlap(a, b) {
	    return a.top < b.bottom - 1 && a.bottom > b.top + 1;
	}
	function upTop(rect, top) {
	    return top < rect.top ? { top, left: rect.left, right: rect.right, bottom: rect.bottom } : rect;
	}
	function upBot(rect, bottom) {
	    return bottom > rect.bottom ? { top: rect.top, left: rect.left, right: rect.right, bottom } : rect;
	}
	function domPosAtCoords(parent, x, y) {
	    let closest, closestRect, closestX, closestY;
	    let above, below, aboveRect, belowRect;
	    for (let child = parent.firstChild; child; child = child.nextSibling) {
	        let rects = clientRectsFor(child);
	        for (let i = 0; i < rects.length; i++) {
	            let rect = rects[i];
	            if (closestRect && yOverlap(closestRect, rect))
	                rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
	            let dx = getdx(x, rect), dy = getdy(y, rect);
	            if (dx == 0 && dy == 0)
	                return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
	            if (!closest || closestY > dy || closestY == dy && closestX > dx) {
	                closest = child;
	                closestRect = rect;
	                closestX = dx;
	                closestY = dy;
	            }
	            if (dx == 0) {
	                if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
	                    above = child;
	                    aboveRect = rect;
	                }
	                else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
	                    below = child;
	                    belowRect = rect;
	                }
	            }
	            else if (aboveRect && yOverlap(aboveRect, rect)) {
	                aboveRect = upBot(aboveRect, rect.bottom);
	            }
	            else if (belowRect && yOverlap(belowRect, rect)) {
	                belowRect = upTop(belowRect, rect.top);
	            }
	        }
	    }
	    if (aboveRect && aboveRect.bottom >= y) {
	        closest = above;
	        closestRect = aboveRect;
	    }
	    else if (belowRect && belowRect.top <= y) {
	        closest = below;
	        closestRect = belowRect;
	    }
	    if (!closest)
	        return { node: parent, offset: 0 };
	    let clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
	    if (closest.nodeType == 3)
	        return domPosInText(closest, clipX, y);
	    if (!closestX && closest.contentEditable == "true")
	        return domPosAtCoords(closest, clipX, y);
	    let offset = Array.prototype.indexOf.call(parent.childNodes, closest) +
	        (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
	    return { node: parent, offset };
	}
	function domPosInText(node, x, y) {
	    let len = node.nodeValue.length;
	    let closestOffset = -1, closestDY = 1e9, generalSide = 0;
	    for (let i = 0; i < len; i++) {
	        let rects = textRange(node, i, i + 1).getClientRects();
	        for (let j = 0; j < rects.length; j++) {
	            let rect = rects[j];
	            if (rect.top == rect.bottom)
	                continue;
	            if (!generalSide)
	                generalSide = x - rect.left;
	            let dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
	            if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
	                let right = x >= (rect.left + rect.right) / 2, after = right;
	                if (browser.chrome || browser.gecko) {
	                    // Check for RTL on browsers that support getting client
	                    // rects for empty ranges.
	                    let rectBefore = textRange(node, i).getBoundingClientRect();
	                    if (rectBefore.left == rect.right)
	                        after = !right;
	                }
	                if (dy <= 0)
	                    return { node, offset: i + (after ? 1 : 0) };
	                closestOffset = i + (after ? 1 : 0);
	                closestDY = dy;
	            }
	        }
	    }
	    return { node, offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0 };
	}
	function posAtCoords(view, { x, y }, precise, bias = -1) {
	    let content = view.contentDOM.getBoundingClientRect(), block;
	    let halfLine = view.defaultLineHeight / 2;
	    for (let bounced = false;;) {
	        block = view.blockAtHeight(y, content.top);
	        if (block.top > y || block.bottom < y) {
	            bias = block.top > y ? -1 : 1;
	            y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
	            if (bounced)
	                return precise ? null : 0;
	            else
	                bounced = true;
	        }
	        if (block.type == BlockType.Text)
	            break;
	        y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
	    }
	    let lineStart = block.from;
	    // Clip x to the viewport sides
	    x = Math.max(content.left + 1, Math.min(content.right - 1, x));
	    // If this is outside of the rendered viewport, we can't determine a position
	    if (lineStart < view.viewport.from)
	        return view.viewport.from == 0 ? 0 : posAtCoordsImprecise(view, content, block, x, y);
	    if (lineStart > view.viewport.to)
	        return view.viewport.to == view.state.doc.length ? view.state.doc.length : posAtCoordsImprecise(view, content, block, x, y);
	    // Prefer ShadowRootOrDocument.elementFromPoint if present, fall back to document if not
	    let doc = view.dom.ownerDocument;
	    let element = (view.root.elementFromPoint ? view.root : doc).elementFromPoint(x, y);
	    // There's visible editor content under the point, so we can try
	    // using caret(Position|Range)FromPoint as a shortcut
	    let node, offset = -1;
	    if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
	        if (doc.caretPositionFromPoint) {
	            let pos = doc.caretPositionFromPoint(x, y);
	            if (pos)
	                ({ offsetNode: node, offset } = pos);
	        }
	        else if (doc.caretRangeFromPoint) {
	            let range = doc.caretRangeFromPoint(x, y);
	            if (range) {
	                ({ startContainer: node, startOffset: offset } = range);
	                if (browser.safari && isSuspiciousCaretResult(node, offset, x))
	                    node = undefined;
	            }
	        }
	    }
	    // No luck, do our own (potentially expensive) search
	    if (!node || !view.docView.dom.contains(node)) {
	        let line = LineView.find(view.docView, lineStart);
	        ({ node, offset } = domPosAtCoords(line.dom, x, y));
	    }
	    return view.docView.posFromDOM(node, offset);
	}
	function posAtCoordsImprecise(view, contentRect, block, x, y) {
	    let into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
	    if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
	        let line = Math.floor((y - block.top) / view.defaultLineHeight);
	        into += line * view.viewState.heightOracle.lineLength;
	    }
	    let content = view.state.sliceDoc(block.from, block.to);
	    return block.from + findColumn(content, into, view.state.tabSize);
	}
	// In case of a high line height, Safari's caretRangeFromPoint treats
	// the space between lines as belonging to the last character of the
	// line before. This is used to detect such a result so that it can be
	// ignored (issue #401).
	function isSuspiciousCaretResult(node, offset, x) {
	    let len;
	    if (node.nodeType != 3 || offset != (len = node.nodeValue.length))
	        return false;
	    for (let next = node.nextSibling; next; next = next.nextSibling)
	        if (next.nodeType != 1 || next.nodeName != "BR")
	            return false;
	    return textRange(node, len - 1, len).getBoundingClientRect().left > x;
	}
	function moveToLineBoundary(view, start, forward, includeWrap) {
	    let line = view.state.doc.lineAt(start.head);
	    let coords = !includeWrap || !view.lineWrapping ? null
	        : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
	    if (coords) {
	        let editorRect = view.dom.getBoundingClientRect();
	        let pos = view.posAtCoords({ x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
	            y: (coords.top + coords.bottom) / 2 });
	        if (pos != null)
	            return EditorSelection.cursor(pos, forward ? -1 : 1);
	    }
	    let lineView = LineView.find(view.docView, start.head);
	    let end = lineView ? (forward ? lineView.posAtEnd : lineView.posAtStart) : (forward ? line.to : line.from);
	    return EditorSelection.cursor(end, forward ? -1 : 1);
	}
	function moveByChar(view, start, forward, by) {
	    let line = view.state.doc.lineAt(start.head), spans = view.bidiSpans(line);
	    for (let cur = start, check = null;;) {
	        let next = moveVisually(line, spans, view.textDirection, cur, forward), char = movedOver;
	        if (!next) {
	            if (line.number == (forward ? view.state.doc.lines : 1))
	                return cur;
	            char = "\n";
	            line = view.state.doc.line(line.number + (forward ? 1 : -1));
	            spans = view.bidiSpans(line);
	            next = EditorSelection.cursor(forward ? line.from : line.to);
	        }
	        if (!check) {
	            if (!by)
	                return next;
	            check = by(char);
	        }
	        else if (!check(char)) {
	            return cur;
	        }
	        cur = next;
	    }
	}
	function byGroup(view, pos, start) {
	    let categorize = view.state.charCategorizer(pos);
	    let cat = categorize(start);
	    return (next) => {
	        let nextCat = categorize(next);
	        if (cat == CharCategory.Space)
	            cat = nextCat;
	        return cat == nextCat;
	    };
	}
	function moveVertically(view, start, forward, distance) {
	    let startPos = start.head, dir = forward ? 1 : -1;
	    if (startPos == (forward ? view.state.doc.length : 0))
	        return EditorSelection.cursor(startPos);
	    let goal = start.goalColumn, startY;
	    let rect = view.contentDOM.getBoundingClientRect();
	    let startCoords = view.coordsAtPos(startPos);
	    if (startCoords) {
	        if (goal == null)
	            goal = startCoords.left - rect.left;
	        startY = dir < 0 ? startCoords.top : startCoords.bottom;
	    }
	    else {
	        let line = view.viewState.lineAt(startPos, view.dom.getBoundingClientRect().top);
	        if (goal == null)
	            goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
	        startY = dir < 0 ? line.top : line.bottom;
	    }
	    let resolvedGoal = rect.left + goal;
	    let dist = distance !== null && distance !== void 0 ? distance : (view.defaultLineHeight >> 1);
	    for (let extra = 0;; extra += 10) {
	        let curY = startY + (dist + extra) * dir;
	        let pos = posAtCoords(view, { x: resolvedGoal, y: curY }, false, dir);
	        if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos))
	            return EditorSelection.cursor(pos, undefined, undefined, goal);
	    }
	}
	function skipAtoms(view, oldPos, pos) {
	    let atoms = view.pluginField(PluginField.atomicRanges);
	    for (;;) {
	        let moved = false;
	        for (let set of atoms) {
	            set.between(pos.from - 1, pos.from + 1, (from, to, value) => {
	                if (pos.from > from && pos.from < to) {
	                    pos = oldPos.from > pos.from ? EditorSelection.cursor(from, 1) : EditorSelection.cursor(to, -1);
	                    moved = true;
	                }
	            });
	        }
	        if (!moved)
	            return pos;
	    }
	}

	// This will also be where dragging info and such goes
	class InputState {
	    constructor(view) {
	        this.lastKeyCode = 0;
	        this.lastKeyTime = 0;
	        this.pendingIOSKey = null;
	        this.lastSelectionOrigin = null;
	        this.lastSelectionTime = 0;
	        this.lastEscPress = 0;
	        this.lastContextMenu = 0;
	        this.scrollHandlers = [];
	        this.registeredEvents = [];
	        this.customHandlers = [];
	        // -1 means not in a composition. Otherwise, this counts the number
	        // of changes made during the composition. The count is used to
	        // avoid treating the start state of the composition, before any
	        // changes have been made, as part of the composition.
	        this.composing = -1;
	        // Tracks whether the next change should be marked as starting the
	        // composition (null means no composition, true means next is the
	        // first, false means first has already been marked for this
	        // composition)
	        this.compositionFirstChange = null;
	        this.compositionEndedAt = 0;
	        this.rapidCompositionStart = false;
	        this.mouseSelection = null;
	        for (let type in handlers) {
	            let handler = handlers[type];
	            view.contentDOM.addEventListener(type, (event) => {
	                if (type == "keydown" && this.keydown(view, event))
	                    return;
	                if (!eventBelongsToEditor(view, event) || this.ignoreDuringComposition(event))
	                    return;
	                if (this.mustFlushObserver(event))
	                    view.observer.forceFlush();
	                if (this.runCustomHandlers(type, view, event))
	                    event.preventDefault();
	                else
	                    handler(view, event);
	            });
	            this.registeredEvents.push(type);
	        }
	        this.notifiedFocused = view.hasFocus;
	        this.ensureHandlers(view);
	        // On Safari adding an input event handler somehow prevents an
	        // issue where the composition vanishes when you press enter.
	        if (browser.safari)
	            view.contentDOM.addEventListener("input", () => null);
	    }
	    setSelectionOrigin(origin) {
	        this.lastSelectionOrigin = origin;
	        this.lastSelectionTime = Date.now();
	    }
	    ensureHandlers(view) {
	        let handlers = this.customHandlers = view.pluginField(domEventHandlers);
	        for (let set of handlers) {
	            for (let type in set.handlers)
	                if (this.registeredEvents.indexOf(type) < 0 && type != "scroll") {
	                    this.registeredEvents.push(type);
	                    view.contentDOM.addEventListener(type, (event) => {
	                        if (!eventBelongsToEditor(view, event))
	                            return;
	                        if (this.runCustomHandlers(type, view, event))
	                            event.preventDefault();
	                    });
	                }
	        }
	    }
	    runCustomHandlers(type, view, event) {
	        for (let set of this.customHandlers) {
	            let handler = set.handlers[type], handled = false;
	            if (handler) {
	                try {
	                    handled = handler.call(set.plugin, event, view);
	                }
	                catch (e) {
	                    logException(view.state, e);
	                }
	                if (handled || event.defaultPrevented) {
	                    // Chrome for Android often applies a bunch of nonsensical
	                    // DOM changes after an enter press, even when
	                    // preventDefault-ed. This tries to ignore those.
	                    if (browser.android && type == "keydown" && event.keyCode == 13)
	                        view.observer.flushSoon();
	                    return true;
	                }
	            }
	        }
	        return false;
	    }
	    runScrollHandlers(view, event) {
	        for (let set of this.customHandlers) {
	            let handler = set.handlers.scroll;
	            if (handler) {
	                try {
	                    handler.call(set.plugin, event, view);
	                }
	                catch (e) {
	                    logException(view.state, e);
	                }
	            }
	        }
	    }
	    keydown(view, event) {
	        // Must always run, even if a custom handler handled the event
	        this.lastKeyCode = event.keyCode;
	        this.lastKeyTime = Date.now();
	        if (this.screenKeyEvent(view, event))
	            return true;
	        // Prevent the default behavior of Enter on iOS makes the
	        // virtual keyboard get stuck in the wrong (lowercase)
	        // state. So we let it go through, and then, in
	        // applyDOMChange, notify key handlers of it and reset to
	        // the state they produce.
	        if (browser.ios && (event.keyCode == 13 || event.keyCode == 8) &&
	            !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
	            this.pendingIOSKey = event.keyCode == 13 ? "enter" : "backspace";
	            setTimeout(() => this.flushIOSKey(view), 250);
	            return true;
	        }
	        return false;
	    }
	    flushIOSKey(view) {
	        if (!this.pendingIOSKey)
	            return false;
	        let dom = view.contentDOM, key = this.pendingIOSKey;
	        this.pendingIOSKey = null;
	        return key == "enter" ? dispatchKey(dom, "Enter", 13) : dispatchKey(dom, "Backspace", 8);
	    }
	    ignoreDuringComposition(event) {
	        if (!/^key/.test(event.type))
	            return false;
	        if (this.composing > 0)
	            return true;
	        // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
	        // On some input method editors (IMEs), the Enter key is used to
	        // confirm character selection. On Safari, when Enter is pressed,
	        // compositionend and keydown events are sometimes emitted in the
	        // wrong order. The key event should still be ignored, even when
	        // it happens after the compositionend event.
	        if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
	            this.compositionEndedAt = 0;
	            return true;
	        }
	        return false;
	    }
	    screenKeyEvent(view, event) {
	        let protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
	        if (event.keyCode == 27)
	            this.lastEscPress = Date.now();
	        else if (modifierCodes.indexOf(event.keyCode) < 0)
	            this.lastEscPress = 0;
	        return protectedTab;
	    }
	    mustFlushObserver(event) {
	        return (event.type == "keydown" && event.keyCode != 229) ||
	            event.type == "compositionend" && !browser.ios;
	    }
	    startMouseSelection(view, event, style) {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	        this.mouseSelection = new MouseSelection(this, view, event, style);
	    }
	    update(update) {
	        if (this.mouseSelection)
	            this.mouseSelection.update(update);
	        if (update.transactions.length)
	            this.lastKeyCode = this.lastSelectionTime = 0;
	    }
	    destroy() {
	        if (this.mouseSelection)
	            this.mouseSelection.destroy();
	    }
	}
	// Key codes for modifier keys
	const modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
	class MouseSelection {
	    constructor(inputState, view, startEvent, style) {
	        this.inputState = inputState;
	        this.view = view;
	        this.style = style;
	        this.lastEvent = startEvent;
	        let doc = view.contentDOM.ownerDocument;
	        doc.addEventListener("mousemove", this.move = this.move.bind(this));
	        doc.addEventListener("mouseup", this.up = this.up.bind(this));
	        this.extend = startEvent.shiftKey;
	        this.multiple = view.state.facet(EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
	        this.dragMove = dragMovesSelection(view, startEvent);
	        this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
	        // When clicking outside of the selection, immediately apply the
	        // effect of starting the selection
	        if (this.dragging === false) {
	            startEvent.preventDefault();
	            this.select(startEvent);
	        }
	    }
	    move(event) {
	        if (event.buttons == 0)
	            return this.destroy();
	        if (this.dragging !== false)
	            return;
	        this.select(this.lastEvent = event);
	    }
	    up(event) {
	        if (this.dragging == null)
	            this.select(this.lastEvent);
	        if (!this.dragging)
	            event.preventDefault();
	        this.destroy();
	    }
	    destroy() {
	        let doc = this.view.contentDOM.ownerDocument;
	        doc.removeEventListener("mousemove", this.move);
	        doc.removeEventListener("mouseup", this.up);
	        this.inputState.mouseSelection = null;
	    }
	    select(event) {
	        let selection = this.style.get(event, this.extend, this.multiple);
	        if (!selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc)
	            this.view.dispatch({
	                selection,
	                userEvent: "select.pointer",
	                scrollIntoView: true
	            });
	    }
	    update(update) {
	        if (update.docChanged && this.dragging)
	            this.dragging = this.dragging.map(update.changes);
	        if (this.style.update(update))
	            setTimeout(() => this.select(this.lastEvent), 20);
	    }
	}
	function addsSelectionRange(view, event) {
	    let facet = view.state.facet(clickAddsSelectionRange);
	    return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
	}
	function dragMovesSelection(view, event) {
	    let facet = view.state.facet(dragMovesSelection$1);
	    return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
	}
	function isInPrimarySelection(view, event) {
	    let { main } = view.state.selection;
	    if (main.empty)
	        return false;
	    // On boundary clicks, check whether the coordinates are inside the
	    // selection's client rectangles
	    let sel = getSelection(view.root);
	    if (sel.rangeCount == 0)
	        return true;
	    let rects = sel.getRangeAt(0).getClientRects();
	    for (let i = 0; i < rects.length; i++) {
	        let rect = rects[i];
	        if (rect.left <= event.clientX && rect.right >= event.clientX &&
	            rect.top <= event.clientY && rect.bottom >= event.clientY)
	            return true;
	    }
	    return false;
	}
	function eventBelongsToEditor(view, event) {
	    if (!event.bubbles)
	        return true;
	    if (event.defaultPrevented)
	        return false;
	    for (let node = event.target, cView; node != view.contentDOM; node = node.parentNode)
	        if (!node || node.nodeType == 11 || ((cView = ContentView.get(node)) && cView.ignoreEvent(event)))
	            return false;
	    return true;
	}
	const handlers = /*@__PURE__*/Object.create(null);
	// This is very crude, but unfortunately both these browsers _pretend_
	// that they have a clipboard API—all the objects and methods are
	// there, they just don't work, and they are hard to test.
	const brokenClipboardAPI = (browser.ie && browser.ie_version < 15) ||
	    (browser.ios && browser.webkit_version < 604);
	function capturePaste(view) {
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.focus();
	    setTimeout(() => {
	        view.focus();
	        target.remove();
	        doPaste(view, target.value);
	    }, 50);
	}
	function doPaste(view, input) {
	    let { state } = view, changes, i = 1, text = state.toText(input);
	    let byLine = text.lines == state.selection.ranges.length;
	    let linewise = lastLinewiseCopy != null && state.selection.ranges.every(r => r.empty) && lastLinewiseCopy == text.toString();
	    if (linewise) {
	        let lastLine = -1;
	        changes = state.changeByRange(range => {
	            let line = state.doc.lineAt(range.from);
	            if (line.from == lastLine)
	                return { range };
	            lastLine = line.from;
	            let insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
	            return { changes: { from: line.from, insert },
	                range: EditorSelection.cursor(range.from + insert.length) };
	        });
	    }
	    else if (byLine) {
	        changes = state.changeByRange(range => {
	            let line = text.line(i++);
	            return { changes: { from: range.from, to: range.to, insert: line.text },
	                range: EditorSelection.cursor(range.from + line.length) };
	        });
	    }
	    else {
	        changes = state.replaceSelection(text);
	    }
	    view.dispatch(changes, {
	        userEvent: "input.paste",
	        scrollIntoView: true
	    });
	}
	handlers.keydown = (view, event) => {
	    view.inputState.setSelectionOrigin("select");
	};
	let lastTouch = 0;
	handlers.touchstart = (view, e) => {
	    lastTouch = Date.now();
	    view.inputState.setSelectionOrigin("select.pointer");
	};
	handlers.touchmove = view => {
	    view.inputState.setSelectionOrigin("select.pointer");
	};
	handlers.mousedown = (view, event) => {
	    view.observer.flush();
	    if (lastTouch > Date.now() - 2000)
	        return; // Ignore touch interaction
	    let style = null;
	    for (let makeStyle of view.state.facet(mouseSelectionStyle)) {
	        style = makeStyle(view, event);
	        if (style)
	            break;
	    }
	    if (!style && event.button == 0)
	        style = basicMouseSelection(view, event);
	    if (style) {
	        if (view.root.activeElement != view.contentDOM)
	            view.observer.ignore(() => focusPreventScroll(view.contentDOM));
	        view.inputState.startMouseSelection(view, event, style);
	    }
	};
	function rangeForClick(view, pos, bias, type) {
	    if (type == 1) { // Single click
	        return EditorSelection.cursor(pos, bias);
	    }
	    else if (type == 2) { // Double click
	        return groupAt(view.state, pos, bias);
	    }
	    else { // Triple click
	        let visual = LineView.find(view.docView, pos), line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
	        let from = visual ? visual.posAtStart : line.from, to = visual ? visual.posAtEnd : line.to;
	        if (to < view.state.doc.length && to == line.to)
	            to++;
	        return EditorSelection.range(from, to);
	    }
	}
	let insideY = (y, rect) => y >= rect.top && y <= rect.bottom;
	let inside = (x, y, rect) => insideY(y, rect) && x >= rect.left && x <= rect.right;
	// Try to determine, for the given coordinates, associated with the
	// given position, whether they are related to the element before or
	// the element after the position.
	function findPositionSide(view, pos, x, y) {
	    let line = LineView.find(view.docView, pos);
	    if (!line)
	        return 1;
	    let off = pos - line.posAtStart;
	    // Line boundaries point into the line
	    if (off == 0)
	        return 1;
	    if (off == line.length)
	        return -1;
	    // Positions on top of an element point at that element
	    let before = line.coordsAt(off, -1);
	    if (before && inside(x, y, before))
	        return -1;
	    let after = line.coordsAt(off, 1);
	    if (after && inside(x, y, after))
	        return 1;
	    // This is probably a line wrap point. Pick before if the point is
	    // beside it.
	    return before && insideY(y, before) ? -1 : 1;
	}
	function queryPos(view, event) {
	    let pos = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
	    return { pos, bias: findPositionSide(view, pos, event.clientX, event.clientY) };
	}
	const BadMouseDetail = browser.ie && browser.ie_version <= 11;
	let lastMouseDown = null, lastMouseDownCount = 0, lastMouseDownTime = 0;
	function getClickType(event) {
	    if (!BadMouseDetail)
	        return event.detail;
	    let last = lastMouseDown, lastTime = lastMouseDownTime;
	    lastMouseDown = event;
	    lastMouseDownTime = Date.now();
	    return lastMouseDownCount = !last || (lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 &&
	        Math.abs(last.clientY - event.clientY) < 2) ? (lastMouseDownCount + 1) % 3 : 1;
	}
	function basicMouseSelection(view, event) {
	    let start = queryPos(view, event), type = getClickType(event);
	    let startSel = view.state.selection;
	    let last = start, lastEvent = event;
	    return {
	        update(update) {
	            if (update.changes) {
	                if (start)
	                    start.pos = update.changes.mapPos(start.pos);
	                startSel = startSel.map(update.changes);
	                lastEvent = null;
	            }
	        },
	        get(event, extend, multiple) {
	            let cur;
	            if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY)
	                cur = last;
	            else {
	                cur = last = queryPos(view, event);
	                lastEvent = event;
	            }
	            if (!cur || !start)
	                return startSel;
	            let range = rangeForClick(view, cur.pos, cur.bias, type);
	            if (start.pos != cur.pos && !extend) {
	                let startRange = rangeForClick(view, start.pos, start.bias, type);
	                let from = Math.min(startRange.from, range.from), to = Math.max(startRange.to, range.to);
	                range = from < range.from ? EditorSelection.range(from, to) : EditorSelection.range(to, from);
	            }
	            if (extend)
	                return startSel.replaceRange(startSel.main.extend(range.from, range.to));
	            else if (multiple)
	                return startSel.addRange(range);
	            else
	                return EditorSelection.create([range]);
	        }
	    };
	}
	handlers.dragstart = (view, event) => {
	    let { selection: { main } } = view.state;
	    let { mouseSelection } = view.inputState;
	    if (mouseSelection)
	        mouseSelection.dragging = main;
	    if (event.dataTransfer) {
	        event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
	        event.dataTransfer.effectAllowed = "copyMove";
	    }
	};
	function dropText(view, event, text, direct) {
	    let dropPos = view.posAtCoords({ x: event.clientX, y: event.clientY });
	    if (dropPos == null || !text)
	        return;
	    event.preventDefault();
	    let { mouseSelection } = view.inputState;
	    let del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ?
	        { from: mouseSelection.dragging.from, to: mouseSelection.dragging.to } : null;
	    let ins = { from: dropPos, insert: text };
	    let changes = view.state.changes(del ? [del, ins] : ins);
	    view.focus();
	    view.dispatch({
	        changes,
	        selection: { anchor: changes.mapPos(dropPos, -1), head: changes.mapPos(dropPos, 1) },
	        userEvent: del ? "move.drop" : "input.drop"
	    });
	}
	handlers.drop = (view, event) => {
	    if (!event.dataTransfer)
	        return;
	    if (view.state.readOnly)
	        return event.preventDefault();
	    let files = event.dataTransfer.files;
	    if (files && files.length) { // For a file drop, read the file's text.
	        event.preventDefault();
	        let text = Array(files.length), read = 0;
	        let finishFile = () => {
	            if (++read == files.length)
	                dropText(view, event, text.filter(s => s != null).join(view.state.lineBreak), false);
	        };
	        for (let i = 0; i < files.length; i++) {
	            let reader = new FileReader;
	            reader.onerror = finishFile;
	            reader.onload = () => {
	                if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result))
	                    text[i] = reader.result;
	                finishFile();
	            };
	            reader.readAsText(files[i]);
	        }
	    }
	    else {
	        dropText(view, event, event.dataTransfer.getData("Text"), true);
	    }
	};
	handlers.paste = (view, event) => {
	    if (view.state.readOnly)
	        return event.preventDefault();
	    view.observer.flush();
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    if (data) {
	        doPaste(view, data.getData("text/plain"));
	        event.preventDefault();
	    }
	    else {
	        capturePaste(view);
	    }
	};
	function captureCopy(view, text) {
	    // The extra wrapper is somehow necessary on IE/Edge to prevent the
	    // content from being mangled when it is put onto the clipboard
	    let parent = view.dom.parentNode;
	    if (!parent)
	        return;
	    let target = parent.appendChild(document.createElement("textarea"));
	    target.style.cssText = "position: fixed; left: -10000px; top: 10px";
	    target.value = text;
	    target.focus();
	    target.selectionEnd = text.length;
	    target.selectionStart = 0;
	    setTimeout(() => {
	        target.remove();
	        view.focus();
	    }, 50);
	}
	function copiedRange(state) {
	    let content = [], ranges = [], linewise = false;
	    for (let range of state.selection.ranges)
	        if (!range.empty) {
	            content.push(state.sliceDoc(range.from, range.to));
	            ranges.push(range);
	        }
	    if (!content.length) {
	        // Nothing selected, do a line-wise copy
	        let upto = -1;
	        for (let { from } of state.selection.ranges) {
	            let line = state.doc.lineAt(from);
	            if (line.number > upto) {
	                content.push(line.text);
	                ranges.push({ from: line.from, to: Math.min(state.doc.length, line.to + 1) });
	            }
	            upto = line.number;
	        }
	        linewise = true;
	    }
	    return { text: content.join(state.lineBreak), ranges, linewise };
	}
	let lastLinewiseCopy = null;
	handlers.copy = handlers.cut = (view, event) => {
	    let { text, ranges, linewise } = copiedRange(view.state);
	    if (!text && !linewise)
	        return;
	    lastLinewiseCopy = linewise ? text : null;
	    let data = brokenClipboardAPI ? null : event.clipboardData;
	    if (data) {
	        event.preventDefault();
	        data.clearData();
	        data.setData("text/plain", text);
	    }
	    else {
	        captureCopy(view, text);
	    }
	    if (event.type == "cut" && !view.state.readOnly)
	        view.dispatch({
	            changes: ranges,
	            scrollIntoView: true,
	            userEvent: "delete.cut"
	        });
	};
	handlers.focus = handlers.blur = view => {
	    setTimeout(() => {
	        if (view.hasFocus != view.inputState.notifiedFocused)
	            view.update([]);
	    }, 10);
	};
	handlers.beforeprint = view => {
	    view.viewState.printing = true;
	    view.requestMeasure();
	    setTimeout(() => {
	        view.viewState.printing = false;
	        view.requestMeasure();
	    }, 2000);
	};
	function forceClearComposition(view, rapid) {
	    if (view.docView.compositionDeco.size) {
	        view.inputState.rapidCompositionStart = rapid;
	        try {
	            view.update([]);
	        }
	        finally {
	            view.inputState.rapidCompositionStart = false;
	        }
	    }
	}
	handlers.compositionstart = handlers.compositionupdate = view => {
	    if (view.inputState.compositionFirstChange == null)
	        view.inputState.compositionFirstChange = true;
	    if (view.inputState.composing < 0) {
	        if (view.docView.compositionDeco.size) {
	            view.observer.flush();
	            forceClearComposition(view, true);
	        }
	        // FIXME possibly set a timeout to clear it again on Android
	        view.inputState.composing = 0;
	    }
	};
	handlers.compositionend = view => {
	    view.inputState.composing = -1;
	    view.inputState.compositionEndedAt = Date.now();
	    view.inputState.compositionFirstChange = null;
	    setTimeout(() => {
	        if (view.inputState.composing < 0)
	            forceClearComposition(view, false);
	    }, 50);
	};
	handlers.contextmenu = view => {
	    view.inputState.lastContextMenu = Date.now();
	};

	const wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
	class HeightOracle {
	    constructor() {
	        this.doc = Text.empty;
	        this.lineWrapping = false;
	        this.direction = Direction.LTR;
	        this.heightSamples = {};
	        this.lineHeight = 14;
	        this.charWidth = 7;
	        this.lineLength = 30;
	        // Used to track, during updateHeight, if any actual heights changed
	        this.heightChanged = false;
	    }
	    heightForGap(from, to) {
	        let lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
	        if (this.lineWrapping)
	            lines += Math.ceil(((to - from) - (lines * this.lineLength * 0.5)) / this.lineLength);
	        return this.lineHeight * lines;
	    }
	    heightForLine(length) {
	        if (!this.lineWrapping)
	            return this.lineHeight;
	        let lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
	        return lines * this.lineHeight;
	    }
	    setDoc(doc) { this.doc = doc; return this; }
	    mustRefresh(lineHeights, whiteSpace, direction) {
	        let newHeight = false;
	        for (let i = 0; i < lineHeights.length; i++) {
	            let h = lineHeights[i];
	            if (h < 0) {
	                i++;
	            }
	            else if (!this.heightSamples[Math.floor(h * 10)]) { // Round to .1 pixels
	                newHeight = true;
	                this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return newHeight || (wrappingWhiteSpace.indexOf(whiteSpace) > -1) != this.lineWrapping || this.direction != direction;
	    }
	    refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
	        let lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
	        let changed = Math.round(lineHeight) != Math.round(this.lineHeight) ||
	            this.lineWrapping != lineWrapping ||
	            this.direction != direction;
	        this.lineWrapping = lineWrapping;
	        this.direction = direction;
	        this.lineHeight = lineHeight;
	        this.charWidth = charWidth;
	        this.lineLength = lineLength;
	        if (changed) {
	            this.heightSamples = {};
	            for (let i = 0; i < knownHeights.length; i++) {
	                let h = knownHeights[i];
	                if (h < 0)
	                    i++;
	                else
	                    this.heightSamples[Math.floor(h * 10)] = true;
	            }
	        }
	        return changed;
	    }
	}
	// This object is used by `updateHeight` to make DOM measurements
	// arrive at the right nides. The `heights` array is a sequence of
	// block heights, starting from position `from`.
	class MeasuredHeights {
	    constructor(from, heights) {
	        this.from = from;
	        this.heights = heights;
	        this.index = 0;
	    }
	    get more() { return this.index < this.heights.length; }
	}
	/**
	Record used to represent information about a block-level element
	in the editor view.
	*/
	class BlockInfo {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The start of the element in the document.
	    */
	    from, 
	    /**
	    The length of the element.
	    */
	    length, 
	    /**
	    The top position of the element.
	    */
	    top, 
	    /**
	    Its height.
	    */
	    height, 
	    /**
	    The type of element this is. When querying lines, this may be
	    an array of all the blocks that make up the line.
	    */
	    type) {
	        this.from = from;
	        this.length = length;
	        this.top = top;
	        this.height = height;
	        this.type = type;
	    }
	    /**
	    The end of the element as a document position.
	    */
	    get to() { return this.from + this.length; }
	    /**
	    The bottom position of the element.
	    */
	    get bottom() { return this.top + this.height; }
	    /**
	    @internal
	    */
	    join(other) {
	        let detail = (Array.isArray(this.type) ? this.type : [this])
	            .concat(Array.isArray(other.type) ? other.type : [other]);
	        return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
	    }
	}
	var QueryType = /*@__PURE__*/(function (QueryType) {
	    QueryType[QueryType["ByPos"] = 0] = "ByPos";
	    QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
	    QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
	return QueryType})(QueryType || (QueryType = {}));
	const Epsilon = 1e-4;
	class HeightMap {
	    constructor(length, // The number of characters covered
	    height, // Height of this part of the document
	    flags = 2 /* Outdated */) {
	        this.length = length;
	        this.height = height;
	        this.flags = flags;
	    }
	    get outdated() { return (this.flags & 2 /* Outdated */) > 0; }
	    set outdated(value) { this.flags = (value ? 2 /* Outdated */ : 0) | (this.flags & ~2 /* Outdated */); }
	    setHeight(oracle, height) {
	        if (this.height != height) {
	            if (Math.abs(this.height - height) > Epsilon)
	                oracle.heightChanged = true;
	            this.height = height;
	        }
	    }
	    // Base case is to replace a leaf node, which simply builds a tree
	    // from the new nodes and returns that (HeightMapBranch and
	    // HeightMapGap override this to actually use from/to)
	    replace(_from, _to, nodes) {
	        return HeightMap.of(nodes);
	    }
	    // Again, these are base cases, and are overridden for branch and gap nodes.
	    decomposeLeft(_to, result) { result.push(this); }
	    decomposeRight(_from, result) { result.push(this); }
	    applyChanges(decorations, oldDoc, oracle, changes) {
	        let me = this;
	        for (let i = changes.length - 1; i >= 0; i--) {
	            let { fromA, toA, fromB, toB } = changes[i];
	            let start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            let end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            toB += end.to - toA;
	            toA = end.to;
	            while (i > 0 && start.from <= changes[i - 1].toA) {
	                fromA = changes[i - 1].fromA;
	                fromB = changes[i - 1].fromB;
	                i--;
	                if (fromA < start.from)
	                    start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
	            }
	            fromB += start.from - fromA;
	            fromA = start.from;
	            let nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
	            me = me.replace(fromA, toA, nodes);
	        }
	        return me.updateHeight(oracle, 0);
	    }
	    static empty() { return new HeightMapText(0, 0); }
	    // nodes uses null values to indicate the position of line breaks.
	    // There are never line breaks at the start or end of the array, or
	    // two line breaks next to each other, and the array isn't allowed
	    // to be empty (same restrictions as return value from the builder).
	    static of(nodes) {
	        if (nodes.length == 1)
	            return nodes[0];
	        let i = 0, j = nodes.length, before = 0, after = 0;
	        for (;;) {
	            if (i == j) {
	                if (before > after * 2) {
	                    let split = nodes[i - 1];
	                    if (split.break)
	                        nodes.splice(--i, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(--i, 1, split.left, split.right);
	                    j += 1 + split.break;
	                    before -= split.size;
	                }
	                else if (after > before * 2) {
	                    let split = nodes[j];
	                    if (split.break)
	                        nodes.splice(j, 1, split.left, null, split.right);
	                    else
	                        nodes.splice(j, 1, split.left, split.right);
	                    j += 2 + split.break;
	                    after -= split.size;
	                }
	                else {
	                    break;
	                }
	            }
	            else if (before < after) {
	                let next = nodes[i++];
	                if (next)
	                    before += next.size;
	            }
	            else {
	                let next = nodes[--j];
	                if (next)
	                    after += next.size;
	            }
	        }
	        let brk = 0;
	        if (nodes[i - 1] == null) {
	            brk = 1;
	            i--;
	        }
	        else if (nodes[i] == null) {
	            brk = 1;
	            j++;
	        }
	        return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
	    }
	}
	HeightMap.prototype.size = 1;
	class HeightMapBlock extends HeightMap {
	    constructor(length, height, type) {
	        super(length, height);
	        this.type = type;
	    }
	    blockAt(_height, _doc, top, offset) {
	        return new BlockInfo(offset, this.length, top, this.height, this.type);
	    }
	    lineAt(_value, _type, doc, top, offset) {
	        return this.blockAt(0, doc, top, offset);
	    }
	    forEachLine(_from, _to, doc, top, offset, f) {
	        f(this.blockAt(0, doc, top, offset));
	    }
	    updateHeight(oracle, offset = 0, _force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        this.outdated = false;
	        return this;
	    }
	    toString() { return `block(${this.length})`; }
	}
	class HeightMapText extends HeightMapBlock {
	    constructor(length, height) {
	        super(length, height, BlockType.Text);
	        this.collapsed = 0; // Amount of collapsed content in the line
	        this.widgetHeight = 0; // Maximum inline widget height
	    }
	    replace(_from, _to, nodes) {
	        let node = nodes[0];
	        if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && (node.flags & 4 /* SingleLine */)) &&
	            Math.abs(this.length - node.length) < 10) {
	            if (node instanceof HeightMapGap)
	                node = new HeightMapText(node.length, this.height);
	            else
	                node.height = this.height;
	            if (!this.outdated)
	                node.outdated = false;
	            return node;
	        }
	        else {
	            return HeightMap.of(nodes);
	        }
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        if (measured && measured.from <= offset && measured.more)
	            this.setHeight(oracle, measured.heights[measured.index++]);
	        else if (force || this.outdated)
	            this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
	        this.outdated = false;
	        return this;
	    }
	    toString() {
	        return `line(${this.length}${this.collapsed ? -this.collapsed : ""}${this.widgetHeight ? ":" + this.widgetHeight : ""})`;
	    }
	}
	class HeightMapGap extends HeightMap {
	    constructor(length) { super(length, 0); }
	    lines(doc, offset) {
	        let firstLine = doc.lineAt(offset).number, lastLine = doc.lineAt(offset + this.length).number;
	        return { firstLine, lastLine, lineHeight: this.height / (lastLine - firstLine + 1) };
	    }
	    blockAt(height, doc, top, offset) {
	        let { firstLine, lastLine, lineHeight } = this.lines(doc, offset);
	        let line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
	        let { from, length } = doc.line(firstLine + line);
	        return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
	    }
	    lineAt(value, type, doc, top, offset) {
	        if (type == QueryType.ByHeight)
	            return this.blockAt(value, doc, top, offset);
	        if (type == QueryType.ByPosNoHeight) {
	            let { from, to } = doc.lineAt(value);
	            return new BlockInfo(from, to - from, 0, 0, BlockType.Text);
	        }
	        let { firstLine, lineHeight } = this.lines(doc, offset);
	        let { from, length, number } = doc.lineAt(value);
	        return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
	    }
	    forEachLine(from, to, doc, top, offset, f) {
	        let { firstLine, lineHeight } = this.lines(doc, offset);
	        for (let pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
	            let line = doc.lineAt(pos);
	            if (pos == from)
	                top += lineHeight * (line.number - firstLine);
	            f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
	            top += lineHeight;
	            pos = line.to + 1;
	        }
	    }
	    replace(from, to, nodes) {
	        let after = this.length - to;
	        if (after > 0) {
	            let last = nodes[nodes.length - 1];
	            if (last instanceof HeightMapGap)
	                nodes[nodes.length - 1] = new HeightMapGap(last.length + after);
	            else
	                nodes.push(null, new HeightMapGap(after - 1));
	        }
	        if (from > 0) {
	            let first = nodes[0];
	            if (first instanceof HeightMapGap)
	                nodes[0] = new HeightMapGap(from + first.length);
	            else
	                nodes.unshift(new HeightMapGap(from - 1), null);
	        }
	        return HeightMap.of(nodes);
	    }
	    decomposeLeft(to, result) {
	        result.push(new HeightMapGap(to - 1), null);
	    }
	    decomposeRight(from, result) {
	        result.push(null, new HeightMapGap(this.length - from - 1));
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let end = offset + this.length;
	        if (measured && measured.from <= offset + this.length && measured.more) {
	            // Fill in part of this gap with measured lines. We know there
	            // can't be widgets or collapsed ranges in those lines, because
	            // they would already have been added to the heightmap (gaps
	            // only contain plain text).
	            let nodes = [], pos = Math.max(offset, measured.from);
	            if (measured.from > offset)
	                nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
	            while (pos <= end && measured.more) {
	                let len = oracle.doc.lineAt(pos).length;
	                if (nodes.length)
	                    nodes.push(null);
	                let line = new HeightMapText(len, measured.heights[measured.index++]);
	                line.outdated = false;
	                nodes.push(line);
	                pos += len + 1;
	            }
	            if (pos <= end)
	                nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
	            oracle.heightChanged = true;
	            return HeightMap.of(nodes);
	        }
	        else if (force || this.outdated) {
	            this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
	            this.outdated = false;
	        }
	        return this;
	    }
	    toString() { return `gap(${this.length})`; }
	}
	class HeightMapBranch extends HeightMap {
	    constructor(left, brk, right) {
	        super(left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
	        this.left = left;
	        this.right = right;
	        this.size = left.size + right.size;
	    }
	    get break() { return this.flags & 1 /* Break */; }
	    blockAt(height, doc, top, offset) {
	        let mid = top + this.left.height;
	        return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset)
	            : this.right.blockAt(height, doc, mid, offset + this.left.length + this.break);
	    }
	    lineAt(value, type, doc, top, offset) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        let left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
	        let base = left ? this.left.lineAt(value, type, doc, top, offset)
	            : this.right.lineAt(value, type, doc, rightTop, rightOffset);
	        if (this.break || (left ? base.to < rightOffset : base.from > rightOffset))
	            return base;
	        let subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
	        if (left)
	            return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));
	        else
	            return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
	    }
	    forEachLine(from, to, doc, top, offset, f) {
	        let rightTop = top + this.left.height, rightOffset = offset + this.left.length + this.break;
	        if (this.break) {
	            if (from < rightOffset)
	                this.left.forEachLine(from, to, doc, top, offset, f);
	            if (to >= rightOffset)
	                this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
	        }
	        else {
	            let mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
	            if (from < mid.from)
	                this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
	            if (mid.to >= from && mid.from <= to)
	                f(mid);
	            if (to > mid.to)
	                this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
	        }
	    }
	    replace(from, to, nodes) {
	        let rightStart = this.left.length + this.break;
	        if (to < rightStart)
	            return this.balanced(this.left.replace(from, to, nodes), this.right);
	        if (from > this.left.length)
	            return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
	        let result = [];
	        if (from > 0)
	            this.decomposeLeft(from, result);
	        let left = result.length;
	        for (let node of nodes)
	            result.push(node);
	        if (from > 0)
	            mergeGaps(result, left - 1);
	        if (to < this.length) {
	            let right = result.length;
	            this.decomposeRight(to, result);
	            mergeGaps(result, right);
	        }
	        return HeightMap.of(result);
	    }
	    decomposeLeft(to, result) {
	        let left = this.left.length;
	        if (to <= left)
	            return this.left.decomposeLeft(to, result);
	        result.push(this.left);
	        if (this.break) {
	            left++;
	            if (to >= left)
	                result.push(null);
	        }
	        if (to > left)
	            this.right.decomposeLeft(to - left, result);
	    }
	    decomposeRight(from, result) {
	        let left = this.left.length, right = left + this.break;
	        if (from >= right)
	            return this.right.decomposeRight(from - right, result);
	        if (from < left)
	            this.left.decomposeRight(from, result);
	        if (this.break && from < right)
	            result.push(null);
	        result.push(this.right);
	    }
	    balanced(left, right) {
	        if (left.size > 2 * right.size || right.size > 2 * left.size)
	            return HeightMap.of(this.break ? [left, null, right] : [left, right]);
	        this.left = left;
	        this.right = right;
	        this.height = left.height + right.height;
	        this.outdated = left.outdated || right.outdated;
	        this.size = left.size + right.size;
	        this.length = left.length + this.break + right.length;
	        return this;
	    }
	    updateHeight(oracle, offset = 0, force = false, measured) {
	        let { left, right } = this, rightStart = offset + left.length + this.break, rebalance = null;
	        if (measured && measured.from <= offset + left.length && measured.more)
	            rebalance = left = left.updateHeight(oracle, offset, force, measured);
	        else
	            left.updateHeight(oracle, offset, force);
	        if (measured && measured.from <= rightStart + right.length && measured.more)
	            rebalance = right = right.updateHeight(oracle, rightStart, force, measured);
	        else
	            right.updateHeight(oracle, rightStart, force);
	        if (rebalance)
	            return this.balanced(left, right);
	        this.height = this.left.height + this.right.height;
	        this.outdated = false;
	        return this;
	    }
	    toString() { return this.left + (this.break ? " " : "-") + this.right; }
	}
	function mergeGaps(nodes, around) {
	    let before, after;
	    if (nodes[around] == null &&
	        (before = nodes[around - 1]) instanceof HeightMapGap &&
	        (after = nodes[around + 1]) instanceof HeightMapGap)
	        nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
	}
	const relevantWidgetHeight = 5;
	class NodeBuilder {
	    constructor(pos, oracle) {
	        this.pos = pos;
	        this.oracle = oracle;
	        this.nodes = [];
	        this.lineStart = -1;
	        this.lineEnd = -1;
	        this.covering = null;
	        this.writtenTo = pos;
	    }
	    get isCovered() {
	        return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
	    }
	    span(_from, to) {
	        if (this.lineStart > -1) {
	            let end = Math.min(to, this.lineEnd), last = this.nodes[this.nodes.length - 1];
	            if (last instanceof HeightMapText)
	                last.length += end - this.pos;
	            else if (end > this.pos || !this.isCovered)
	                this.nodes.push(new HeightMapText(end - this.pos, -1));
	            this.writtenTo = end;
	            if (to > end) {
	                this.nodes.push(null);
	                this.writtenTo++;
	                this.lineStart = -1;
	            }
	        }
	        this.pos = to;
	    }
	    point(from, to, deco) {
	        if (from < to || deco.heightRelevant) {
	            let height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
	            let len = to - from;
	            if (deco.block) {
	                this.addBlock(new HeightMapBlock(len, height, deco.type));
	            }
	            else if (len || height >= relevantWidgetHeight) {
	                this.addLineDeco(height, len);
	            }
	        }
	        else if (to > from) {
	            this.span(from, to);
	        }
	        if (this.lineEnd > -1 && this.lineEnd < this.pos)
	            this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
	    }
	    enterLine() {
	        if (this.lineStart > -1)
	            return;
	        let { from, to } = this.oracle.doc.lineAt(this.pos);
	        this.lineStart = from;
	        this.lineEnd = to;
	        if (this.writtenTo < from) {
	            if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null)
	                this.nodes.push(this.blankContent(this.writtenTo, from - 1));
	            this.nodes.push(null);
	        }
	        if (this.pos > from)
	            this.nodes.push(new HeightMapText(this.pos - from, -1));
	        this.writtenTo = this.pos;
	    }
	    blankContent(from, to) {
	        let gap = new HeightMapGap(to - from);
	        if (this.oracle.doc.lineAt(from).to == to)
	            gap.flags |= 4 /* SingleLine */;
	        return gap;
	    }
	    ensureLine() {
	        this.enterLine();
	        let last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
	        if (last instanceof HeightMapText)
	            return last;
	        let line = new HeightMapText(0, -1);
	        this.nodes.push(line);
	        return line;
	    }
	    addBlock(block) {
	        this.enterLine();
	        if (block.type == BlockType.WidgetAfter && !this.isCovered)
	            this.ensureLine();
	        this.nodes.push(block);
	        this.writtenTo = this.pos = this.pos + block.length;
	        if (block.type != BlockType.WidgetBefore)
	            this.covering = block;
	    }
	    addLineDeco(height, length) {
	        let line = this.ensureLine();
	        line.length += length;
	        line.collapsed += length;
	        line.widgetHeight = Math.max(line.widgetHeight, height);
	        this.writtenTo = this.pos = this.pos + length;
	    }
	    finish(from) {
	        let last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
	        if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered)
	            this.nodes.push(new HeightMapText(0, -1));
	        else if (this.writtenTo < this.pos || last == null)
	            this.nodes.push(this.blankContent(this.writtenTo, this.pos));
	        let pos = from;
	        for (let node of this.nodes) {
	            if (node instanceof HeightMapText)
	                node.updateHeight(this.oracle, pos);
	            pos += node ? node.length : 1;
	        }
	        return this.nodes;
	    }
	    // Always called with a region that on both sides either stretches
	    // to a line break or the end of the document.
	    // The returned array uses null to indicate line breaks, but never
	    // starts or ends in a line break, or has multiple line breaks next
	    // to each other.
	    static build(oracle, decorations, from, to) {
	        let builder = new NodeBuilder(from, oracle);
	        RangeSet.spans(decorations, from, to, builder, 0);
	        return builder.finish(from);
	    }
	}
	function heightRelevantDecoChanges(a, b, diff) {
	    let comp = new DecorationComparator;
	    RangeSet.compare(a, b, diff, comp, 0);
	    return comp.changes;
	}
	class DecorationComparator {
	    constructor() {
	        this.changes = [];
	    }
	    compareRange() { }
	    comparePoint(from, to, a, b) {
	        if (from < to || a && a.heightRelevant || b && b.heightRelevant)
	            addRange(from, to, this.changes, 5);
	    }
	}

	function visiblePixelRange(dom, paddingTop) {
	    let rect = dom.getBoundingClientRect();
	    let left = Math.max(0, rect.left), right = Math.min(innerWidth, rect.right);
	    let top = Math.max(0, rect.top), bottom = Math.min(innerHeight, rect.bottom);
	    for (let parent = dom.parentNode; parent;) { // (Cast to any because TypeScript is useless with Node types)
	        if (parent.nodeType == 1) {
	            let style = window.getComputedStyle(parent);
	            if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) &&
	                style.overflow != "visible") {
	                let parentRect = parent.getBoundingClientRect();
	                left = Math.max(left, parentRect.left);
	                right = Math.min(right, parentRect.right);
	                top = Math.max(top, parentRect.top);
	                bottom = Math.min(bottom, parentRect.bottom);
	            }
	            parent = style.position == "absolute" || style.position == "fixed" ? parent.offsetParent : parent.parentNode;
	        }
	        else if (parent.nodeType == 11) { // Shadow root
	            parent = parent.host;
	        }
	        else {
	            break;
	        }
	    }
	    return { left: left - rect.left, right: right - rect.left,
	        top: top - (rect.top + paddingTop), bottom: bottom - (rect.top + paddingTop) };
	}
	// Line gaps are placeholder widgets used to hide pieces of overlong
	// lines within the viewport, as a kludge to keep the editor
	// responsive when a ridiculously long line is loaded into it.
	class LineGap {
	    constructor(from, to, size) {
	        this.from = from;
	        this.to = to;
	        this.size = size;
	    }
	    static same(a, b) {
	        if (a.length != b.length)
	            return false;
	        for (let i = 0; i < a.length; i++) {
	            let gA = a[i], gB = b[i];
	            if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size)
	                return false;
	        }
	        return true;
	    }
	    draw(wrapping) {
	        return Decoration.replace({ widget: new LineGapWidget(this.size, wrapping) }).range(this.from, this.to);
	    }
	}
	class LineGapWidget extends WidgetType {
	    constructor(size, vertical) {
	        super();
	        this.size = size;
	        this.vertical = vertical;
	    }
	    eq(other) { return other.size == this.size && other.vertical == this.vertical; }
	    toDOM() {
	        let elt = document.createElement("div");
	        if (this.vertical) {
	            elt.style.height = this.size + "px";
	        }
	        else {
	            elt.style.width = this.size + "px";
	            elt.style.height = "2px";
	            elt.style.display = "inline-block";
	        }
	        return elt;
	    }
	    get estimatedHeight() { return this.vertical ? this.size : -1; }
	}
	class ViewState {
	    constructor(state) {
	        this.state = state;
	        // These are contentDOM-local coordinates
	        this.pixelViewport = { left: 0, right: window.innerWidth, top: 0, bottom: 0 };
	        this.inView = true;
	        this.paddingTop = 0;
	        this.paddingBottom = 0;
	        this.contentWidth = 0;
	        this.heightOracle = new HeightOracle;
	        // See VP.MaxDOMHeight
	        this.scaler = IdScaler;
	        this.scrollTo = null;
	        // Briefly set to true when printing, to disable viewport limiting
	        this.printing = false;
	        this.visibleRanges = [];
	        // Cursor 'assoc' is only significant when the cursor is on a line
	        // wrap point, where it must stick to the character that it is
	        // associated with. Since browsers don't provide a reasonable
	        // interface to set or query this, when a selection is set that
	        // might cause this to be significant, this flag is set. The next
	        // measure phase will check whether the cursor is on a line-wrapping
	        // boundary and, if so, reset it to make sure it is positioned in
	        // the right place.
	        this.mustEnforceCursorAssoc = false;
	        this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
	        this.viewport = this.getViewport(0, null);
	        this.updateForViewport();
	        this.lineGaps = this.ensureLineGaps([]);
	        this.lineGapDeco = Decoration.set(this.lineGaps.map(gap => gap.draw(false)));
	        this.computeVisibleRanges();
	    }
	    updateForViewport() {
	        let viewports = [this.viewport], { main } = this.state.selection;
	        for (let i = 0; i <= 1; i++) {
	            let pos = i ? main.head : main.anchor;
	            if (!viewports.some(({ from, to }) => pos >= from && pos <= to)) {
	                let { from, to } = this.lineAt(pos, 0);
	                viewports.push(new Viewport(from, to));
	            }
	        }
	        this.viewports = viewports.sort((a, b) => a.from - b.from);
	        this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler :
	            new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
	    }
	    update(update, scrollTo = null) {
	        let prev = this.state;
	        this.state = update.state;
	        let newDeco = this.state.facet(decorations);
	        let contentChanges = update.changedRanges;
	        let heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(update.startState.facet(decorations), newDeco, update ? update.changes : ChangeSet.empty(this.state.doc.length)));
	        let prevHeight = this.heightMap.height;
	        this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
	        if (this.heightMap.height != prevHeight)
	            update.flags |= 2 /* Height */;
	        let viewport = heightChanges.length ? this.mapViewport(this.viewport, update.changes) : this.viewport;
	        if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport))
	            viewport = this.getViewport(0, scrollTo);
	        this.viewport = viewport;
	        this.updateForViewport();
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
	            this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, update.changes)));
	        update.flags |= this.computeVisibleRanges();
	        if (scrollTo)
	            this.scrollTo = scrollTo;
	        if (!this.mustEnforceCursorAssoc && update.selectionSet && update.view.lineWrapping &&
	            update.state.selection.main.empty && update.state.selection.main.assoc)
	            this.mustEnforceCursorAssoc = true;
	    }
	    measure(docView, repeated) {
	        let dom = docView.dom, whiteSpace = "", direction = Direction.LTR;
	        let result = 0;
	        if (!repeated) {
	            // Vertical padding
	            let style = window.getComputedStyle(dom);
	            whiteSpace = style.whiteSpace, direction = (style.direction == "rtl" ? Direction.RTL : Direction.LTR);
	            let paddingTop = parseInt(style.paddingTop) || 0, paddingBottom = parseInt(style.paddingBottom) || 0;
	            if (this.paddingTop != paddingTop || this.paddingBottom != paddingBottom) {
	                result |= 8 /* Geometry */;
	                this.paddingTop = paddingTop;
	                this.paddingBottom = paddingBottom;
	            }
	        }
	        // Pixel viewport
	        let pixelViewport = this.printing ? { top: -1e8, bottom: 1e8, left: -1e8, right: 1e8 } : visiblePixelRange(dom, this.paddingTop);
	        let dTop = pixelViewport.top - this.pixelViewport.top, dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
	        this.pixelViewport = pixelViewport;
	        this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
	        if (!this.inView)
	            return 0;
	        let lineHeights = docView.measureVisibleLineHeights();
	        let refresh = false, bias = 0, oracle = this.heightOracle;
	        if (!repeated) {
	            let contentWidth = docView.dom.clientWidth;
	            if (oracle.mustRefresh(lineHeights, whiteSpace, direction) ||
	                oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
	                let { lineHeight, charWidth } = docView.measureTextSize();
	                refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
	                if (refresh) {
	                    docView.minWidth = 0;
	                    result |= 8 /* Geometry */;
	                }
	            }
	            if (this.contentWidth != contentWidth) {
	                this.contentWidth = contentWidth;
	                result |= 8 /* Geometry */;
	            }
	            if (dTop > 0 && dBottom > 0)
	                bias = Math.max(dTop, dBottom);
	            else if (dTop < 0 && dBottom < 0)
	                bias = Math.min(dTop, dBottom);
	        }
	        oracle.heightChanged = false;
	        this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
	        if (oracle.heightChanged)
	            result |= 2 /* Height */;
	        if (!this.viewportIsAppropriate(this.viewport, bias) ||
	            this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to))
	            this.viewport = this.getViewport(bias, this.scrollTo);
	        this.updateForViewport();
	        if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */)
	            this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
	        result |= this.computeVisibleRanges();
	        if (this.mustEnforceCursorAssoc) {
	            this.mustEnforceCursorAssoc = false;
	            // This is done in the read stage, because moving the selection
	            // to a line end is going to trigger a layout anyway, so it
	            // can't be a pure write. It should be rare that it does any
	            // writing.
	            docView.enforceCursorAssoc();
	        }
	        return result;
	    }
	    get visibleTop() { return this.scaler.fromDOM(this.pixelViewport.top, 0); }
	    get visibleBottom() { return this.scaler.fromDOM(this.pixelViewport.bottom, 0); }
	    getViewport(bias, scrollTo) {
	        // This will divide VP.Margin between the top and the
	        // bottom, depending on the bias (the change in viewport position
	        // since the last update). It'll hold a number between 0 and 1
	        let marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
	        let map = this.heightMap, doc = this.state.doc, { visibleTop, visibleBottom } = this;
	        let viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).to);
	        // If scrollTo is given, make sure the viewport includes that position
	        if (scrollTo) {
	            if (scrollTo.head < viewport.from) {
	                let { top: newTop } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
	                viewport = new Viewport(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (visibleBottom - visibleTop) + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
	            }
	            else if (scrollTo.head > viewport.to) {
	                let { bottom: newBottom } = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0);
	                viewport = new Viewport(map.lineAt(newBottom - (visibleBottom - visibleTop) - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
	            }
	        }
	        return viewport;
	    }
	    mapViewport(viewport, changes) {
	        let from = changes.mapPos(viewport.from, -1), to = changes.mapPos(viewport.to, 1);
	        return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
	    }
	    // Checks if a given viewport covers the visible part of the
	    // document and not too much beyond that.
	    viewportIsAppropriate({ from, to }, bias = 0) {
	        let { top } = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0);
	        let { bottom } = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0);
	        let { visibleTop, visibleBottom } = this;
	        return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) &&
	            (to == this.state.doc.length ||
	                bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) &&
	            (top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */);
	    }
	    mapLineGaps(gaps, changes) {
	        if (!gaps.length || changes.empty)
	            return gaps;
	        let mapped = [];
	        for (let gap of gaps)
	            if (!changes.touchesRange(gap.from, gap.to))
	                mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
	        return mapped;
	    }
	    // Computes positions in the viewport where the start or end of a
	    // line should be hidden, trying to reuse existing line gaps when
	    // appropriate to avoid unneccesary redraws.
	    // Uses crude character-counting for the positioning and sizing,
	    // since actual DOM coordinates aren't always available and
	    // predictable. Relies on generous margins (see LG.Margin) to hide
	    // the artifacts this might produce from the user.
	    ensureLineGaps(current) {
	        let gaps = [];
	        // This won't work at all in predominantly right-to-left text.
	        if (this.heightOracle.direction != Direction.LTR)
	            return gaps;
	        this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, line => {
	            if (line.length < 10000 /* Margin */)
	                return;
	            let structure = lineStructure(line.from, line.to, this.state);
	            if (structure.total < 10000 /* Margin */)
	                return;
	            let viewFrom, viewTo;
	            if (this.heightOracle.lineWrapping) {
	                if (line.from != this.viewport.from)
	                    viewFrom = line.from;
	                else
	                    viewFrom = findPosition(structure, (this.visibleTop - line.top) / line.height);
	                if (line.to != this.viewport.to)
	                    viewTo = line.to;
	                else
	                    viewTo = findPosition(structure, (this.visibleBottom - line.top) / line.height);
	            }
	            else {
	                let totalWidth = structure.total * this.heightOracle.charWidth;
	                viewFrom = findPosition(structure, this.pixelViewport.left / totalWidth);
	                viewTo = findPosition(structure, this.pixelViewport.right / totalWidth);
	            }
	            let sel = this.state.selection.main;
	            // Make sure the gap doesn't cover a selection end
	            if (sel.from <= viewFrom && sel.to >= line.from)
	                viewFrom = sel.from;
	            if (sel.from <= line.to && sel.to >= viewTo)
	                viewTo = sel.to;
	            let gapTo = viewFrom - 10000 /* Margin */, gapFrom = viewTo + 10000 /* Margin */;
	            if (gapTo > line.from + 5000 /* HalfMargin */)
	                gaps.push(find(current, gap => gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000 /* HalfMargin */) ||
	                    new LineGap(line.from, gapTo, this.gapSize(line, gapTo, true, structure)));
	            if (gapFrom < line.to - 5000 /* HalfMargin */)
	                gaps.push(find(current, gap => gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ &&
	                    gap.from < gapFrom + 5000 /* HalfMargin */) ||
	                    new LineGap(gapFrom, line.to, this.gapSize(line, gapFrom, false, structure)));
	        });
	        return gaps;
	    }
	    gapSize(line, pos, start, structure) {
	        if (this.heightOracle.lineWrapping) {
	            let height = line.height * findFraction(structure, pos);
	            return start ? height : line.height - height;
	        }
	        else {
	            let ratio = findFraction(structure, pos);
	            return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
	        }
	    }
	    updateLineGaps(gaps) {
	        if (!LineGap.same(gaps, this.lineGaps)) {
	            this.lineGaps = gaps;
	            this.lineGapDeco = Decoration.set(gaps.map(gap => gap.draw(this.heightOracle.lineWrapping)));
	        }
	    }
	    computeVisibleRanges() {
	        let deco = this.state.facet(decorations);
	        if (this.lineGaps.length)
	            deco = deco.concat(this.lineGapDeco);
	        let ranges = [];
	        RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
	            span(from, to) { ranges.push({ from, to }); },
	            point() { }
	        }, 20);
	        let changed = ranges.length != this.visibleRanges.length ||
	            this.visibleRanges.some((r, i) => r.from != ranges[i].from || r.to != ranges[i].to);
	        this.visibleRanges = ranges;
	        return changed ? 4 /* Viewport */ : 0;
	    }
	    lineAt(pos, editorTop) {
	        editorTop += this.paddingTop;
	        return scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop, 0), this.scaler, editorTop);
	    }
	    lineAtHeight(height, editorTop) {
	        editorTop += this.paddingTop;
	        return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height, editorTop), QueryType.ByHeight, this.state.doc, editorTop, 0), this.scaler, editorTop);
	    }
	    blockAtHeight(height, editorTop) {
	        editorTop += this.paddingTop;
	        return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height, editorTop), this.state.doc, editorTop, 0), this.scaler, editorTop);
	    }
	    forEachLine(from, to, f, editorTop) {
	        editorTop += this.paddingTop;
	        return this.heightMap.forEachLine(from, to, this.state.doc, editorTop, 0, this.scaler.scale == 1 ? f : b => f(scaleBlock(b, this.scaler, editorTop)));
	    }
	    get contentHeight() {
	        return this.domHeight + this.paddingTop + this.paddingBottom;
	    }
	    get domHeight() {
	        return this.scaler.toDOM(this.heightMap.height, this.paddingTop);
	    }
	}
	class Viewport {
	    constructor(from, to) {
	        this.from = from;
	        this.to = to;
	    }
	}
	function lineStructure(from, to, state) {
	    let ranges = [], pos = from, total = 0;
	    RangeSet.spans(state.facet(decorations), from, to, {
	        span() { },
	        point(from, to) {
	            if (from > pos) {
	                ranges.push({ from: pos, to: from });
	                total += from - pos;
	            }
	            pos = to;
	        }
	    }, 20); // We're only interested in collapsed ranges of a significant size
	    if (pos < to) {
	        ranges.push({ from: pos, to });
	        total += to - pos;
	    }
	    return { total, ranges };
	}
	function findPosition({ total, ranges }, ratio) {
	    if (ratio <= 0)
	        return ranges[0].from;
	    if (ratio >= 1)
	        return ranges[ranges.length - 1].to;
	    let dist = Math.floor(total * ratio);
	    for (let i = 0;; i++) {
	        let { from, to } = ranges[i], size = to - from;
	        if (dist <= size)
	            return from + dist;
	        dist -= size;
	    }
	}
	function findFraction(structure, pos) {
	    let counted = 0;
	    for (let { from, to } of structure.ranges) {
	        if (pos <= to) {
	            counted += pos - from;
	            break;
	        }
	        counted += to - from;
	    }
	    return counted / structure.total;
	}
	function find(array, f) {
	    for (let val of array)
	        if (f(val))
	            return val;
	    return undefined;
	}
	// Don't scale when the document height is within the range of what
	// the DOM can handle.
	const IdScaler = {
	    toDOM(n) { return n; },
	    fromDOM(n) { return n; },
	    scale: 1
	};
	// When the height is too big (> VP.MaxDOMHeight), scale down the
	// regions outside the viewports so that the total height is
	// VP.MaxDOMHeight.
	class BigScaler {
	    constructor(doc, heightMap, viewports) {
	        let vpHeight = 0, base = 0, domBase = 0;
	        this.viewports = viewports.map(({ from, to }) => {
	            let top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
	            let bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
	            vpHeight += bottom - top;
	            return { from, to, top, bottom, domTop: 0, domBottom: 0 };
	        });
	        this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
	        for (let obj of this.viewports) {
	            obj.domTop = domBase + (obj.top - base) * this.scale;
	            domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
	            base = obj.bottom;
	        }
	    }
	    toDOM(n, top) {
	        n -= top;
	        for (let i = 0, base = 0, domBase = 0;; i++) {
	            let vp = i < this.viewports.length ? this.viewports[i] : null;
	            if (!vp || n < vp.top)
	                return domBase + (n - base) * this.scale + top;
	            if (n <= vp.bottom)
	                return vp.domTop + (n - vp.top) + top;
	            base = vp.bottom;
	            domBase = vp.domBottom;
	        }
	    }
	    fromDOM(n, top) {
	        n -= top;
	        for (let i = 0, base = 0, domBase = 0;; i++) {
	            let vp = i < this.viewports.length ? this.viewports[i] : null;
	            if (!vp || n < vp.domTop)
	                return base + (n - domBase) / this.scale + top;
	            if (n <= vp.domBottom)
	                return vp.top + (n - vp.domTop) + top;
	            base = vp.bottom;
	            domBase = vp.domBottom;
	        }
	    }
	}
	function scaleBlock(block, scaler, top) {
	    if (scaler.scale == 1)
	        return block;
	    let bTop = scaler.toDOM(block.top, top), bBottom = scaler.toDOM(block.bottom, top);
	    return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(b => scaleBlock(b, scaler, top)) : block.type);
	}

	const theme = /*@__PURE__*/Facet.define({ combine: strs => strs.join(" ") });
	const darkTheme = /*@__PURE__*/Facet.define({ combine: values => values.indexOf(true) > -1 });
	const baseThemeID = /*@__PURE__*/StyleModule.newName(), baseLightID = /*@__PURE__*/StyleModule.newName(), baseDarkID = /*@__PURE__*/StyleModule.newName();
	const lightDarkIDs = { "&light": "." + baseLightID, "&dark": "." + baseDarkID };
	function buildTheme(main, spec, scopes) {
	    return new StyleModule(spec, {
	        finish(sel) {
	            return /&/.test(sel) ? sel.replace(/&\w*/, m => {
	                if (m == "&")
	                    return main;
	                if (!scopes || !scopes[m])
	                    throw new RangeError(`Unsupported selector: ${m}`);
	                return scopes[m];
	            }) : main + " " + sel;
	        }
	    });
	}
	const baseTheme$8 = /*@__PURE__*/buildTheme("." + baseThemeID, {
	    "&": {
	        position: "relative !important",
	        boxSizing: "border-box",
	        "&.cm-focused": {
	            // Provide a simple default outline to make sure a focused
	            // editor is visually distinct. Can't leave the default behavior
	            // because that will apply to the content element, which is
	            // inside the scrollable container and doesn't include the
	            // gutters. We also can't use an 'auto' outline, since those
	            // are, for some reason, drawn behind the element content, which
	            // will cause things like the active line background to cover
	            // the outline (#297).
	            outline: "1px dotted #212121"
	        },
	        display: "flex !important",
	        flexDirection: "column"
	    },
	    ".cm-scroller": {
	        display: "flex !important",
	        alignItems: "flex-start !important",
	        fontFamily: "monospace",
	        lineHeight: 1.4,
	        height: "100%",
	        overflowX: "auto",
	        position: "relative",
	        zIndex: 0
	    },
	    ".cm-content": {
	        margin: 0,
	        flexGrow: 2,
	        minHeight: "100%",
	        display: "block",
	        whiteSpace: "pre",
	        wordWrap: "normal",
	        boxSizing: "border-box",
	        padding: "4px 0",
	        outline: "none"
	    },
	    ".cm-lineWrapping": {
	        whiteSpace: "pre-wrap",
	        wordBreak: "break-word",
	        overflowWrap: "anywhere"
	    },
	    "&light .cm-content": { caretColor: "black" },
	    "&dark .cm-content": { caretColor: "white" },
	    ".cm-line": {
	        display: "block",
	        padding: "0 2px 0 4px"
	    },
	    ".cm-selectionLayer": {
	        zIndex: -1,
	        contain: "size style"
	    },
	    ".cm-selectionBackground": {
	        position: "absolute",
	    },
	    "&light .cm-selectionBackground": {
	        background: "#d9d9d9"
	    },
	    "&dark .cm-selectionBackground": {
	        background: "#222"
	    },
	    "&light.cm-focused .cm-selectionBackground": {
	        background: "#d7d4f0"
	    },
	    "&dark.cm-focused .cm-selectionBackground": {
	        background: "#233"
	    },
	    ".cm-cursorLayer": {
	        zIndex: 100,
	        contain: "size style",
	        pointerEvents: "none"
	    },
	    "&.cm-focused .cm-cursorLayer": {
	        animation: "steps(1) cm-blink 1.2s infinite"
	    },
	    // Two animations defined so that we can switch between them to
	    // restart the animation without forcing another style
	    // recomputation.
	    "@keyframes cm-blink": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
	    "@keyframes cm-blink2": { "0%": {}, "50%": { visibility: "hidden" }, "100%": {} },
	    ".cm-cursor": {
	        position: "absolute",
	        borderLeft: "1.2px solid black",
	        marginLeft: "-0.6px",
	        pointerEvents: "none",
	        display: "none"
	    },
	    "&dark .cm-cursor": {
	        borderLeftColor: "#444"
	    },
	    "&.cm-focused .cm-cursor": {
	        display: "block"
	    },
	    "&light .cm-activeLine": { backgroundColor: "#f3f9ff" },
	    "&dark .cm-activeLine": { backgroundColor: "#223039" },
	    "&light .cm-specialChar": { color: "red" },
	    "&dark .cm-specialChar": { color: "#f78" },
	    ".cm-tab": {
	        display: "inline-block",
	        overflow: "hidden",
	        verticalAlign: "bottom"
	    },
	    ".cm-placeholder": {
	        color: "#888",
	        display: "inline-block"
	    },
	    ".cm-button": {
	        verticalAlign: "middle",
	        color: "inherit",
	        fontSize: "70%",
	        padding: ".2em 1em",
	        borderRadius: "3px"
	    },
	    "&light .cm-button": {
	        backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
	        border: "1px solid #888",
	        "&:active": {
	            backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
	        }
	    },
	    "&dark .cm-button": {
	        backgroundImage: "linear-gradient(#393939, #111)",
	        border: "1px solid #888",
	        "&:active": {
	            backgroundImage: "linear-gradient(#111, #333)"
	        }
	    },
	    ".cm-textfield": {
	        verticalAlign: "middle",
	        color: "inherit",
	        fontSize: "70%",
	        border: "1px solid silver",
	        padding: ".2em .5em"
	    },
	    "&light .cm-textfield": {
	        backgroundColor: "white"
	    },
	    "&dark .cm-textfield": {
	        border: "1px solid #555",
	        backgroundColor: "inherit"
	    }
	}, lightDarkIDs);

	const observeOptions = {
	    childList: true,
	    characterData: true,
	    subtree: true,
	    attributes: true,
	    characterDataOldValue: true
	};
	// IE11 has very broken mutation observers, so we also listen to
	// DOMCharacterDataModified there
	const useCharData = browser.ie && browser.ie_version <= 11;
	class DOMObserver {
	    constructor(view, onChange, onScrollChanged) {
	        this.view = view;
	        this.onChange = onChange;
	        this.onScrollChanged = onScrollChanged;
	        this.active = false;
	        this.ignoreSelection = new DOMSelection;
	        this.delayedFlush = -1;
	        this.queue = [];
	        this.lastFlush = 0;
	        this.scrollTargets = [];
	        this.intersection = null;
	        this.intersecting = false;
	        this.gapIntersection = null;
	        this.gaps = [];
	        // Used to work around a Safari Selection/shadow DOM bug (#414)
	        this._selectionRange = null;
	        // Timeout for scheduling check of the parents that need scroll handlers
	        this.parentCheck = -1;
	        this.dom = view.contentDOM;
	        this.observer = new MutationObserver(mutations => {
	            for (let mut of mutations)
	                this.queue.push(mut);
	            this._selectionRange = null;
	            // IE11 will sometimes (on typing over a selection or
	            // backspacing out a single character text node) call the
	            // observer callback before actually updating the DOM.
	            //
	            // Unrelatedly, iOS Safari will, when ending a composition,
	            // sometimes first clear it, deliver the mutations, and then
	            // reinsert the finished text. CodeMirror's handling of the
	            // deletion will prevent the reinsertion from happening,
	            // breaking composition.
	            if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) &&
	                mutations.some(m => m.type == "childList" && m.removedNodes.length ||
	                    m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
	                this.flushSoon();
	            else
	                this.flush();
	        });
	        if (useCharData)
	            this.onCharData = (event) => {
	                this.queue.push({ target: event.target,
	                    type: "characterData",
	                    oldValue: event.prevValue });
	                this.flushSoon();
	            };
	        this.onSelectionChange = this.onSelectionChange.bind(this);
	        this.start();
	        this.onScroll = this.onScroll.bind(this);
	        window.addEventListener("scroll", this.onScroll);
	        if (typeof IntersectionObserver == "function") {
	            this.intersection = new IntersectionObserver(entries => {
	                if (this.parentCheck < 0)
	                    this.parentCheck = setTimeout(this.listenForScroll.bind(this), 1000);
	                if (entries[entries.length - 1].intersectionRatio > 0 != this.intersecting) {
	                    this.intersecting = !this.intersecting;
	                    if (this.intersecting != this.view.inView)
	                        this.onScrollChanged(document.createEvent("Event"));
	                }
	            }, {});
	            this.intersection.observe(this.dom);
	            this.gapIntersection = new IntersectionObserver(entries => {
	                if (entries[entries.length - 1].intersectionRatio > 0)
	                    this.onScrollChanged(document.createEvent("Event"));
	            }, {});
	        }
	        this.listenForScroll();
	    }
	    onScroll(e) {
	        if (this.intersecting)
	            this.flush();
	        this.onScrollChanged(e);
	    }
	    updateGaps(gaps) {
	        if (this.gapIntersection && (gaps.length != this.gaps.length || this.gaps.some((g, i) => g != gaps[i]))) {
	            this.gapIntersection.disconnect();
	            for (let gap of gaps)
	                this.gapIntersection.observe(gap);
	            this.gaps = gaps;
	        }
	    }
	    onSelectionChange(event) {
	        if (this.lastFlush < Date.now() - 50)
	            this._selectionRange = null;
	        let { view } = this, sel = this.selectionRange;
	        if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel))
	            return;
	        let context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
	        if (context && context.ignoreEvent(event))
	            return;
	        // Deletions on IE11 fire their events in the wrong order, giving
	        // us a selection change event before the DOM changes are
	        // reported.
	        // (Selection.isCollapsed isn't reliable on IE)
	        if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty &&
	            sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
	            this.flushSoon();
	        else
	            this.flush();
	    }
	    get selectionRange() {
	        if (!this._selectionRange) {
	            let { root } = this.view, sel = getSelection(root);
	            // The Selection object is broken in shadow roots in Safari. See
	            // https://github.com/codemirror/codemirror.next/issues/414
	            if (browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM)
	                sel = safariSelectionRangeHack(this.view) || sel;
	            this._selectionRange = sel;
	        }
	        return this._selectionRange;
	    }
	    setSelectionRange(anchor, head) {
	        var _a;
	        if (!((_a = this._selectionRange) === null || _a === void 0 ? void 0 : _a.type))
	            this._selectionRange = { anchorNode: anchor.node, anchorOffset: anchor.offset,
	                focusNode: head.node, focusOffset: head.offset };
	    }
	    listenForScroll() {
	        this.parentCheck = -1;
	        let i = 0, changed = null;
	        for (let dom = this.dom; dom;) {
	            if (dom.nodeType == 1) {
	                if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom)
	                    i++;
	                else if (!changed)
	                    changed = this.scrollTargets.slice(0, i);
	                if (changed)
	                    changed.push(dom);
	                dom = dom.assignedSlot || dom.parentNode;
	            }
	            else if (dom.nodeType == 11) { // Shadow root
	                dom = dom.host;
	            }
	            else {
	                break;
	            }
	        }
	        if (i < this.scrollTargets.length && !changed)
	            changed = this.scrollTargets.slice(0, i);
	        if (changed) {
	            for (let dom of this.scrollTargets)
	                dom.removeEventListener("scroll", this.onScroll);
	            for (let dom of this.scrollTargets = changed)
	                dom.addEventListener("scroll", this.onScroll);
	        }
	    }
	    ignore(f) {
	        if (!this.active)
	            return f();
	        try {
	            this.stop();
	            return f();
	        }
	        finally {
	            this.start();
	            this.clear();
	        }
	    }
	    start() {
	        if (this.active)
	            return;
	        this.observer.observe(this.dom, observeOptions);
	        this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
	        if (useCharData)
	            this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
	        this.active = true;
	    }
	    stop() {
	        if (!this.active)
	            return;
	        this.active = false;
	        this.observer.disconnect();
	        this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
	        if (useCharData)
	            this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
	    }
	    clearSelection() {
	        this.ignoreSelection.set(this.selectionRange);
	    }
	    // Throw away any pending changes
	    clear() {
	        this.observer.takeRecords();
	        this.queue.length = 0;
	        this.clearSelection();
	    }
	    flushSoon() {
	        if (this.delayedFlush < 0)
	            this.delayedFlush = window.setTimeout(() => { this.delayedFlush = -1; this.flush(); }, 20);
	    }
	    forceFlush() {
	        if (this.delayedFlush >= 0) {
	            window.clearTimeout(this.delayedFlush);
	            this.delayedFlush = -1;
	            this.flush();
	        }
	    }
	    // Apply pending changes, if any
	    flush() {
	        if (this.delayedFlush >= 0)
	            return;
	        this.lastFlush = Date.now();
	        let records = this.queue;
	        for (let mut of this.observer.takeRecords())
	            records.push(mut);
	        if (records.length)
	            this.queue = [];
	        let selection = this.selectionRange;
	        let newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
	        if (records.length == 0 && !newSel)
	            return;
	        let from = -1, to = -1, typeOver = false;
	        for (let record of records) {
	            let range = this.readMutation(record);
	            if (!range)
	                continue;
	            if (range.typeOver)
	                typeOver = true;
	            if (from == -1) {
	                ({ from, to } = range);
	            }
	            else {
	                from = Math.min(range.from, from);
	                to = Math.max(range.to, to);
	            }
	        }
	        let startState = this.view.state;
	        if (from > -1 || newSel)
	            this.onChange(from, to, typeOver);
	        if (this.view.state == startState) { // The view wasn't updated
	            if (this.view.docView.dirty) {
	                this.ignore(() => this.view.docView.sync());
	                this.view.docView.dirty = 0 /* Not */;
	            }
	            if (newSel)
	                this.view.docView.updateSelection();
	        }
	        this.clearSelection();
	    }
	    readMutation(rec) {
	        let cView = this.view.docView.nearest(rec.target);
	        if (!cView || cView.ignoreMutation(rec))
	            return null;
	        cView.markDirty(rec.type == "attributes");
	        if (rec.type == "attributes")
	            cView.dirty |= 4 /* Attrs */;
	        if (rec.type == "childList") {
	            let childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
	            let childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
	            return { from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
	                to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd, typeOver: false };
	        }
	        else if (rec.type == "characterData") {
	            return { from: cView.posAtStart, to: cView.posAtEnd, typeOver: rec.target.nodeValue == rec.oldValue };
	        }
	        else {
	            return null;
	        }
	    }
	    destroy() {
	        this.stop();
	        if (this.intersection)
	            this.intersection.disconnect();
	        if (this.gapIntersection)
	            this.gapIntersection.disconnect();
	        for (let dom of this.scrollTargets)
	            dom.removeEventListener("scroll", this.onScroll);
	        window.removeEventListener("scroll", this.onScroll);
	        clearTimeout(this.parentCheck);
	    }
	}
	function findChild(cView, dom, dir) {
	    while (dom) {
	        let curView = ContentView.get(dom);
	        if (curView && curView.parent == cView)
	            return curView;
	        let parent = dom.parentNode;
	        dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
	    }
	    return null;
	}
	function safariSelectionRangeHack(view) {
	    let found = null;
	    // Because Safari (at least in 2018-2021) doesn't provide regular
	    // access to the selection inside a shadowroot, we have to perform a
	    // ridiculous hack to get at it—using `execCommand` to trigger a
	    // `beforeInput` event so that we can read the target range from the
	    // event.
	    function read(event) {
	        event.preventDefault();
	        event.stopImmediatePropagation();
	        found = event.getTargetRanges()[0];
	    }
	    view.contentDOM.addEventListener("beforeinput", read, true);
	    document.execCommand("indent");
	    view.contentDOM.removeEventListener("beforeinput", read, true);
	    if (!found)
	        return null;
	    let anchorNode = found.startContainer, anchorOffset = found.startOffset;
	    let focusNode = found.endContainer, focusOffset = found.endOffset;
	    let curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
	    // Since such a range doesn't distinguish between anchor and head,
	    // use a heuristic that flips it around if its end matches the
	    // current anchor.
	    if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset))
	        [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
	    return { anchorNode, anchorOffset, focusNode, focusOffset };
	}

	function applyDOMChange(view, start, end, typeOver) {
	    let change, newSel;
	    let sel = view.state.selection.main, bounds;
	    if (start > -1 && !view.state.readOnly && (bounds = view.docView.domBoundsAround(start, end, 0))) {
	        let { from, to } = bounds;
	        let selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
	        let reader = new DOMReader(selPoints, view);
	        reader.readRange(bounds.startDOM, bounds.endDOM);
	        newSel = selectionFromPoints(selPoints, from);
	        let preferredPos = sel.from, preferredSide = null;
	        // Prefer anchoring to end when Backspace is pressed (or, on
	        // Android, when something was deleted)
	        if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 ||
	            browser.android && reader.text.length < to - from) {
	            preferredPos = sel.to;
	            preferredSide = "end";
	        }
	        let diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
	        if (diff)
	            change = { from: from + diff.from, to: from + diff.toA,
	                insert: view.state.toText(reader.text.slice(diff.from, diff.toB)) };
	    }
	    else if (view.hasFocus || !view.state.facet(editable)) {
	        let domSel = view.observer.selectionRange;
	        let { impreciseHead: iHead, impreciseAnchor: iAnchor } = view.docView;
	        let head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset ||
	            !contains(view.contentDOM, domSel.focusNode)
	            ? view.state.selection.main.head
	            : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
	        let anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset ||
	            !contains(view.contentDOM, domSel.anchorNode)
	            ? view.state.selection.main.anchor
	            : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
	        if (head != sel.head || anchor != sel.anchor)
	            newSel = EditorSelection.single(anchor, head);
	    }
	    if (!change && !newSel)
	        return;
	    // Heuristic to notice typing over a selected character
	    if (!change && typeOver && !sel.empty && newSel && newSel.main.empty)
	        change = { from: sel.from, to: sel.to, insert: view.state.doc.slice(sel.from, sel.to) };
	    // If the change is inside the selection and covers most of it,
	    // assume it is a selection replace (with identical characters at
	    // the start/end not included in the diff)
	    else if (change && change.from >= sel.from && change.to <= sel.to &&
	        (change.from != sel.from || change.to != sel.to) &&
	        (sel.to - sel.from) - (change.to - change.from) <= 4)
	        change = {
	            from: sel.from, to: sel.to,
	            insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
	        };
	    if (change) {
	        let startState = view.state;
	        // Android browsers don't fire reasonable key events for enter,
	        // backspace, or delete. So this detects changes that look like
	        // they're caused by those keys, and reinterprets them as key
	        // events.
	        if (browser.android &&
	            ((change.from == sel.from && change.to == sel.to &&
	                change.insert.length == 1 && change.insert.lines == 2 &&
	                dispatchKey(view.contentDOM, "Enter", 13)) ||
	                (change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 &&
	                    dispatchKey(view.contentDOM, "Backspace", 8)) ||
	                (change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 &&
	                    dispatchKey(view.contentDOM, "Delete", 46))) ||
	            browser.ios && view.inputState.flushIOSKey(view))
	            return;
	        let text = change.insert.toString();
	        if (view.state.facet(inputHandler).some(h => h(view, change.from, change.to, text)))
	            return;
	        if (view.inputState.composing >= 0)
	            view.inputState.composing++;
	        let tr;
	        if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 &&
	            (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
	            let before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
	            let after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
	            tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) +
	                after));
	        }
	        else {
	            let changes = startState.changes(change);
	            tr = {
	                changes,
	                selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength
	                    ? startState.selection.replaceRange(newSel.main) : undefined
	            };
	        }
	        let userEvent = "input.type";
	        if (view.composing) {
	            userEvent += ".compose";
	            if (view.inputState.compositionFirstChange) {
	                userEvent += ".start";
	                view.inputState.compositionFirstChange = false;
	            }
	        }
	        view.dispatch(tr, { scrollIntoView: true, userEvent });
	    }
	    else if (newSel && !newSel.main.eq(sel)) {
	        let scrollIntoView = false, userEvent = "select";
	        if (view.inputState.lastSelectionTime > Date.now() - 50) {
	            if (view.inputState.lastSelectionOrigin == "select")
	                scrollIntoView = true;
	            userEvent = view.inputState.lastSelectionOrigin;
	        }
	        view.dispatch({ selection: newSel, scrollIntoView, userEvent });
	    }
	}
	function findDiff(a, b, preferredPos, preferredSide) {
	    let minLen = Math.min(a.length, b.length);
	    let from = 0;
	    while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from))
	        from++;
	    if (from == minLen && a.length == b.length)
	        return null;
	    let toA = a.length, toB = b.length;
	    while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
	        toA--;
	        toB--;
	    }
	    if (preferredSide == "end") {
	        let adjust = Math.max(0, from - Math.min(toA, toB));
	        preferredPos -= toA + adjust - from;
	    }
	    if (toA < from && a.length < b.length) {
	        let move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
	        from -= move;
	        toB = from + (toB - toA);
	        toA = from;
	    }
	    else if (toB < from) {
	        let move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
	        from -= move;
	        toA = from + (toA - toB);
	        toB = from;
	    }
	    return { from, toA, toB };
	}
	class DOMReader {
	    constructor(points, view) {
	        this.points = points;
	        this.view = view;
	        this.text = "";
	        this.lineBreak = view.state.lineBreak;
	    }
	    readRange(start, end) {
	        if (!start)
	            return;
	        let parent = start.parentNode;
	        for (let cur = start;;) {
	            this.findPointBefore(parent, cur);
	            this.readNode(cur);
	            let next = cur.nextSibling;
	            if (next == end)
	                break;
	            let view = ContentView.get(cur), nextView = ContentView.get(next);
	            if (view && nextView ? view.breakAfter :
	                (view ? view.breakAfter : isBlockElement(cur)) ||
	                    (isBlockElement(next) && (cur.nodeName != "BR" || cur.cmIgnore)))
	                this.text += this.lineBreak;
	            cur = next;
	        }
	        this.findPointBefore(parent, end);
	    }
	    readNode(node) {
	        if (node.cmIgnore)
	            return;
	        let view = ContentView.get(node);
	        let fromView = view && view.overrideDOMText;
	        let text;
	        if (fromView != null)
	            text = fromView.sliceString(0, undefined, this.lineBreak);
	        else if (node.nodeType == 3)
	            text = node.nodeValue;
	        else if (node.nodeName == "BR")
	            text = node.nextSibling ? this.lineBreak : "";
	        else if (node.nodeType == 1)
	            this.readRange(node.firstChild, null);
	        if (text != null) {
	            this.findPointIn(node, text.length);
	            this.text += text;
	            // Chrome inserts two newlines when pressing shift-enter at the
	            // end of a line. This drops one of those.
	            if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text))
	                this.text = this.text.slice(0, -1);
	        }
	    }
	    findPointBefore(node, next) {
	        for (let point of this.points)
	            if (point.node == node && node.childNodes[point.offset] == next)
	                point.pos = this.text.length;
	    }
	    findPointIn(node, maxLen) {
	        for (let point of this.points)
	            if (point.node == node)
	                point.pos = this.text.length + Math.min(point.offset, maxLen);
	    }
	}
	function isBlockElement(node) {
	    return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
	}
	class DOMPoint {
	    constructor(node, offset) {
	        this.node = node;
	        this.offset = offset;
	        this.pos = -1;
	    }
	}
	function selectionPoints(view) {
	    let result = [];
	    if (view.root.activeElement != view.contentDOM)
	        return result;
	    let { anchorNode, anchorOffset, focusNode, focusOffset } = view.observer.selectionRange;
	    if (anchorNode) {
	        result.push(new DOMPoint(anchorNode, anchorOffset));
	        if (focusNode != anchorNode || focusOffset != anchorOffset)
	            result.push(new DOMPoint(focusNode, focusOffset));
	    }
	    return result;
	}
	function selectionFromPoints(points, base) {
	    if (points.length == 0)
	        return null;
	    let anchor = points[0].pos, head = points.length == 2 ? points[1].pos : anchor;
	    return anchor > -1 && head > -1 ? EditorSelection.single(anchor + base, head + base) : null;
	}

	// The editor's update state machine looks something like this:
	//
	//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
	//                                         ↑      ↓
	//                                         Updating (measure)
	//
	// The difference between 'Idle' and 'Idle (unchecked)' lies in
	// whether a layout check has been scheduled. A regular update through
	// the `update` method updates the DOM in a write-only fashion, and
	// relies on a check (scheduled with `requestAnimationFrame`) to make
	// sure everything is where it should be and the viewport covers the
	// visible code. That check continues to measure and then optionally
	// update until it reaches a coherent state.
	/**
	An editor view represents the editor's user interface. It holds
	the editable DOM surface, and possibly other elements such as the
	line number gutter. It handles events and dispatches state
	transactions for editing actions.
	*/
	class EditorView {
	    /**
	    Construct a new view. You'll usually want to put `view.dom` into
	    your document after creating a view, so that the user can see
	    it.
	    */
	    constructor(
	    /**
	    Initialization options.
	    */
	    config = {}) {
	        this.plugins = [];
	        this.editorAttrs = {};
	        this.contentAttrs = {};
	        this.bidiCache = [];
	        this.destroyed = false;
	        /**
	        @internal
	        */
	        this.updateState = 2 /* Updating */;
	        /**
	        @internal
	        */
	        this.measureScheduled = -1;
	        /**
	        @internal
	        */
	        this.measureRequests = [];
	        this.contentDOM = document.createElement("div");
	        this.scrollDOM = document.createElement("div");
	        this.scrollDOM.tabIndex = -1;
	        this.scrollDOM.className = "cm-scroller";
	        this.scrollDOM.appendChild(this.contentDOM);
	        this.announceDOM = document.createElement("div");
	        this.announceDOM.style.cssText = "position: absolute; top: -10000px";
	        this.announceDOM.setAttribute("aria-live", "polite");
	        this.dom = document.createElement("div");
	        this.dom.appendChild(this.announceDOM);
	        this.dom.appendChild(this.scrollDOM);
	        this._dispatch = config.dispatch || ((tr) => this.update([tr]));
	        this.dispatch = this.dispatch.bind(this);
	        this.root = (config.root || document);
	        this.viewState = new ViewState(config.state || EditorState.create());
	        this.plugins = this.state.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
	        this.observer = new DOMObserver(this, (from, to, typeOver) => {
	            applyDOMChange(this, from, to, typeOver);
	        }, event => {
	            this.inputState.runScrollHandlers(this, event);
	            if (this.observer.intersecting)
	                this.measure();
	        });
	        this.inputState = new InputState(this);
	        this.docView = new DocView(this);
	        this.mountStyles();
	        this.updateAttrs();
	        this.updateState = 0 /* Idle */;
	        ensureGlobalHandler();
	        this.requestMeasure();
	        if (config.parent)
	            config.parent.appendChild(this.dom);
	    }
	    /**
	    The current editor state.
	    */
	    get state() { return this.viewState.state; }
	    /**
	    To be able to display large documents without consuming too much
	    memory or overloading the browser, CodeMirror only draws the
	    code that is visible (plus a margin around it) to the DOM. This
	    property tells you the extent of the current drawn viewport, in
	    document positions.
	    */
	    get viewport() { return this.viewState.viewport; }
	    /**
	    When there are, for example, large collapsed ranges in the
	    viewport, its size can be a lot bigger than the actual visible
	    content. Thus, if you are doing something like styling the
	    content in the viewport, it is preferable to only do so for
	    these ranges, which are the subset of the viewport that is
	    actually drawn.
	    */
	    get visibleRanges() { return this.viewState.visibleRanges; }
	    /**
	    Returns false when the editor is entirely scrolled out of view
	    or otherwise hidden.
	    */
	    get inView() { return this.viewState.inView; }
	    /**
	    Indicates whether the user is currently composing text via
	    [IME](https://en.wikipedia.org/wiki/Input_method).
	    */
	    get composing() { return this.inputState.composing > 0; }
	    dispatch(...input) {
	        this._dispatch(input.length == 1 && input[0] instanceof Transaction ? input[0]
	            : this.state.update(...input));
	    }
	    /**
	    Update the view for the given array of transactions. This will
	    update the visible document and selection to match the state
	    produced by the transactions, and notify view plugins of the
	    change. You should usually call
	    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
	    as a primitive.
	    */
	    update(transactions) {
	        if (this.updateState != 0 /* Idle */)
	            throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
	        let redrawn = false, update;
	        let state = this.state;
	        for (let tr of transactions) {
	            if (tr.startState != state)
	                throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
	            state = tr.state;
	        }
	        if (this.destroyed) {
	            this.viewState.state = state;
	            return;
	        }
	        // When the phrases change, redraw the editor
	        if (state.facet(EditorState.phrases) != this.state.facet(EditorState.phrases))
	            return this.setState(state);
	        update = new ViewUpdate(this, state, transactions);
	        let scrollPos = null;
	        try {
	            this.updateState = 2 /* Updating */;
	            for (let tr of transactions) {
	                if (scrollPos)
	                    scrollPos = scrollPos.map(tr.changes);
	                if (tr.scrollIntoView) {
	                    let { main } = tr.state.selection;
	                    scrollPos = main.empty ? main : EditorSelection.cursor(main.head, main.head > main.anchor ? -1 : 1);
	                }
	                for (let e of tr.effects)
	                    if (e.is(scrollTo))
	                        scrollPos = e.value;
	            }
	            this.viewState.update(update, scrollPos);
	            this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
	            if (!update.empty) {
	                this.updatePlugins(update);
	                this.inputState.update(update);
	            }
	            redrawn = this.docView.update(update);
	            if (this.state.facet(styleModule) != this.styleModules)
	                this.mountStyles();
	            this.updateAttrs();
	            this.showAnnouncements(transactions);
	        }
	        finally {
	            this.updateState = 0 /* Idle */;
	        }
	        if (redrawn || scrollPos || this.viewState.mustEnforceCursorAssoc)
	            this.requestMeasure();
	        if (!update.empty)
	            for (let listener of this.state.facet(updateListener))
	                listener(update);
	    }
	    /**
	    Reset the view to the given state. (This will cause the entire
	    document to be redrawn and all view plugins to be reinitialized,
	    so you should probably only use it when the new state isn't
	    derived from the old state. Otherwise, use
	    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
	    */
	    setState(newState) {
	        if (this.updateState != 0 /* Idle */)
	            throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
	        if (this.destroyed) {
	            this.viewState.state = newState;
	            return;
	        }
	        this.updateState = 2 /* Updating */;
	        try {
	            for (let plugin of this.plugins)
	                plugin.destroy(this);
	            this.viewState = new ViewState(newState);
	            this.plugins = newState.facet(viewPlugin).map(spec => new PluginInstance(spec).update(this));
	            this.docView = new DocView(this);
	            this.inputState.ensureHandlers(this);
	            this.mountStyles();
	            this.updateAttrs();
	            this.bidiCache = [];
	        }
	        finally {
	            this.updateState = 0 /* Idle */;
	        }
	        this.requestMeasure();
	    }
	    updatePlugins(update) {
	        let prevSpecs = update.startState.facet(viewPlugin), specs = update.state.facet(viewPlugin);
	        if (prevSpecs != specs) {
	            let newPlugins = [];
	            for (let spec of specs) {
	                let found = prevSpecs.indexOf(spec);
	                if (found < 0) {
	                    newPlugins.push(new PluginInstance(spec));
	                }
	                else {
	                    let plugin = this.plugins[found];
	                    plugin.mustUpdate = update;
	                    newPlugins.push(plugin);
	                }
	            }
	            for (let plugin of this.plugins)
	                if (plugin.mustUpdate != update)
	                    plugin.destroy(this);
	            this.plugins = newPlugins;
	            this.inputState.ensureHandlers(this);
	        }
	        else {
	            for (let p of this.plugins)
	                p.mustUpdate = update;
	        }
	        for (let i = 0; i < this.plugins.length; i++)
	            this.plugins[i] = this.plugins[i].update(this);
	    }
	    /**
	    @internal
	    */
	    measure(flush = true) {
	        if (this.destroyed)
	            return;
	        if (this.measureScheduled > -1)
	            cancelAnimationFrame(this.measureScheduled);
	        this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
	        if (flush)
	            this.observer.flush();
	        let updated = null;
	        try {
	            for (let i = 0;; i++) {
	                this.updateState = 1 /* Measuring */;
	                let oldViewport = this.viewport;
	                let changed = this.viewState.measure(this.docView, i > 0);
	                if (!changed && !this.measureRequests.length && this.viewState.scrollTo == null)
	                    break;
	                if (i > 5) {
	                    console.warn("Viewport failed to stabilize");
	                    break;
	                }
	                let measuring = [];
	                // Only run measure requests in this cycle when the viewport didn't change
	                if (!(changed & 4 /* Viewport */))
	                    [this.measureRequests, measuring] = [measuring, this.measureRequests];
	                let measured = measuring.map(m => {
	                    try {
	                        return m.read(this);
	                    }
	                    catch (e) {
	                        logException(this.state, e);
	                        return BadMeasure;
	                    }
	                });
	                let update = new ViewUpdate(this, this.state);
	                update.flags |= changed;
	                if (!updated)
	                    updated = update;
	                else
	                    updated.flags |= changed;
	                this.updateState = 2 /* Updating */;
	                if (!update.empty) {
	                    this.updatePlugins(update);
	                    this.inputState.update(update);
	                }
	                this.updateAttrs();
	                if (changed)
	                    this.docView.update(update);
	                for (let i = 0; i < measuring.length; i++)
	                    if (measured[i] != BadMeasure) {
	                        try {
	                            measuring[i].write(measured[i], this);
	                        }
	                        catch (e) {
	                            logException(this.state, e);
	                        }
	                    }
	                if (this.viewState.scrollTo) {
	                    this.docView.scrollRangeIntoView(this.viewState.scrollTo);
	                    this.viewState.scrollTo = null;
	                }
	                if (this.viewport.from == oldViewport.from && this.viewport.to == oldViewport.to && this.measureRequests.length == 0)
	                    break;
	            }
	        }
	        finally {
	            this.updateState = 0 /* Idle */;
	        }
	        this.measureScheduled = -1;
	        if (updated && !updated.empty)
	            for (let listener of this.state.facet(updateListener))
	                listener(updated);
	    }
	    /**
	    Get the CSS classes for the currently active editor themes.
	    */
	    get themeClasses() {
	        return baseThemeID + " " +
	            (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " +
	            this.state.facet(theme);
	    }
	    updateAttrs() {
	        let editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
	            class: "cm-editor" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
	        });
	        updateAttrs(this.dom, this.editorAttrs, editorAttrs);
	        this.editorAttrs = editorAttrs;
	        let contentAttrs = {
	            spellcheck: "false",
	            autocorrect: "off",
	            autocapitalize: "off",
	            contenteditable: !this.state.facet(editable) ? "false" : contentEditablePlainTextSupported() ? "plaintext-only" : "true",
	            class: "cm-content",
	            style: `${browser.tabSize}: ${this.state.tabSize}`,
	            role: "textbox",
	            "aria-multiline": "true"
	        };
	        if (this.state.readOnly)
	            contentAttrs["aria-readonly"] = "true";
	        combineAttrs(this.state.facet(contentAttributes), contentAttrs);
	        updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
	        this.contentAttrs = contentAttrs;
	    }
	    showAnnouncements(trs) {
	        let first = true;
	        for (let tr of trs)
	            for (let effect of tr.effects)
	                if (effect.is(EditorView.announce)) {
	                    if (first)
	                        this.announceDOM.textContent = "";
	                    first = false;
	                    let div = this.announceDOM.appendChild(document.createElement("div"));
	                    div.textContent = effect.value;
	                }
	    }
	    mountStyles() {
	        this.styleModules = this.state.facet(styleModule);
	        StyleModule.mount(this.root, this.styleModules.concat(baseTheme$8).reverse());
	    }
	    readMeasured() {
	        if (this.updateState == 2 /* Updating */)
	            throw new Error("Reading the editor layout isn't allowed during an update");
	        if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1)
	            this.measure(false);
	    }
	    /**
	    Schedule a layout measurement, optionally providing callbacks to
	    do custom DOM measuring followed by a DOM write phase. Using
	    this is preferable reading DOM layout directly from, for
	    example, an event handler, because it'll make sure measuring and
	    drawing done by other components is synchronized, avoiding
	    unnecessary DOM layout computations.
	    */
	    requestMeasure(request) {
	        if (this.measureScheduled < 0)
	            this.measureScheduled = requestAnimationFrame(() => this.measure());
	        if (request) {
	            if (request.key != null)
	                for (let i = 0; i < this.measureRequests.length; i++) {
	                    if (this.measureRequests[i].key === request.key) {
	                        this.measureRequests[i] = request;
	                        return;
	                    }
	                }
	            this.measureRequests.push(request);
	        }
	    }
	    /**
	    Collect all values provided by the active plugins for a given
	    field.
	    */
	    pluginField(field) {
	        let result = [];
	        for (let plugin of this.plugins)
	            plugin.update(this).takeField(field, result);
	        return result;
	    }
	    /**
	    Get the value of a specific plugin, if present. Note that
	    plugins that crash can be dropped from a view, so even when you
	    know you registered a given plugin, it is recommended to check
	    the return value of this method.
	    */
	    plugin(plugin) {
	        for (let inst of this.plugins)
	            if (inst.spec == plugin)
	                return inst.update(this).value;
	        return null;
	    }
	    /**
	    Find the line or block widget at the given vertical position.
	    
	    By default, this position is interpreted as a screen position,
	    meaning `docTop` is set to the DOM top position of the editor
	    content (forcing a layout). You can pass a different `docTop`
	    value—for example 0 to interpret `height` as a document-relative
	    position, or a precomputed document top
	    (`view.contentDOM.getBoundingClientRect().top`) to limit layout
	    queries.
	    */
	    blockAtHeight(height, docTop) {
	        this.readMeasured();
	        return this.viewState.blockAtHeight(height, ensureTop(docTop, this.contentDOM));
	    }
	    /**
	    Find information for the visual line (see
	    [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
	    vertical position. The resulting block info might hold another
	    array of block info structs in its `type` field if this line
	    consists of more than one block.
	    
	    Defaults to treating `height` as a screen position. See
	    [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
	    interpretation of the `docTop` parameter.
	    */
	    visualLineAtHeight(height, docTop) {
	        this.readMeasured();
	        return this.viewState.lineAtHeight(height, ensureTop(docTop, this.contentDOM));
	    }
	    /**
	    Iterate over the height information of the visual lines in the
	    viewport. The heights of lines are reported relative to the
	    given document top, which defaults to the screen position of the
	    document (forcing a layout).
	    */
	    viewportLines(f, docTop) {
	        let { from, to } = this.viewport;
	        this.viewState.forEachLine(from, to, f, ensureTop(docTop, this.contentDOM));
	    }
	    /**
	    Find the extent and height of the visual line (a range delimited
	    on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
	    line breaks, or the start/end of the document) at the given position.
	    
	    Vertical positions are computed relative to the `docTop`
	    argument, which defaults to 0 for this method. You can pass
	    `view.contentDOM.getBoundingClientRect().top` here to get screen
	    coordinates.
	    */
	    visualLineAt(pos, docTop = 0) {
	        return this.viewState.lineAt(pos, docTop);
	    }
	    /**
	    The editor's total content height.
	    */
	    get contentHeight() {
	        return this.viewState.contentHeight;
	    }
	    /**
	    Move a cursor position by [grapheme
	    cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
	    the motion is away from the line start, or towards it. Motion in
	    bidirectional text is in visual order, in the editor's [text
	    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
	    position was the last one on the line, the returned position
	    will be across the line break. If there is no further line, the
	    original position is returned.
	    
	    By default, this method moves over a single cluster. The
	    optional `by` argument can be used to move across more. It will
	    be called with the first cluster as argument, and should return
	    a predicate that determines, for each subsequent cluster,
	    whether it should also be moved over.
	    */
	    moveByChar(start, forward, by) {
	        return skipAtoms(this, start, moveByChar(this, start, forward, by));
	    }
	    /**
	    Move a cursor position across the next group of either
	    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
	    non-whitespace characters.
	    */
	    moveByGroup(start, forward) {
	        return skipAtoms(this, start, moveByChar(this, start, forward, initial => byGroup(this, start.head, initial)));
	    }
	    /**
	    Move to the next line boundary in the given direction. If
	    `includeWrap` is true, line wrapping is on, and there is a
	    further wrap point on the current line, the wrap point will be
	    returned. Otherwise this function will return the start or end
	    of the line.
	    */
	    moveToLineBoundary(start, forward, includeWrap = true) {
	        return moveToLineBoundary(this, start, forward, includeWrap);
	    }
	    /**
	    Move a cursor position vertically. When `distance` isn't given,
	    it defaults to moving to the next line (including wrapped
	    lines). Otherwise, `distance` should provide a positive distance
	    in pixels.
	    
	    When `start` has a
	    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
	    motion will use that as a target horizontal position. Otherwise,
	    the cursor's own horizontal position is used. The returned
	    cursor will have its goal column set to whichever column was
	    used.
	    */
	    moveVertically(start, forward, distance) {
	        return skipAtoms(this, start, moveVertically(this, start, forward, distance));
	    }
	    /**
	    Scroll the given document position into view.
	    */
	    scrollPosIntoView(pos) {
	        this.viewState.scrollTo = EditorSelection.cursor(pos);
	        this.requestMeasure();
	    }
	    /**
	    Find the DOM parent node and offset (child offset if `node` is
	    an element, character offset when it is a text node) at the
	    given document position.
	    */
	    domAtPos(pos) {
	        return this.docView.domAtPos(pos);
	    }
	    /**
	    Find the document position at the given DOM node. Can be useful
	    for associating positions with DOM events. Will raise an error
	    when `node` isn't part of the editor content.
	    */
	    posAtDOM(node, offset = 0) {
	        return this.docView.posFromDOM(node, offset);
	    }
	    posAtCoords(coords, precise = true) {
	        this.readMeasured();
	        return posAtCoords(this, coords, precise);
	    }
	    /**
	    Get the screen coordinates at the given document position.
	    `side` determines whether the coordinates are based on the
	    element before (-1) or after (1) the position (if no element is
	    available on the given side, the method will transparently use
	    another strategy to get reasonable coordinates).
	    */
	    coordsAtPos(pos, side = 1) {
	        this.readMeasured();
	        let rect = this.docView.coordsAt(pos, side);
	        if (!rect || rect.left == rect.right)
	            return rect;
	        let line = this.state.doc.lineAt(pos), order = this.bidiSpans(line);
	        let span = order[BidiSpan.find(order, pos - line.from, -1, side)];
	        return flattenRect(rect, (span.dir == Direction.LTR) == (side > 0));
	    }
	    /**
	    The default width of a character in the editor. May not
	    accurately reflect the width of all characters (given variable
	    width fonts or styling of invididual ranges).
	    */
	    get defaultCharacterWidth() { return this.viewState.heightOracle.charWidth; }
	    /**
	    The default height of a line in the editor. May not be accurate
	    for all lines.
	    */
	    get defaultLineHeight() { return this.viewState.heightOracle.lineHeight; }
	    /**
	    The text direction
	    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
	    CSS property) of the editor.
	    */
	    get textDirection() { return this.viewState.heightOracle.direction; }
	    /**
	    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
	    (as determined by the
	    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
	    CSS property of its content element).
	    */
	    get lineWrapping() { return this.viewState.heightOracle.lineWrapping; }
	    /**
	    Returns the bidirectional text structure of the given line
	    (which should be in the current document) as an array of span
	    objects. The order of these spans matches the [text
	    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
	    left-to-right, the leftmost spans come first, otherwise the
	    rightmost spans come first.
	    */
	    bidiSpans(line) {
	        if (line.length > MaxBidiLine)
	            return trivialOrder(line.length);
	        let dir = this.textDirection;
	        for (let entry of this.bidiCache)
	            if (entry.from == line.from && entry.dir == dir)
	                return entry.order;
	        let order = computeOrder(line.text, this.textDirection);
	        this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
	        return order;
	    }
	    /**
	    Check whether the editor has focus.
	    */
	    get hasFocus() {
	        var _a;
	        // Safari return false for hasFocus when the context menu is open
	        // or closing, which leads us to ignore selection changes from the
	        // context menu because it looks like the editor isn't focused.
	        // This kludges around that.
	        return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) &&
	            this.root.activeElement == this.contentDOM;
	    }
	    /**
	    Put focus on the editor.
	    */
	    focus() {
	        this.observer.ignore(() => {
	            focusPreventScroll(this.contentDOM);
	            this.docView.updateSelection();
	        });
	    }
	    /**
	    Clean up this editor view, removing its element from the
	    document, unregistering event handlers, and notifying
	    plugins. The view instance can no longer be used after
	    calling this.
	    */
	    destroy() {
	        for (let plugin of this.plugins)
	            plugin.destroy(this);
	        this.plugins = [];
	        this.inputState.destroy();
	        this.dom.remove();
	        this.observer.destroy();
	        if (this.measureScheduled > -1)
	            cancelAnimationFrame(this.measureScheduled);
	        this.destroyed = true;
	    }
	    /**
	    Facet that can be used to add DOM event handlers. The value
	    should be an object mapping event names to handler functions. The
	    first such function to return true will be assumed to have handled
	    that event, and no other handlers or built-in behavior will be
	    activated for it.
	    These are registered on the [content
	    element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
	    handlers, which will be called any time the editor's [scroll
	    element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
	    is scrolled.
	    */
	    static domEventHandlers(handlers) {
	        return ViewPlugin.define(() => ({}), { eventHandlers: handlers });
	    }
	    /**
	    Create a theme extension. The first argument can be a
	    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
	    style spec providing the styles for the theme. These will be
	    prefixed with a generated class for the style.
	    
	    Because the selectors will be prefixed with a scope class, rule
	    that directly match the editor's [wrapper
	    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
	    added—need to be explicitly differentiated by adding an `&` to
	    the selector for that element—for example
	    `&.cm-focused`.
	    
	    When `dark` is set to true, the theme will be marked as dark,
	    which will cause the `&dark` rules from [base
	    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
	    `&light` when a light theme is active).
	    */
	    static theme(spec, options) {
	        let prefix = StyleModule.newName();
	        let result = [theme.of(prefix), styleModule.of(buildTheme(`.${prefix}`, spec))];
	        if (options && options.dark)
	            result.push(darkTheme.of(true));
	        return result;
	    }
	    /**
	    Create an extension that adds styles to the base theme. Like
	    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
	    place of the editor wrapper element when directly targeting
	    that. You can also use `&dark` or `&light` instead to only
	    target editors with a dark or light theme.
	    */
	    static baseTheme(spec) {
	        return Prec.fallback(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
	    }
	}
	/**
	Effect that can be [added](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) to a
	transaction to make it scroll the given range into view.
	*/
	EditorView.scrollTo = scrollTo;
	/**
	Facet to add a [style
	module](https://github.com/marijnh/style-mod#documentation) to
	an editor view. The view will ensure that the module is
	mounted in its [document
	root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
	*/
	EditorView.styleModule = styleModule;
	/**
	An input handler can override the way changes to the editable
	DOM content are handled. Handlers are passed the document
	positions between which the change was found, and the new
	content. When one returns true, no further input handlers are
	called and the default behavior is prevented.
	*/
	EditorView.inputHandler = inputHandler;
	/**
	Allows you to provide a function that should be called when the
	library catches an exception from an extension (mostly from view
	plugins, but may be used by other extensions to route exceptions
	from user-code-provided callbacks). This is mostly useful for
	debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
	*/
	EditorView.exceptionSink = exceptionSink;
	/**
	A facet that can be used to register a function to be called
	every time the view updates.
	*/
	EditorView.updateListener = updateListener;
	/**
	Facet that controls whether the editor content DOM is editable.
	When its highest-precedence value is `false`, the element will
	not longer have its `contenteditable` attribute set. (Note that
	this doesn't affect API calls that change the editor content,
	even when those are bound to keys or buttons. See the
	[`readOnly`](https://codemirror.net/6/docs/ref/#state.EditorState.readOnly) facet for that.)
	*/
	EditorView.editable = editable;
	/**
	Allows you to influence the way mouse selection happens. The
	functions in this facet will be called for a `mousedown` event
	on the editor, and can return an object that overrides the way a
	selection is computed from that mouse click or drag.
	*/
	EditorView.mouseSelectionStyle = mouseSelectionStyle;
	/**
	Facet used to configure whether a given selection drag event
	should move or copy the selection. The given predicate will be
	called with the `mousedown` event, and can return `true` when
	the drag should move the content.
	*/
	EditorView.dragMovesSelection = dragMovesSelection$1;
	/**
	Facet used to configure whether a given selecting click adds
	a new range to the existing selection or replaces it entirely.
	*/
	EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
	/**
	A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
	are shown in the view. See also [view
	plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
	mechanism for providing decorations.
	*/
	EditorView.decorations = decorations;
	/**
	Facet that provides additional DOM attributes for the editor's
	editable DOM element.
	*/
	EditorView.contentAttributes = contentAttributes;
	/**
	Facet that provides DOM attributes for the editor's outer
	element.
	*/
	EditorView.editorAttributes = editorAttributes;
	/**
	An extension that enables line wrapping in the editor (by
	setting CSS `white-space` to `pre-wrap` in the content).
	*/
	EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({ "class": "cm-lineWrapping" });
	/**
	State effect used to include screen reader announcements in a
	transaction. These will be added to the DOM in a visually hidden
	element with `aria-live="polite"` set, and should be used to
	describe effects that are visually obvious but may not be
	noticed by screen reader users (such as moving to the next
	search match).
	*/
	EditorView.announce = /*@__PURE__*/StateEffect.define();
	// Maximum line length for which we compute accurate bidi info
	const MaxBidiLine = 4096;
	function ensureTop(given, dom) {
	    return given == null ? dom.getBoundingClientRect().top : given;
	}
	let resizeDebounce = -1;
	function ensureGlobalHandler() {
	    window.addEventListener("resize", () => {
	        if (resizeDebounce == -1)
	            resizeDebounce = setTimeout(handleResize, 50);
	    });
	}
	function handleResize() {
	    resizeDebounce = -1;
	    let found = document.querySelectorAll(".cm-content");
	    for (let i = 0; i < found.length; i++) {
	        let docView = ContentView.get(found[i]);
	        if (docView)
	            docView.editorView.requestMeasure();
	    }
	}
	const BadMeasure = {};
	class CachedOrder {
	    constructor(from, to, dir, order) {
	        this.from = from;
	        this.to = to;
	        this.dir = dir;
	        this.order = order;
	    }
	    static update(cache, changes) {
	        if (changes.empty)
	            return cache;
	        let result = [], lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
	        for (let i = Math.max(0, cache.length - 10); i < cache.length; i++) {
	            let entry = cache[i];
	            if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to))
	                result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
	        }
	        return result;
	    }
	}

	const currentPlatform = typeof navigator == "undefined" ? "key"
	    : /*@__PURE__*//Mac/.test(navigator.platform) ? "mac"
	        : /*@__PURE__*//Win/.test(navigator.platform) ? "win"
	            : /*@__PURE__*//Linux|X11/.test(navigator.platform) ? "linux"
	                : "key";
	function normalizeKeyName(name, platform) {
	    const parts = name.split(/-(?!$)/);
	    let result = parts[parts.length - 1];
	    if (result == "Space")
	        result = " ";
	    let alt, ctrl, shift, meta;
	    for (let i = 0; i < parts.length - 1; ++i) {
	        const mod = parts[i];
	        if (/^(cmd|meta|m)$/i.test(mod))
	            meta = true;
	        else if (/^a(lt)?$/i.test(mod))
	            alt = true;
	        else if (/^(c|ctrl|control)$/i.test(mod))
	            ctrl = true;
	        else if (/^s(hift)?$/i.test(mod))
	            shift = true;
	        else if (/^mod$/i.test(mod)) {
	            if (platform == "mac")
	                meta = true;
	            else
	                ctrl = true;
	        }
	        else
	            throw new Error("Unrecognized modifier name: " + mod);
	    }
	    if (alt)
	        result = "Alt-" + result;
	    if (ctrl)
	        result = "Ctrl-" + result;
	    if (meta)
	        result = "Meta-" + result;
	    if (shift)
	        result = "Shift-" + result;
	    return result;
	}
	function modifiers(name, event, shift) {
	    if (event.altKey)
	        name = "Alt-" + name;
	    if (event.ctrlKey)
	        name = "Ctrl-" + name;
	    if (event.metaKey)
	        name = "Meta-" + name;
	    if (shift !== false && event.shiftKey)
	        name = "Shift-" + name;
	    return name;
	}
	const handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
	    keydown(event, view) {
	        return runHandlers(getKeymap(view.state), event, view, "editor");
	    }
	});
	/**
	Facet used for registering keymaps.

	You can add multiple keymaps to an editor. Their priorities
	determine their precedence (the ones specified early or with high
	priority get checked first). When a handler has returned `true`
	for a given key, no further handlers are called.
	*/
	const keymap = /*@__PURE__*/Facet.define({ enables: handleKeyEvents });
	const Keymaps = /*@__PURE__*/new WeakMap();
	// This is hidden behind an indirection, rather than directly computed
	// by the facet, to keep internal types out of the facet's type.
	function getKeymap(state) {
	    let bindings = state.facet(keymap);
	    let map = Keymaps.get(bindings);
	    if (!map)
	        Keymaps.set(bindings, map = buildKeymap(bindings.reduce((a, b) => a.concat(b), [])));
	    return map;
	}
	/**
	Run the key handlers registered for a given scope. The event
	object should be `"keydown"` event. Returns true if any of the
	handlers handled it.
	*/
	function runScopeHandlers(view, event, scope) {
	    return runHandlers(getKeymap(view.state), event, view, scope);
	}
	let storedPrefix = null;
	const PrefixTimeout = 4000;
	function buildKeymap(bindings, platform = currentPlatform) {
	    let bound = Object.create(null);
	    let isPrefix = Object.create(null);
	    let checkPrefix = (name, is) => {
	        let current = isPrefix[name];
	        if (current == null)
	            isPrefix[name] = is;
	        else if (current != is)
	            throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
	    };
	    let add = (scope, key, command, preventDefault) => {
	        let scopeObj = bound[scope] || (bound[scope] = Object.create(null));
	        let parts = key.split(/ (?!$)/).map(k => normalizeKeyName(k, platform));
	        for (let i = 1; i < parts.length; i++) {
	            let prefix = parts.slice(0, i).join(" ");
	            checkPrefix(prefix, true);
	            if (!scopeObj[prefix])
	                scopeObj[prefix] = {
	                    preventDefault: true,
	                    commands: [(view) => {
	                            let ourObj = storedPrefix = { view, prefix, scope };
	                            setTimeout(() => { if (storedPrefix == ourObj)
	                                storedPrefix = null; }, PrefixTimeout);
	                            return true;
	                        }]
	                };
	        }
	        let full = parts.join(" ");
	        checkPrefix(full, false);
	        let binding = scopeObj[full] || (scopeObj[full] = { preventDefault: false, commands: [] });
	        binding.commands.push(command);
	        if (preventDefault)
	            binding.preventDefault = true;
	    };
	    for (let b of bindings) {
	        let name = b[platform] || b.key;
	        if (!name)
	            continue;
	        for (let scope of b.scope ? b.scope.split(" ") : ["editor"]) {
	            add(scope, name, b.run, b.preventDefault);
	            if (b.shift)
	                add(scope, "Shift-" + name, b.shift, b.preventDefault);
	        }
	    }
	    return bound;
	}
	function runHandlers(map, event, view, scope) {
	    let name = keyName(event), isChar = name.length == 1 && name != " ";
	    let prefix = "", fallthrough = false;
	    if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
	        prefix = storedPrefix.prefix + " ";
	        if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0)
	            storedPrefix = null;
	    }
	    let runFor = (binding) => {
	        if (binding) {
	            for (let cmd of binding.commands)
	                if (cmd(view))
	                    return true;
	            if (binding.preventDefault)
	                fallthrough = true;
	        }
	        return false;
	    };
	    let scopeObj = map[scope], baseName;
	    if (scopeObj) {
	        if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)]))
	            return true;
	        if (isChar && (event.shiftKey || event.altKey || event.metaKey) &&
	            (baseName = base[event.keyCode]) && baseName != name) {
	            if (runFor(scopeObj[prefix + modifiers(baseName, event, true)]))
	                return true;
	        }
	        else if (isChar && event.shiftKey) {
	            if (runFor(scopeObj[prefix + modifiers(name, event, true)]))
	                return true;
	        }
	    }
	    return fallthrough;
	}

	const CanHidePrimary = !browser.ios; // FIXME test IE
	const selectionConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            cursorBlinkRate: 1200,
	            drawRangeCursor: true
	        }, {
	            cursorBlinkRate: (a, b) => Math.min(a, b),
	            drawRangeCursor: (a, b) => a || b
	        });
	    }
	});
	/**
	Returns an extension that hides the browser's native selection and
	cursor, replacing the selection with a background behind the text
	(with the `cm-selectionBackground` class), and the
	cursors with elements overlaid over the code (using
	`cm-cursor-primary` and `cm-cursor-secondary`).

	This allows the editor to display secondary selection ranges, and
	tends to produce a type of selection more in line with that users
	expect in a text editor (the native selection styling will often
	leave gaps between lines and won't fill the horizontal space after
	a line when the selection continues past it).

	It does have a performance cost, in that it requires an extra DOM
	layout cycle for many updates (the selection is drawn based on DOM
	layout information that's only available after laying out the
	content).
	*/
	function drawSelection(config = {}) {
	    return [
	        selectionConfig.of(config),
	        drawSelectionPlugin,
	        hideNativeSelection
	    ];
	}
	class Piece {
	    constructor(left, top, width, height, className) {
	        this.left = left;
	        this.top = top;
	        this.width = width;
	        this.height = height;
	        this.className = className;
	    }
	    draw() {
	        let elt = document.createElement("div");
	        elt.className = this.className;
	        this.adjust(elt);
	        return elt;
	    }
	    adjust(elt) {
	        elt.style.left = this.left + "px";
	        elt.style.top = this.top + "px";
	        if (this.width >= 0)
	            elt.style.width = this.width + "px";
	        elt.style.height = this.height + "px";
	    }
	    eq(p) {
	        return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height &&
	            this.className == p.className;
	    }
	}
	const drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.rangePieces = [];
	        this.cursors = [];
	        this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };
	        this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
	        this.selectionLayer.className = "cm-selectionLayer";
	        this.selectionLayer.setAttribute("aria-hidden", "true");
	        this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
	        this.cursorLayer.className = "cm-cursorLayer";
	        this.cursorLayer.setAttribute("aria-hidden", "true");
	        view.requestMeasure(this.measureReq);
	        this.setBlinkRate();
	    }
	    setBlinkRate() {
	        this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
	    }
	    update(update) {
	        let confChanged = update.startState.facet(selectionConfig) != update.state.facet(selectionConfig);
	        if (confChanged || update.selectionSet || update.geometryChanged || update.viewportChanged)
	            this.view.requestMeasure(this.measureReq);
	        if (update.transactions.some(tr => tr.scrollIntoView))
	            this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
	        if (confChanged)
	            this.setBlinkRate();
	    }
	    readPos() {
	        let { state } = this.view, conf = state.facet(selectionConfig);
	        let rangePieces = state.selection.ranges.map(r => r.empty ? [] : measureRange(this.view, r)).reduce((a, b) => a.concat(b));
	        let cursors = [];
	        for (let r of state.selection.ranges) {
	            let prim = r == state.selection.main;
	            if (r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
	                let piece = measureCursor(this.view, r, prim);
	                if (piece)
	                    cursors.push(piece);
	            }
	        }
	        return { rangePieces, cursors };
	    }
	    drawSel({ rangePieces, cursors }) {
	        if (rangePieces.length != this.rangePieces.length || rangePieces.some((p, i) => !p.eq(this.rangePieces[i]))) {
	            this.selectionLayer.textContent = "";
	            for (let p of rangePieces)
	                this.selectionLayer.appendChild(p.draw());
	            this.rangePieces = rangePieces;
	        }
	        if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {
	            let oldCursors = this.cursorLayer.children;
	            if (oldCursors.length !== cursors.length) {
	                this.cursorLayer.textContent = "";
	                for (const c of cursors)
	                    this.cursorLayer.appendChild(c.draw());
	            }
	            else {
	                cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));
	            }
	            this.cursors = cursors;
	        }
	    }
	    destroy() {
	        this.selectionLayer.remove();
	        this.cursorLayer.remove();
	    }
	});
	const themeSpec = {
	    ".cm-line": {
	        "& ::selection": { backgroundColor: "transparent !important" },
	        "&::selection": { backgroundColor: "transparent !important" }
	    }
	};
	if (CanHidePrimary)
	    themeSpec[".cm-line"].caretColor = "transparent !important";
	const hideNativeSelection = /*@__PURE__*/Prec.override(/*@__PURE__*/EditorView.theme(themeSpec));
	function getBase(view) {
	    let rect = view.scrollDOM.getBoundingClientRect();
	    let left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
	    return { left: left - view.scrollDOM.scrollLeft, top: rect.top - view.scrollDOM.scrollTop };
	}
	function wrappedLine(view, pos, inside) {
	    let range = EditorSelection.cursor(pos);
	    return { from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
	        to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
	        type: BlockType.Text };
	}
	function blockAt(view, pos) {
	    let line = view.visualLineAt(pos);
	    if (Array.isArray(line.type))
	        for (let l of line.type) {
	            if (l.to > pos || l.to == pos && (l.to == line.to || l.type == BlockType.Text))
	                return l;
	        }
	    return line;
	}
	function measureRange(view, range) {
	    if (range.to <= view.viewport.from || range.from >= view.viewport.to)
	        return [];
	    let from = Math.max(range.from, view.viewport.from), to = Math.min(range.to, view.viewport.to);
	    let ltr = view.textDirection == Direction.LTR;
	    let content = view.contentDOM, contentRect = content.getBoundingClientRect(), base = getBase(view);
	    let lineStyle = window.getComputedStyle(content.firstChild);
	    let leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
	    let rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
	    let startBlock = blockAt(view, from), endBlock = blockAt(view, to);
	    let visualStart = startBlock.type == BlockType.Text ? startBlock : null;
	    let visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
	    if (view.lineWrapping) {
	        if (visualStart)
	            visualStart = wrappedLine(view, from, visualStart);
	        if (visualEnd)
	            visualEnd = wrappedLine(view, to, visualEnd);
	    }
	    if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
	        return pieces(drawForLine(range.from, range.to, visualStart));
	    }
	    else {
	        let top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
	        let bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
	        let between = [];
	        if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1)
	            between.push(piece(leftSide, top.bottom, rightSide, bottom.top));
	        else if (top.bottom < bottom.top && blockAt(view, (top.bottom + bottom.top) / 2).type == BlockType.Text)
	            top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
	        return pieces(top).concat(between).concat(pieces(bottom));
	    }
	    function piece(left, top, right, bottom) {
	        return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
	    }
	    function pieces({ top, bottom, horizontal }) {
	        let pieces = [];
	        for (let i = 0; i < horizontal.length; i += 2)
	            pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
	        return pieces;
	    }
	    // Gets passed from/to in line-local positions
	    function drawForLine(from, to, line) {
	        let top = 1e9, bottom = -1e9, horizontal = [];
	        function addSpan(from, fromOpen, to, toOpen, dir) {
	            // Passing 2/-2 is a kludge to force the view to return
	            // coordinates on the proper side of block widgets, since
	            // normalizing the side there, though appropriate for most
	            // coordsAtPos queries, would break selection drawing.
	            let fromCoords = view.coordsAtPos(from, (from == line.to ? -2 : 2));
	            let toCoords = view.coordsAtPos(to, (to == line.from ? 2 : -2));
	            top = Math.min(fromCoords.top, toCoords.top, top);
	            bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
	            if (dir == Direction.LTR)
	                horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);
	            else
	                horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
	        }
	        let start = from !== null && from !== void 0 ? from : line.from, end = to !== null && to !== void 0 ? to : line.to;
	        // Split the range by visible range and document line
	        for (let r of view.visibleRanges)
	            if (r.to > start && r.from < end) {
	                for (let pos = Math.max(r.from, start), endPos = Math.min(r.to, end);;) {
	                    let docLine = view.state.doc.lineAt(pos);
	                    for (let span of view.bidiSpans(docLine)) {
	                        let spanFrom = span.from + docLine.from, spanTo = span.to + docLine.from;
	                        if (spanFrom >= endPos)
	                            break;
	                        if (spanTo > pos)
	                            addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
	                    }
	                    pos = docLine.to + 1;
	                    if (pos >= endPos)
	                        break;
	                }
	            }
	        if (horizontal.length == 0)
	            addSpan(start, from == null, end, to == null, view.textDirection);
	        return { top, bottom, horizontal };
	    }
	    function drawForWidget(block, top) {
	        let y = contentRect.top + (top ? block.top : block.bottom);
	        return { top: y, bottom: y, horizontal: [] };
	    }
	}
	function measureCursor(view, cursor, primary) {
	    let pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
	    if (!pos)
	        return null;
	    let base = getBase(view);
	    return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
	}

	function iterMatches(doc, re, from, to, f) {
	    re.lastIndex = 0;
	    for (let cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
	        if (!cursor.lineBreak)
	            while (m = re.exec(cursor.value))
	                f(pos + m.index, pos + m.index + m[0].length, m);
	    }
	}
	/**
	Helper class used to make it easier to maintain decorations on
	visible code that matches a given regular expression. To be used
	in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
	represent a matching configuration.
	*/
	class MatchDecorator {
	    /**
	    Create a decorator.
	    */
	    constructor(config) {
	        let { regexp, decoration, boundary } = config;
	        if (!regexp.global)
	            throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
	        this.regexp = regexp;
	        this.getDeco = typeof decoration == "function" ? decoration : () => decoration;
	        this.boundary = boundary;
	    }
	    /**
	    Compute the full set of decorations for matches in the given
	    view's viewport. You'll want to call this when initializing your
	    plugin.
	    */
	    createDeco(view) {
	        let build = new RangeSetBuilder();
	        for (let { from, to } of view.visibleRanges)
	            iterMatches(view.state.doc, this.regexp, from, to, (a, b, m) => build.add(a, b, this.getDeco(m, view, a)));
	        return build.finish();
	    }
	    /**
	    Update a set of decorations for a view update. `deco` _must_ be
	    the set of decorations produced by _this_ `MatchDecorator` for
	    the view state before the update.
	    */
	    updateDeco(update, deco) {
	        let changeFrom = 1e9, changeTo = -1;
	        if (update.docChanged)
	            update.changes.iterChanges((_f, _t, from, to) => {
	                if (to > update.view.viewport.from && from < update.view.viewport.to) {
	                    changeFrom = Math.min(from, changeFrom);
	                    changeTo = Math.max(to, changeTo);
	                }
	            });
	        if (update.viewportChanged || changeTo - changeFrom > 1000)
	            return this.createDeco(update.view);
	        if (changeTo > -1)
	            return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
	        return deco;
	    }
	    updateRange(view, deco, updateFrom, updateTo) {
	        for (let r of view.visibleRanges) {
	            let from = Math.max(r.from, updateFrom), to = Math.min(r.to, updateTo);
	            if (to > from) {
	                let fromLine = view.state.doc.lineAt(from), toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
	                let start = Math.max(r.from, fromLine.from), end = Math.min(r.to, toLine.to);
	                if (this.boundary) {
	                    for (; from > fromLine.from; from--)
	                        if (this.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
	                            start = from;
	                            break;
	                        }
	                    for (; to < toLine.to; to++)
	                        if (this.boundary.test(toLine.text[to - toLine.from])) {
	                            end = to;
	                            break;
	                        }
	                }
	                let ranges = [], m;
	                if (fromLine == toLine) {
	                    this.regexp.lastIndex = start - fromLine.from;
	                    while ((m = this.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
	                        let pos = m.index + fromLine.from;
	                        ranges.push(this.getDeco(m, view, pos).range(pos, pos + m[0].length));
	                    }
	                }
	                else {
	                    iterMatches(view.state.doc, this.regexp, start, end, (from, to, m) => ranges.push(this.getDeco(m, view, from).range(from, to)));
	                }
	                deco = deco.update({ filterFrom: start, filterTo: end, filter: (from, to) => from < start || to > end, add: ranges });
	            }
	        }
	        return deco;
	    }
	}

	const UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
	const Specials = /*@__PURE__*/new RegExp("[\u0000-\u0008\u000a-\u001f\u007f-\u009f\u00ad\u061c\u200b\u200e\u200f\u2028\u2029\ufeff\ufff9-\ufffc]", UnicodeRegexpSupport);
	const Names = {
	    0: "null",
	    7: "bell",
	    8: "backspace",
	    10: "newline",
	    11: "vertical tab",
	    13: "carriage return",
	    27: "escape",
	    8203: "zero width space",
	    8204: "zero width non-joiner",
	    8205: "zero width joiner",
	    8206: "left-to-right mark",
	    8207: "right-to-left mark",
	    8232: "line separator",
	    8233: "paragraph separator",
	    65279: "zero width no-break space",
	    65532: "object replacement"
	};
	let _supportsTabSize = null;
	function supportsTabSize() {
	    var _a;
	    if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
	        let styles = document.body.style;
	        _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
	    }
	    return _supportsTabSize || false;
	}
	const specialCharConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        let config = combineConfig(configs, {
	            render: null,
	            specialChars: Specials,
	            addSpecialChars: null
	        });
	        if (config.replaceTabs = !supportsTabSize())
	            config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
	        if (config.addSpecialChars)
	            config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
	        return config;
	    }
	});
	/**
	Returns an extension that installs highlighting of special
	characters.
	*/
	function highlightSpecialChars(
	/**
	Configuration options.
	*/
	config = {}) {
	    return [specialCharConfig.of(config), specialCharPlugin()];
	}
	let _plugin = null;
	function specialCharPlugin() {
	    return _plugin || (_plugin = ViewPlugin.fromClass(class {
	        constructor(view) {
	            this.view = view;
	            this.decorations = Decoration.none;
	            this.decorationCache = Object.create(null);
	            this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
	            this.decorations = this.decorator.createDeco(view);
	        }
	        makeDecorator(conf) {
	            return new MatchDecorator({
	                regexp: conf.specialChars,
	                decoration: (m, view, pos) => {
	                    let { doc } = view.state;
	                    let code = codePointAt(m[0], 0);
	                    if (code == 9) {
	                        let line = doc.lineAt(pos);
	                        let size = view.state.tabSize, col = countColumn(line.text, size, pos - line.from);
	                        return Decoration.replace({ widget: new TabWidget((size - (col % size)) * this.view.defaultCharacterWidth) });
	                    }
	                    return this.decorationCache[code] ||
	                        (this.decorationCache[code] = Decoration.replace({ widget: new SpecialCharWidget(conf, code) }));
	                },
	                boundary: conf.replaceTabs ? undefined : /[^]/
	            });
	        }
	        update(update) {
	            let conf = update.state.facet(specialCharConfig);
	            if (update.startState.facet(specialCharConfig) != conf) {
	                this.decorator = this.makeDecorator(conf);
	                this.decorations = this.decorator.createDeco(update.view);
	            }
	            else {
	                this.decorations = this.decorator.updateDeco(update, this.decorations);
	            }
	        }
	    }, {
	        decorations: v => v.decorations
	    }));
	}
	const DefaultPlaceholder = "\u2022";
	// Assigns placeholder characters from the Control Pictures block to
	// ASCII control characters
	function placeholder$1(code) {
	    if (code >= 32)
	        return DefaultPlaceholder;
	    if (code == 10)
	        return "\u2424";
	    return String.fromCharCode(9216 + code);
	}
	class SpecialCharWidget extends WidgetType {
	    constructor(options, code) {
	        super();
	        this.options = options;
	        this.code = code;
	    }
	    eq(other) { return other.code == this.code; }
	    toDOM(view) {
	        let ph = placeholder$1(this.code);
	        let desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
	        let custom = this.options.render && this.options.render(this.code, desc, ph);
	        if (custom)
	            return custom;
	        let span = document.createElement("span");
	        span.textContent = ph;
	        span.title = desc;
	        span.setAttribute("aria-label", desc);
	        span.className = "cm-specialChar";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}
	class TabWidget extends WidgetType {
	    constructor(width) {
	        super();
	        this.width = width;
	    }
	    eq(other) { return other.width == this.width; }
	    toDOM() {
	        let span = document.createElement("span");
	        span.textContent = "\t";
	        span.className = "cm-tab";
	        span.style.width = this.width + "px";
	        return span;
	    }
	    ignoreEvent() { return false; }
	}

	/**
	Mark lines that have a cursor on them with the `"cm-activeLine"`
	DOM class.
	*/
	function highlightActiveLine() {
	    return activeLineHighlighter;
	}
	const lineDeco = /*@__PURE__*/Decoration.line({ attributes: { class: "cm-activeLine" } });
	const activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.docChanged || update.selectionSet)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let lastLineStart = -1, deco = [];
	        for (let r of view.state.selection.ranges) {
	            if (!r.empty)
	                return Decoration.none;
	            let line = view.visualLineAt(r.head);
	            if (line.from > lastLineStart) {
	                deco.push(lineDeco.range(line.from));
	                lastLineStart = line.from;
	            }
	        }
	        return Decoration.set(deco);
	    }
	}, {
	    decorations: v => v.decorations
	});

	const fromHistory = /*@__PURE__*/Annotation.define();
	/**
	Transaction annotation that will prevent that transaction from
	being combined with other transactions in the undo history. Given
	`"before"`, it'll prevent merging with previous transactions. With
	`"after"`, subsequent transactions won't be combined with this
	one. With `"full"`, the transaction is isolated on both sides.
	*/
	const isolateHistory = /*@__PURE__*/Annotation.define();
	/**
	This facet provides a way to register functions that, given a
	transaction, provide a set of effects that the history should
	store when inverting the transaction. This can be used to
	integrate some kinds of effects in the history, so that they can
	be undone (and redone again).
	*/
	const invertedEffects = /*@__PURE__*/Facet.define();
	const historyConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            minDepth: 100,
	            newGroupDelay: 500
	        }, { minDepth: Math.max, newGroupDelay: Math.min });
	    }
	});
	const historyField_ = /*@__PURE__*/StateField.define({
	    create() {
	        return HistoryState.empty;
	    },
	    update(state, tr) {
	        let config = tr.state.facet(historyConfig);
	        let fromHist = tr.annotation(fromHistory);
	        if (fromHist) {
	            let item = HistEvent.fromTransaction(tr), from = fromHist.side;
	            let other = from == 0 /* Done */ ? state.undone : state.done;
	            if (item)
	                other = updateBranch(other, other.length, config.minDepth, item);
	            else
	                other = addSelection(other, tr.startState.selection);
	            return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
	        }
	        let isolate = tr.annotation(isolateHistory);
	        if (isolate == "full" || isolate == "before")
	            state = state.isolate();
	        if (tr.annotation(Transaction.addToHistory) === false)
	            return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
	        let event = HistEvent.fromTransaction(tr);
	        let time = tr.annotation(Transaction.time), userEvent = tr.annotation(Transaction.userEvent);
	        if (event)
	            state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);
	        else if (tr.selection)
	            state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
	        if (isolate == "full" || isolate == "after")
	            state = state.isolate();
	        return state;
	    },
	    toJSON(value) {
	        return { done: value.done.map(e => e.toJSON()), undone: value.undone.map(e => e.toJSON()) };
	    },
	    fromJSON(json) {
	        return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
	    }
	});
	/**
	Create a history extension with the given configuration.
	*/
	function history(config = {}) {
	    return [
	        historyField_,
	        historyConfig.of(config),
	        EditorView.domEventHandlers({
	            beforeinput(e, view) {
	                if (e.inputType == "historyUndo")
	                    return undo(view);
	                if (e.inputType == "historyRedo")
	                    return redo(view);
	                return false;
	            }
	        })
	    ];
	}
	function cmd(side, selection) {
	    return function ({ state, dispatch }) {
	        let historyState = state.field(historyField_, false);
	        if (!historyState)
	            return false;
	        let tr = historyState.pop(side, state, selection);
	        if (!tr)
	            return false;
	        dispatch(tr);
	        return true;
	    };
	}
	/**
	Undo a single group of history events. Returns false if no group
	was available.
	*/
	const undo = /*@__PURE__*/cmd(0 /* Done */, false);
	/**
	Redo a group of history events. Returns false if no group was
	available.
	*/
	const redo = /*@__PURE__*/cmd(1 /* Undone */, false);
	/**
	Undo a selection change.
	*/
	const undoSelection = /*@__PURE__*/cmd(0 /* Done */, true);
	/**
	Redo a selection change.
	*/
	const redoSelection = /*@__PURE__*/cmd(1 /* Undone */, true);
	// History events store groups of changes or effects that need to be
	// undone/redone together.
	class HistEvent {
	    constructor(
	    // The changes in this event. Normal events hold at least one
	    // change or effect. But it may be necessary to store selection
	    // events before the first change, in which case a special type of
	    // instance is created which doesn't hold any changes, with
	    // changes == startSelection == undefined
	    changes, 
	    // The effects associated with this event
	    effects, mapped, 
	    // The selection before this event
	    startSelection, 
	    // Stores selection changes after this event, to be used for
	    // selection undo/redo.
	    selectionsAfter) {
	        this.changes = changes;
	        this.effects = effects;
	        this.mapped = mapped;
	        this.startSelection = startSelection;
	        this.selectionsAfter = selectionsAfter;
	    }
	    setSelAfter(after) {
	        return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
	    }
	    toJSON() {
	        var _a, _b, _c;
	        return {
	            changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
	            mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
	            startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
	            selectionsAfter: this.selectionsAfter.map(s => s.toJSON())
	        };
	    }
	    static fromJSON(json) {
	        return new HistEvent(json.changes && ChangeSet.fromJSON(json.changes), [], json.mapped && ChangeDesc.fromJSON(json.mapped), json.startSelection && EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(EditorSelection.fromJSON));
	    }
	    // This does not check `addToHistory` and such, it assumes the
	    // transaction needs to be converted to an item. Returns null when
	    // there are no changes or effects in the transaction.
	    static fromTransaction(tr) {
	        let effects = none$1;
	        for (let invert of tr.startState.facet(invertedEffects)) {
	            let result = invert(tr);
	            if (result.length)
	                effects = effects.concat(result);
	        }
	        if (!effects.length && tr.changes.empty)
	            return null;
	        return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none$1);
	    }
	    static selection(selections) {
	        return new HistEvent(undefined, none$1, undefined, undefined, selections);
	    }
	}
	function updateBranch(branch, to, maxLen, newEvent) {
	    let start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
	    let newBranch = branch.slice(start, to);
	    newBranch.push(newEvent);
	    return newBranch;
	}
	function isAdjacent(a, b) {
	    let ranges = [], isAdjacent = false;
	    a.iterChangedRanges((f, t) => ranges.push(f, t));
	    b.iterChangedRanges((_f, _t, f, t) => {
	        for (let i = 0; i < ranges.length;) {
	            let from = ranges[i++], to = ranges[i++];
	            if (t >= from && f <= to)
	                isAdjacent = true;
	        }
	    });
	    return isAdjacent;
	}
	function eqSelectionShape(a, b) {
	    return a.ranges.length == b.ranges.length &&
	        a.ranges.filter((r, i) => r.empty != b.ranges[i].empty).length === 0;
	}
	function conc(a, b) {
	    return !a.length ? b : !b.length ? a : a.concat(b);
	}
	const none$1 = [];
	const MaxSelectionsPerEvent = 200;
	function addSelection(branch, selection) {
	    if (!branch.length) {
	        return [HistEvent.selection([selection])];
	    }
	    else {
	        let lastEvent = branch[branch.length - 1];
	        let sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
	        if (sels.length && sels[sels.length - 1].eq(selection))
	            return branch;
	        sels.push(selection);
	        return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
	    }
	}
	// Assumes the top item has one or more selectionAfter values
	function popSelection(branch) {
	    let last = branch[branch.length - 1];
	    let newBranch = branch.slice();
	    newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
	    return newBranch;
	}
	// Add a mapping to the top event in the given branch. If this maps
	// away all the changes and effects in that item, drop it and
	// propagate the mapping to the next item.
	function addMappingToBranch(branch, mapping) {
	    if (!branch.length)
	        return branch;
	    let length = branch.length, selections = none$1;
	    while (length) {
	        let event = mapEvent(branch[length - 1], mapping, selections);
	        if (event.changes && !event.changes.empty || event.effects.length) { // Event survived mapping
	            let result = branch.slice(0, length);
	            result[length - 1] = event;
	            return result;
	        }
	        else { // Drop this event, since there's no changes or effects left
	            mapping = event.mapped;
	            length--;
	            selections = event.selectionsAfter;
	        }
	    }
	    return selections.length ? [HistEvent.selection(selections)] : none$1;
	}
	function mapEvent(event, mapping, extraSelections) {
	    let selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(s => s.map(mapping)) : none$1, extraSelections);
	    // Change-less events don't store mappings (they are always the last event in a branch)
	    if (!event.changes)
	        return HistEvent.selection(selections);
	    let mappedChanges = event.changes.map(mapping), before = mapping.mapDesc(event.changes, true);
	    let fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
	    return new HistEvent(mappedChanges, StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
	}
	class HistoryState {
	    constructor(done, undone, prevTime = 0, prevUserEvent = undefined) {
	        this.done = done;
	        this.undone = undone;
	        this.prevTime = prevTime;
	        this.prevUserEvent = prevUserEvent;
	    }
	    isolate() {
	        return this.prevTime ? new HistoryState(this.done, this.undone) : this;
	    }
	    addChanges(event, time, userEvent, newGroupDelay, maxLen) {
	        let done = this.done, lastEvent = done[done.length - 1];
	        if (lastEvent && lastEvent.changes && !lastEvent.changes.empty && event.changes &&
	            ((!lastEvent.selectionsAfter.length &&
	                time - this.prevTime < newGroupDelay &&
	                isAdjacent(lastEvent.changes, event.changes)) ||
	                // For compose (but not compose.start) events, always join with previous event
	                userEvent == "input.type.compose")) {
	            done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none$1));
	        }
	        else {
	            done = updateBranch(done, done.length, maxLen, event);
	        }
	        return new HistoryState(done, none$1, time, userEvent);
	    }
	    addSelection(selection, time, userEvent, newGroupDelay) {
	        let last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none$1;
	        if (last.length > 0 &&
	            time - this.prevTime < newGroupDelay &&
	            userEvent == this.prevUserEvent && userEvent && /^select($|\.)/.test(userEvent) &&
	            eqSelectionShape(last[last.length - 1], selection))
	            return this;
	        return new HistoryState(addSelection(this.done, selection), this.undone, time, userEvent);
	    }
	    addMapping(mapping) {
	        return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
	    }
	    pop(side, state, selection) {
	        let branch = side == 0 /* Done */ ? this.done : this.undone;
	        if (branch.length == 0)
	            return null;
	        let event = branch[branch.length - 1];
	        if (selection && event.selectionsAfter.length) {
	            return state.update({
	                selection: event.selectionsAfter[event.selectionsAfter.length - 1],
	                annotations: fromHistory.of({ side, rest: popSelection(branch) }),
	                userEvent: side == 0 /* Done */ ? "select.undo" : "select.redo"
	            });
	        }
	        else if (!event.changes) {
	            return null;
	        }
	        else {
	            let rest = branch.length == 1 ? none$1 : branch.slice(0, branch.length - 1);
	            if (event.mapped)
	                rest = addMappingToBranch(rest, event.mapped);
	            return state.update({
	                changes: event.changes,
	                selection: event.startSelection,
	                effects: event.effects,
	                annotations: fromHistory.of({ side, rest }),
	                filter: false,
	                userEvent: side == 0 /* Done */ ? "undo" : "redo"
	            });
	        }
	    }
	}
	HistoryState.empty = /*@__PURE__*/new HistoryState(none$1, none$1);
	/**
	Default key bindings for the undo history.

	- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#history.undo).
	- Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#history.redo).
	- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#history.undoSelection).
	- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#history.redoSelection).
	*/
	const historyKeymap = [
	    { key: "Mod-z", run: undo, preventDefault: true },
	    { key: "Mod-y", mac: "Mod-Shift-z", run: redo, preventDefault: true },
	    { key: "Mod-u", run: undoSelection, preventDefault: true },
	    { key: "Alt-u", mac: "Mod-Shift-u", run: redoSelection, preventDefault: true }
	];

	// FIXME profile adding a per-Tree TreeNode cache, validating it by
	// parent pointer
	/// The default maximum length of a `TreeBuffer` node (1024).
	const DefaultBufferLength = 1024;
	let nextPropID = 0;
	class Range {
	    constructor(from, to) {
	        this.from = from;
	        this.to = to;
	    }
	}
	/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)
	/// can have metadata associated with it in props. Instances of this
	/// class represent prop names.
	class NodeProp {
	    /// Create a new node prop type.
	    constructor(config = {}) {
	        this.id = nextPropID++;
	        this.perNode = !!config.perNode;
	        this.deserialize = config.deserialize || (() => {
	            throw new Error("This node type doesn't define a deserialize function");
	        });
	    }
	    /// This is meant to be used with
	    /// [`NodeSet.extend`](#common.NodeSet.extend) or
	    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute
	    /// prop values for each node type in the set. Takes a [match
	    /// object](#common.NodeType^match) or function that returns undefined
	    /// if the node type doesn't get this prop, and the prop's value if
	    /// it does.
	    add(match) {
	        if (this.perNode)
	            throw new RangeError("Can't add per-node props to node types");
	        if (typeof match != "function")
	            match = NodeType.match(match);
	        return (type) => {
	            let result = match(type);
	            return result === undefined ? null : [this, result];
	        };
	    }
	}
	/// Prop that is used to describe matching delimiters. For opening
	/// delimiters, this holds an array of node names (written as a
	/// space-separated string when declaring this prop in a grammar)
	/// for the node types of closing delimiters that match it.
	NodeProp.closedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is
	/// attached to closing delimiters, holding an array of node names
	/// of types of matching opening delimiters.
	NodeProp.openedBy = new NodeProp({ deserialize: str => str.split(" ") });
	/// Used to assign node types to groups (for example, all node
	/// types that represent an expression could be tagged with an
	/// `"Expression"` group).
	NodeProp.group = new NodeProp({ deserialize: str => str.split(" ") });
	/// The hash of the [context](#lr.ContextTracker.constructor)
	/// that the node was parsed in, if any. Used to limit reuse of
	/// contextual nodes.
	NodeProp.contextHash = new NodeProp({ perNode: true });
	/// The distance beyond the end of the node that the tokenizer
	/// looked ahead for any of the tokens inside the node. (The LR
	/// parser only stores this when it is larger than 25, for
	/// efficiency reasons.)
	NodeProp.lookAhead = new NodeProp({ perNode: true });
	/// This per-node prop is used to replace a given node, or part of a
	/// node, with another tree. This is useful to include trees from
	/// different languages.
	NodeProp.mounted = new NodeProp({ perNode: true });
	const noProps = Object.create(null);
	/// Each node in a syntax tree has a node type associated with it.
	class NodeType {
	    /// @internal
	    constructor(
	    /// The name of the node type. Not necessarily unique, but if the
	    /// grammar was written properly, different node types with the
	    /// same name within a node set should play the same semantic
	    /// role.
	    name, 
	    /// @internal
	    props, 
	    /// The id of this node in its set. Corresponds to the term ids
	    /// used in the parser.
	    id, 
	    /// @internal
	    flags = 0) {
	        this.name = name;
	        this.props = props;
	        this.id = id;
	        this.flags = flags;
	    }
	    static define(spec) {
	        let props = spec.props && spec.props.length ? Object.create(null) : noProps;
	        let flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) |
	            (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
	        let type = new NodeType(spec.name || "", props, spec.id, flags);
	        if (spec.props)
	            for (let src of spec.props) {
	                if (!Array.isArray(src))
	                    src = src(type);
	                if (src) {
	                    if (src[0].perNode)
	                        throw new RangeError("Can't store a per-node prop on a node type");
	                    props[src[0].id] = src[1];
	                }
	            }
	        return type;
	    }
	    /// Retrieves a node prop for this type. Will return `undefined` if
	    /// the prop isn't present on this node.
	    prop(prop) { return this.props[prop.id]; }
	    /// True when this is the top node of a grammar.
	    get isTop() { return (this.flags & 1 /* Top */) > 0; }
	    /// True when this node is produced by a skip rule.
	    get isSkipped() { return (this.flags & 2 /* Skipped */) > 0; }
	    /// Indicates whether this is an error node.
	    get isError() { return (this.flags & 4 /* Error */) > 0; }
	    /// When true, this node type doesn't correspond to a user-declared
	    /// named node, for example because it is used to cache repetition.
	    get isAnonymous() { return (this.flags & 8 /* Anonymous */) > 0; }
	    /// Returns true when this node's name or one of its
	    /// [groups](#common.NodeProp^group) matches the given string.
	    is(name) {
	        if (typeof name == 'string') {
	            if (this.name == name)
	                return true;
	            let group = this.prop(NodeProp.group);
	            return group ? group.indexOf(name) > -1 : false;
	        }
	        return this.id == name;
	    }
	    /// Create a function from node types to arbitrary values by
	    /// specifying an object whose property names are node or
	    /// [group](#common.NodeProp^group) names. Often useful with
	    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple
	    /// names, separated by spaces, in a single property name to map
	    /// multiple node names to a single value.
	    static match(map) {
	        let direct = Object.create(null);
	        for (let prop in map)
	            for (let name of prop.split(" "))
	                direct[name] = map[prop];
	        return (node) => {
	            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
	                let found = direct[i < 0 ? node.name : groups[i]];
	                if (found)
	                    return found;
	            }
	        };
	    }
	}
	/// An empty dummy node type to use when no actual type is available.
	NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
	/// A node set holds a collection of node types. It is used to
	/// compactly represent trees by storing their type ids, rather than a
	/// full pointer to the type object, in a numeric array. Each parser
	/// [has](#lr.LRParser.nodeSet) a node set, and [tree
	/// buffers](#common.TreeBuffer) can only store collections of nodes
	/// from the same set. A set can have a maximum of 2**16 (65536) node
	/// types in it, so that the ids fit into 16-bit typed array slots.
	class NodeSet {
	    /// Create a set with the given types. The `id` property of each
	    /// type should correspond to its position within the array.
	    constructor(
	    /// The node types in this set, by id.
	    types) {
	        this.types = types;
	        for (let i = 0; i < types.length; i++)
	            if (types[i].id != i)
	                throw new RangeError("Node type ids should correspond to array positions when creating a node set");
	    }
	    /// Create a copy of this set with some node properties added. The
	    /// arguments to this method should be created with
	    /// [`NodeProp.add`](#common.NodeProp.add).
	    extend(...props) {
	        let newTypes = [];
	        for (let type of this.types) {
	            let newProps = null;
	            for (let source of props) {
	                let add = source(type);
	                if (add) {
	                    if (!newProps)
	                        newProps = Object.assign({}, type.props);
	                    newProps[add[0].id] = add[1];
	                }
	            }
	            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
	        }
	        return new NodeSet(newTypes);
	    }
	}
	const CachedNode = new WeakMap();
	/// A piece of syntax tree. There are two ways to approach these
	/// trees: the way they are actually stored in memory, and the
	/// convenient way.
	///
	/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
	/// objects. By packing detail information into `TreeBuffer` leaf
	/// nodes, the representation is made a lot more memory-efficient.
	///
	/// However, when you want to actually work with tree nodes, this
	/// representation is very awkward, so most client code will want to
	/// use the [`TreeCursor`](#common.TreeCursor) or
	/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides
	/// a view on some part of this data structure, and can be used to
	/// move around to adjacent nodes.
	class Tree {
	    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).
	    constructor(
	    /// The type of the top node.
	    type, 
	    /// This node's child nodes.
	    children, 
	    /// The positions (offsets relative to the start of this tree) of
	    /// the children.
	    positions, 
	    /// The total length of this tree
	    length, 
	    /// Per-node [node props](#common.NodeProp) to associate with this node.
	    props) {
	        this.type = type;
	        this.children = children;
	        this.positions = positions;
	        this.length = length;
	        /// @internal
	        this.props = null;
	        if (props && props.length) {
	            this.props = Object.create(null);
	            for (let [prop, value] of props)
	                this.props[typeof prop == "number" ? prop : prop.id] = value;
	        }
	    }
	    /// @internal
	    toString() {
	        let mounted = this.prop(NodeProp.mounted);
	        if (mounted && !mounted.overlay)
	            return mounted.tree.toString();
	        let children = "";
	        for (let ch of this.children) {
	            let str = ch.toString();
	            if (str) {
	                if (children)
	                    children += ",";
	                children += str;
	            }
	        }
	        return !this.type.name ? children :
	            (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +
	                (children.length ? "(" + children + ")" : "");
	    }
	    /// Get a [tree cursor](#common.TreeCursor) rooted at this tree. When
	    /// `pos` is given, the cursor is [moved](#common.TreeCursor.moveTo)
	    /// to the given position and side.
	    cursor(pos, side = 0) {
	        let scope = (pos != null && CachedNode.get(this)) || this.topNode;
	        let cursor = new TreeCursor(scope);
	        if (pos != null) {
	            cursor.moveTo(pos, side);
	            CachedNode.set(this, cursor._tree);
	        }
	        return cursor;
	    }
	    /// Get a [tree cursor](#common.TreeCursor) that, unlike regular
	    /// cursors, doesn't skip through
	    /// [anonymous](#common.NodeType.isAnonymous) nodes.
	    fullCursor() {
	        return new TreeCursor(this.topNode, 1 /* Full */);
	    }
	    /// Get a [syntax node](#common.SyntaxNode) object for the top of the
	    /// tree.
	    get topNode() {
	        return new TreeNode(this, 0, 0, null);
	    }
	    /// Get the [syntax node](#common.SyntaxNode) at the given position.
	    /// If `side` is -1, this will move into nodes that end at the
	    /// position. If 1, it'll move into nodes that start at the
	    /// position. With 0, it'll only enter nodes that cover the position
	    /// from both sides.
	    resolve(pos, side = 0) {
	        return this.cursor(pos, side).node;
	    }
	    /// Like [`resolve`](#common.Tree.resolve), but will enter
	    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node
	    /// pointing into the innermost overlaid tree at the given position
	    /// (with parent links going through all parent structure, including
	    /// the host trees).
	    resolveInner(pos, side = 0) {
	        let result = this.topNode;
	        for (;;) {
	            let inner = result.enter(pos, side);
	            if (!inner)
	                return result;
	            result = inner;
	        }
	    }
	    /// Iterate over the tree and its children, calling `enter` for any
	    /// node that touches the `from`/`to` region (if given) before
	    /// running over such a node's children, and `leave` (if given) when
	    /// leaving the node. When `enter` returns `false`, that node will
	    /// not have its children iterated over (or `leave` called).
	    iterate(spec) {
	        let { enter, leave, from = 0, to = this.length } = spec;
	        for (let c = this.cursor(), get = () => c.node;;) {
	            let mustLeave = false;
	            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to, get) !== false)) {
	                if (c.firstChild())
	                    continue;
	                if (!c.type.isAnonymous)
	                    mustLeave = true;
	            }
	            for (;;) {
	                if (mustLeave && leave)
	                    leave(c.type, c.from, c.to, get);
	                mustLeave = c.type.isAnonymous;
	                if (c.nextSibling())
	                    break;
	                if (!c.parent())
	                    return;
	                mustLeave = true;
	            }
	        }
	    }
	    /// Get the value of the given [node prop](#common.NodeProp) for this
	    /// node. Works with both per-node and per-type props.
	    prop(prop) {
	        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;
	    }
	    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a
	    /// format that can be passed to the [`Tree`](#common.Tree)
	    /// constructor.
	    get propValues() {
	        let result = [];
	        if (this.props)
	            for (let id in this.props)
	                result.push([+id, this.props[id]]);
	        return result;
	    }
	    /// Balance the direct children of this tree, producing a copy of
	    /// which may have children grouped into subtrees with type
	    /// [`NodeType.none`](#common.NodeType^none).
	    balance(config = {}) {
	        return this.children.length <= 8 /* BranchFactor */ ? this :
	            balanceRange(this.type, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));
	    }
	    /// Build a tree from a postfix-ordered buffer of node information,
	    /// or a cursor over such a buffer.
	    static build(data) { return buildTree(data); }
	}
	/// The empty tree
	Tree.empty = new Tree(NodeType.none, [], [], 0);
	class FlatBufferCursor {
	    constructor(buffer, index) {
	        this.buffer = buffer;
	        this.index = index;
	    }
	    get id() { return this.buffer[this.index - 4]; }
	    get start() { return this.buffer[this.index - 3]; }
	    get end() { return this.buffer[this.index - 2]; }
	    get size() { return this.buffer[this.index - 1]; }
	    get pos() { return this.index; }
	    next() { this.index -= 4; }
	    fork() { return new FlatBufferCursor(this.buffer, this.index); }
	}
	/// Tree buffers contain (type, start, end, endIndex) quads for each
	/// node. In such a buffer, nodes are stored in prefix order (parents
	/// before children, with the endIndex of the parent indicating which
	/// children belong to it)
	class TreeBuffer {
	    /// Create a tree buffer.
	    constructor(
	    /// The buffer's content.
	    buffer, 
	    /// The total length of the group of nodes in the buffer.
	    length, 
	    /// The node set used in this buffer.
	    set) {
	        this.buffer = buffer;
	        this.length = length;
	        this.set = set;
	    }
	    /// @internal
	    get type() { return NodeType.none; }
	    /// @internal
	    toString() {
	        let result = [];
	        for (let index = 0; index < this.buffer.length;) {
	            result.push(this.childString(index));
	            index = this.buffer[index + 3];
	        }
	        return result.join(",");
	    }
	    /// @internal
	    childString(index) {
	        let id = this.buffer[index], endIndex = this.buffer[index + 3];
	        let type = this.set.types[id], result = type.name;
	        if (/\W/.test(result) && !type.isError)
	            result = JSON.stringify(result);
	        index += 4;
	        if (endIndex == index)
	            return result;
	        let children = [];
	        while (index < endIndex) {
	            children.push(this.childString(index));
	            index = this.buffer[index + 3];
	        }
	        return result + "(" + children.join(",") + ")";
	    }
	    /// @internal
	    findChild(startIndex, endIndex, dir, pos, side) {
	        let { buffer } = this, pick = -1;
	        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {
	            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {
	                pick = i;
	                if (dir > 0)
	                    break;
	            }
	        }
	        return pick;
	    }
	    /// @internal
	    slice(startI, endI, from, to) {
	        let b = this.buffer;
	        let copy = new Uint16Array(endI - startI);
	        for (let i = startI, j = 0; i < endI;) {
	            copy[j++] = b[i++];
	            copy[j++] = b[i++] - from;
	            copy[j++] = b[i++] - from;
	            copy[j++] = b[i++] - startI;
	        }
	        return new TreeBuffer(copy, to - from, this.set);
	    }
	}
	function checkSide(side, pos, from, to) {
	    switch (side) {
	        case -2 /* Before */: return from < pos;
	        case -1 /* AtOrBefore */: return to >= pos && from < pos;
	        case 0 /* Around */: return from < pos && to > pos;
	        case 1 /* AtOrAfter */: return from <= pos && to > pos;
	        case 2 /* After */: return to > pos;
	        case 4 /* DontCare */: return true;
	    }
	}
	function enterUnfinishedNodesBefore(node, pos) {
	    let scan = node.childBefore(pos);
	    while (scan) {
	        let last = scan.lastChild;
	        if (!last || last.to != scan.to)
	            break;
	        if (last.type.isError && last.from == last.to) {
	            node = scan;
	            scan = last.prevSibling;
	        }
	        else {
	            scan = last;
	        }
	    }
	    return node;
	}
	class TreeNode {
	    constructor(node, _from, 
	    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)
	    index, _parent) {
	        this.node = node;
	        this._from = _from;
	        this.index = index;
	        this._parent = _parent;
	    }
	    get type() { return this.node.type; }
	    get name() { return this.node.type.name; }
	    get from() { return this._from; }
	    get to() { return this._from + this.node.length; }
	    nextChild(i, dir, pos, side, mode = 0) {
	        for (let parent = this;;) {
	            for (let { children, positions } = parent.node, e = dir > 0 ? children.length : -1; i != e; i += dir) {
	                let next = children[i], start = positions[i] + parent._from;
	                if (!checkSide(side, pos, start, start + next.length))
	                    continue;
	                if (next instanceof TreeBuffer) {
	                    if (mode & 2 /* NoEnterBuffer */)
	                        continue;
	                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);
	                    if (index > -1)
	                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);
	                }
	                else if ((mode & 1 /* Full */) || (!next.type.isAnonymous || hasChild(next))) {
	                    let mounted;
	                    if (next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)
	                        return new TreeNode(mounted.tree, start, i, parent);
	                    let inner = new TreeNode(next, start, i, parent);
	                    return (mode & 1 /* Full */) || !inner.type.isAnonymous ? inner
	                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);
	                }
	            }
	            if ((mode & 1 /* Full */) || !parent.type.isAnonymous)
	                return null;
	            if (parent.index >= 0)
	                i = parent.index + dir;
	            else
	                i = dir < 0 ? -1 : parent._parent.node.children.length;
	            parent = parent._parent;
	            if (!parent)
	                return null;
	        }
	    }
	    get firstChild() { return this.nextChild(0, 1, 0, 4 /* DontCare */); }
	    get lastChild() { return this.nextChild(this.node.children.length - 1, -1, 0, 4 /* DontCare */); }
	    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* After */); }
	    childBefore(pos) { return this.nextChild(this.node.children.length - 1, -1, pos, -2 /* Before */); }
	    enter(pos, side, overlays = true, buffers = true) {
	        let mounted;
	        if (overlays && (mounted = this.node.prop(NodeProp.mounted)) && mounted.overlay) {
	            let rPos = pos - this.from;
	            for (let { from, to } of mounted.overlay) {
	                if ((side > 0 ? from <= rPos : from < rPos) &&
	                    (side < 0 ? to >= rPos : to > rPos))
	                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);
	            }
	        }
	        return this.nextChild(0, 1, pos, side, buffers ? 0 : 2 /* NoEnterBuffer */);
	    }
	    nextSignificantParent() {
	        let val = this;
	        while (val.type.isAnonymous && val._parent)
	            val = val._parent;
	        return val;
	    }
	    get parent() {
	        return this._parent ? this._parent.nextSignificantParent() : null;
	    }
	    get nextSibling() {
	        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* DontCare */) : null;
	    }
	    get prevSibling() {
	        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* DontCare */) : null;
	    }
	    get cursor() { return new TreeCursor(this); }
	    get tree() { return this.node; }
	    toTree() { return this.node; }
	    resolve(pos, side = 0) {
	        return this.cursor.moveTo(pos, side).node;
	    }
	    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
	    getChild(type, before = null, after = null) {
	        let r = getChildren(this, type, before, after);
	        return r.length ? r[0] : null;
	    }
	    getChildren(type, before = null, after = null) {
	        return getChildren(this, type, before, after);
	    }
	    /// @internal
	    toString() { return this.node.toString(); }
	}
	function getChildren(node, type, before, after) {
	    let cur = node.cursor, result = [];
	    if (!cur.firstChild())
	        return result;
	    if (before != null)
	        while (!cur.type.is(before))
	            if (!cur.nextSibling())
	                return result;
	    for (;;) {
	        if (after != null && cur.type.is(after))
	            return result;
	        if (cur.type.is(type))
	            result.push(cur.node);
	        if (!cur.nextSibling())
	            return after == null ? result : [];
	    }
	}
	class BufferContext {
	    constructor(parent, buffer, index, start) {
	        this.parent = parent;
	        this.buffer = buffer;
	        this.index = index;
	        this.start = start;
	    }
	}
	class BufferNode {
	    constructor(context, _parent, index) {
	        this.context = context;
	        this._parent = _parent;
	        this.index = index;
	        this.type = context.buffer.set.types[context.buffer.buffer[index]];
	    }
	    get name() { return this.type.name; }
	    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }
	    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }
	    child(dir, pos, side) {
	        let { buffer } = this.context;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);
	        return index < 0 ? null : new BufferNode(this.context, this, index);
	    }
	    get firstChild() { return this.child(1, 0, 4 /* DontCare */); }
	    get lastChild() { return this.child(-1, 0, 4 /* DontCare */); }
	    childAfter(pos) { return this.child(1, pos, 2 /* After */); }
	    childBefore(pos) { return this.child(-1, pos, -2 /* Before */); }
	    enter(pos, side, overlays, buffers = true) {
	        if (!buffers)
	            return null;
	        let { buffer } = this.context;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);
	        return index < 0 ? null : new BufferNode(this.context, this, index);
	    }
	    get parent() {
	        return this._parent || this.context.parent.nextSignificantParent();
	    }
	    externalSibling(dir) {
	        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* DontCare */);
	    }
	    get nextSibling() {
	        let { buffer } = this.context;
	        let after = buffer.buffer[this.index + 3];
	        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))
	            return new BufferNode(this.context, this._parent, after);
	        return this.externalSibling(1);
	    }
	    get prevSibling() {
	        let { buffer } = this.context;
	        let parentStart = this._parent ? this._parent.index + 4 : 0;
	        if (this.index == parentStart)
	            return this.externalSibling(-1);
	        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
	    }
	    get cursor() { return new TreeCursor(this); }
	    get tree() { return null; }
	    toTree() {
	        let children = [], positions = [];
	        let { buffer } = this.context;
	        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];
	        if (endI > startI) {
	            let from = buffer.buffer[this.index + 1], to = buffer.buffer[this.index + 2];
	            children.push(buffer.slice(startI, endI, from, to));
	            positions.push(0);
	        }
	        return new Tree(this.type, children, positions, this.to - this.from);
	    }
	    resolve(pos, side = 0) {
	        return this.cursor.moveTo(pos, side).node;
	    }
	    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }
	    /// @internal
	    toString() { return this.context.buffer.childString(this.index); }
	    getChild(type, before = null, after = null) {
	        let r = getChildren(this, type, before, after);
	        return r.length ? r[0] : null;
	    }
	    getChildren(type, before = null, after = null) {
	        return getChildren(this, type, before, after);
	    }
	}
	/// A tree cursor object focuses on a given node in a syntax tree, and
	/// allows you to move to adjacent nodes.
	class TreeCursor {
	    /// @internal
	    constructor(node, 
	    /// @internal
	    mode = 0) {
	        this.mode = mode;
	        this.buffer = null;
	        this.stack = [];
	        this.index = 0;
	        this.bufferNode = null;
	        if (node instanceof TreeNode) {
	            this.yieldNode(node);
	        }
	        else {
	            this._tree = node.context.parent;
	            this.buffer = node.context;
	            for (let n = node._parent; n; n = n._parent)
	                this.stack.unshift(n.index);
	            this.bufferNode = node;
	            this.yieldBuf(node.index);
	        }
	    }
	    /// Shorthand for `.type.name`.
	    get name() { return this.type.name; }
	    yieldNode(node) {
	        if (!node)
	            return false;
	        this._tree = node;
	        this.type = node.type;
	        this.from = node.from;
	        this.to = node.to;
	        return true;
	    }
	    yieldBuf(index, type) {
	        this.index = index;
	        let { start, buffer } = this.buffer;
	        this.type = type || buffer.set.types[buffer.buffer[index]];
	        this.from = start + buffer.buffer[index + 1];
	        this.to = start + buffer.buffer[index + 2];
	        return true;
	    }
	    yield(node) {
	        if (!node)
	            return false;
	        if (node instanceof TreeNode) {
	            this.buffer = null;
	            return this.yieldNode(node);
	        }
	        this.buffer = node.context;
	        return this.yieldBuf(node.index, node.type);
	    }
	    /// @internal
	    toString() {
	        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
	    }
	    /// @internal
	    enterChild(dir, pos, side) {
	        if (!this.buffer)
	            return this.yield(this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, pos, side, this.mode));
	        let { buffer } = this.buffer;
	        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);
	        if (index < 0)
	            return false;
	        this.stack.push(this.index);
	        return this.yieldBuf(index);
	    }
	    /// Move the cursor to this node's first child. When this returns
	    /// false, the node has no child, and the cursor has not been moved.
	    firstChild() { return this.enterChild(1, 0, 4 /* DontCare */); }
	    /// Move the cursor to this node's last child.
	    lastChild() { return this.enterChild(-1, 0, 4 /* DontCare */); }
	    /// Move the cursor to the first child that ends after `pos`.
	    childAfter(pos) { return this.enterChild(1, pos, 2 /* After */); }
	    /// Move to the last child that starts before `pos`.
	    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Before */); }
	    /// Move the cursor to the child around `pos`. If side is -1 the
	    /// child may end at that position, when 1 it may start there. This
	    /// will also enter [overlaid](#common.MountedTree.overlay)
	    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is
	    /// set to false.
	    enter(pos, side, overlays = true, buffers = true) {
	        if (!this.buffer)
	            return this.yield(this._tree.enter(pos, side, overlays, buffers));
	        return buffers ? this.enterChild(1, pos, side) : false;
	    }
	    /// Move the node's parent node, if this isn't the top node.
	    parent() {
	        if (!this.buffer)
	            return this.yieldNode((this.mode & 1 /* Full */) ? this._tree._parent : this._tree.parent);
	        if (this.stack.length)
	            return this.yieldBuf(this.stack.pop());
	        let parent = (this.mode & 1 /* Full */) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
	        this.buffer = null;
	        return this.yieldNode(parent);
	    }
	    /// @internal
	    sibling(dir) {
	        if (!this.buffer)
	            return !this._tree._parent ? false
	                : this.yield(this._tree.index < 0 ? null
	                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* DontCare */, this.mode));
	        let { buffer } = this.buffer, d = this.stack.length - 1;
	        if (dir < 0) {
	            let parentStart = d < 0 ? 0 : this.stack[d] + 4;
	            if (this.index != parentStart)
	                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* DontCare */));
	        }
	        else {
	            let after = buffer.buffer[this.index + 3];
	            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))
	                return this.yieldBuf(after);
	        }
	        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* DontCare */, this.mode)) : false;
	    }
	    /// Move to this node's next sibling, if any.
	    nextSibling() { return this.sibling(1); }
	    /// Move to this node's previous sibling, if any.
	    prevSibling() { return this.sibling(-1); }
	    atLastNode(dir) {
	        let index, parent, { buffer } = this;
	        if (buffer) {
	            if (dir > 0) {
	                if (this.index < buffer.buffer.buffer.length)
	                    return false;
	            }
	            else {
	                for (let i = 0; i < this.index; i++)
	                    if (buffer.buffer.buffer[i + 3] < this.index)
	                        return false;
	            }
	            ({ index, parent } = buffer);
	        }
	        else {
	            ({ index, _parent: parent } = this._tree);
	        }
	        for (; parent; { index, _parent: parent } = parent) {
	            if (index > -1)
	                for (let i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; i != e; i += dir) {
	                    let child = parent.node.children[i];
	                    if ((this.mode & 1 /* Full */) || child instanceof TreeBuffer || !child.type.isAnonymous || hasChild(child))
	                        return false;
	                }
	        }
	        return true;
	    }
	    move(dir, enter) {
	        if (enter && this.enterChild(dir, 0, 4 /* DontCare */))
	            return true;
	        for (;;) {
	            if (this.sibling(dir))
	                return true;
	            if (this.atLastNode(dir) || !this.parent())
	                return false;
	        }
	    }
	    /// Move to the next node in a
	    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
	    /// traversal, going from a node to its first child or, if the
	    /// current node is empty or `enter` is false, its next sibling or
	    /// the next sibling of the first parent node that has one.
	    next(enter = true) { return this.move(1, enter); }
	    /// Move to the next node in a last-to-first pre-order traveral. A
	    /// node is followed by its last child or, if it has none, its
	    /// previous sibling or the previous sibling of the first parent
	    /// node that has one.
	    prev(enter = true) { return this.move(-1, enter); }
	    /// Move the cursor to the innermost node that covers `pos`. If
	    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
	    /// it will enter nodes that start at `pos`.
	    moveTo(pos, side = 0) {
	        // Move up to a node that actually holds the position, if possible
	        while (this.from == this.to ||
	            (side < 1 ? this.from >= pos : this.from > pos) ||
	            (side > -1 ? this.to <= pos : this.to < pos))
	            if (!this.parent())
	                break;
	        // Then scan down into child nodes as far as possible
	        while (this.enterChild(1, pos, side)) { }
	        return this;
	    }
	    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current
	    /// position.
	    get node() {
	        if (!this.buffer)
	            return this._tree;
	        let cache = this.bufferNode, result = null, depth = 0;
	        if (cache && cache.context == this.buffer) {
	            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {
	                for (let c = cache; c; c = c._parent)
	                    if (c.index == index) {
	                        if (index == this.index)
	                            return c;
	                        result = c;
	                        depth = d + 1;
	                        break scan;
	                    }
	                index = this.stack[--d];
	            }
	        }
	        for (let i = depth; i < this.stack.length; i++)
	            result = new BufferNode(this.buffer, result, this.stack[i]);
	        return this.bufferNode = new BufferNode(this.buffer, result, this.index);
	    }
	    /// Get the [tree](#common.Tree) that represents the current node, if
	    /// any. Will return null when the node is in a [tree
	    /// buffer](#common.TreeBuffer).
	    get tree() {
	        return this.buffer ? null : this._tree.node;
	    }
	}
	function hasChild(tree) {
	    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));
	}
	function buildTree(data) {
	    var _a;
	    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;
	    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
	    let types = nodeSet.types;
	    let contextHash = 0, lookAhead = 0;
	    function takeNode(parentStart, minPos, children, positions, inRepeat) {
	        let { id, start, end, size } = cursor;
	        let lookAheadAtStart = lookAhead;
	        while (size < 0) {
	            cursor.next();
	            if (size == -1 /* Reuse */) {
	                let node = reused[id];
	                children.push(node);
	                positions.push(start - parentStart);
	                return;
	            }
	            else if (size == -3 /* ContextChange */) { // Context change
	                contextHash = id;
	                return;
	            }
	            else if (size == -4 /* LookAhead */) {
	                lookAhead = id;
	                return;
	            }
	            else {
	                throw new RangeError(`Unrecognized record size: ${size}`);
	            }
	        }
	        let type = types[id], node, buffer;
	        let startPos = start - parentStart;
	        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
	            // Small enough for a buffer, and no reused nodes inside
	            let data = new Uint16Array(buffer.size - buffer.skip);
	            let endPos = cursor.pos - buffer.size, index = data.length;
	            while (cursor.pos > endPos)
	                index = copyToBuffer(buffer.start, data, index);
	            node = new TreeBuffer(data, end - buffer.start, nodeSet);
	            startPos = buffer.start - parentStart;
	        }
	        else { // Make it a node
	            let endPos = cursor.pos - size;
	            cursor.next();
	            let localChildren = [], localPositions = [];
	            let localInRepeat = id >= minRepeatType ? id : -1;
	            let lastGroup = 0, lastEnd = end;
	            while (cursor.pos > endPos) {
	                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {
	                    if (cursor.end <= lastEnd - maxBufferLength) {
	                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);
	                        lastGroup = localChildren.length;
	                        lastEnd = cursor.end;
	                    }
	                    cursor.next();
	                }
	                else {
	                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);
	                }
	            }
	            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)
	                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);
	            localChildren.reverse();
	            localPositions.reverse();
	            if (localInRepeat > -1 && lastGroup > 0) {
	                let make = makeBalanced(type);
	                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);
	            }
	            else {
	                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);
	            }
	        }
	        children.push(node);
	        positions.push(startPos);
	    }
	    function makeBalanced(type) {
	        return (children, positions, length) => {
	            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;
	            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {
	                if (!lastI && last.type == type && last.length == length)
	                    return last;
	                if (lookAheadProp = last.prop(NodeProp.lookAhead))
	                    lookAhead = positions[lastI] + last.length + lookAheadProp;
	            }
	            return makeTree(type, children, positions, length, lookAhead);
	        };
	    }
	    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {
	        let localChildren = [], localPositions = [];
	        while (children.length > i) {
	            localChildren.push(children.pop());
	            localPositions.push(positions.pop() + base - from);
	        }
	        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));
	        positions.push(from - base);
	    }
	    function makeTree(type, children, positions, length, lookAhead = 0, props) {
	        if (contextHash) {
	            let pair = [NodeProp.contextHash, contextHash];
	            props = props ? [pair].concat(props) : [pair];
	        }
	        if (lookAhead > 25) {
	            let pair = [NodeProp.lookAhead, lookAhead];
	            props = props ? [pair].concat(props) : [pair];
	        }
	        return new Tree(type, children, positions, length, props);
	    }
	    function findBufferSize(maxSize, inRepeat) {
	        // Scan through the buffer to find previous siblings that fit
	        // together in a TreeBuffer, and don't contain any reused nodes
	        // (which can't be stored in a buffer).
	        // If `inRepeat` is > -1, ignore node boundaries of that type for
	        // nesting, but make sure the end falls either at the start
	        // (`maxSize`) or before such a node.
	        let fork = cursor.fork();
	        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;
	        let result = { size: 0, start: 0, skip: 0 };
	        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {
	            let nodeSize = fork.size;
	            // Pretend nested repeat nodes of the same type don't exist
	            if (fork.id == inRepeat && nodeSize >= 0) {
	                // Except that we store the current state as a valid return
	                // value.
	                result.size = size;
	                result.start = start;
	                result.skip = skip;
	                skip += 4;
	                size += 4;
	                fork.next();
	                continue;
	            }
	            let startPos = fork.pos - nodeSize;
	            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)
	                break;
	            let localSkipped = fork.id >= minRepeatType ? 4 : 0;
	            let nodeStart = fork.start;
	            fork.next();
	            while (fork.pos > startPos) {
	                if (fork.size < 0) {
	                    if (fork.size == -3 /* ContextChange */)
	                        localSkipped += 4;
	                    else
	                        break scan;
	                }
	                else if (fork.id >= minRepeatType) {
	                    localSkipped += 4;
	                }
	                fork.next();
	            }
	            start = nodeStart;
	            size += nodeSize;
	            skip += localSkipped;
	        }
	        if (inRepeat < 0 || size == maxSize) {
	            result.size = size;
	            result.start = start;
	            result.skip = skip;
	        }
	        return result.size > 4 ? result : undefined;
	    }
	    function copyToBuffer(bufferStart, buffer, index) {
	        let { id, start, end, size } = cursor;
	        cursor.next();
	        if (size >= 0 && id < minRepeatType) {
	            let startIndex = index;
	            if (size > 4) {
	                let endPos = cursor.pos - (size - 4);
	                while (cursor.pos > endPos)
	                    index = copyToBuffer(bufferStart, buffer, index);
	            }
	            buffer[--index] = startIndex;
	            buffer[--index] = end - bufferStart;
	            buffer[--index] = start - bufferStart;
	            buffer[--index] = id;
	        }
	        else if (size == -3 /* ContextChange */) {
	            contextHash = id;
	        }
	        else if (size == -4 /* LookAhead */) {
	            lookAhead = id;
	        }
	        return index;
	    }
	    let children = [], positions = [];
	    while (cursor.pos > 0)
	        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);
	    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);
	    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);
	}
	const nodeSizeCache = new WeakMap;
	function nodeSize(balanceType, node) {
	    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)
	        return 1;
	    let size = nodeSizeCache.get(node);
	    if (size == null) {
	        size = node.children.reduce((s, ch) => s + nodeSize(balanceType, ch), 1);
	        nodeSizeCache.set(node, size);
	    }
	    return size;
	}
	function balanceRange(
	// The type to tag the resulting tree with. Will also be used for
	// internal nodes when it is an anonymous type
	type, 
	// The direct children and their positions
	children, positions, 
	// The index range in children/positions to use
	from, to, 
	// The start position of the nodes, relative to their parent.
	start, 
	// Length of the outer node
	length, 
	// Function to build the top node of the balanced tree
	mkTop, 
	// Function to build internal nodes for the balanced tree
	mkTree) {
	    let total = 0;
	    for (let i = from; i < to; i++)
	        total += nodeSize(type, children[i]);
	    let maxChild = Math.ceil((total * 1.5) / 8 /* BranchFactor */);
	    let localChildren = [], localPositions = [];
	    function divide(children, positions, from, to, offset) {
	        for (let i = from; i < to;) {
	            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(type, children[i]);
	            i++;
	            for (; i < to; i++) {
	                let nextSize = nodeSize(type, children[i]);
	                if (groupSize + nextSize >= maxChild)
	                    break;
	                groupSize += nextSize;
	            }
	            if (i == groupFrom + 1) {
	                if (groupSize > maxChild) {
	                    let only = children[groupFrom];
	                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);
	                    continue;
	                }
	                localChildren.push(children[groupFrom]);
	            }
	            else {
	                let length = positions[i - 1] + children[i - 1].length - groupStart;
	                localChildren.push(balanceRange(type, children, positions, groupFrom, i, groupStart, length, null, mkTree));
	            }
	            localPositions.push(groupStart + offset - start);
	        }
	    }
	    divide(children, positions, from, to, 0);
	    return (mkTop || mkTree)(localChildren, localPositions, length);
	}

	/// Tree fragments are used during [incremental
	/// parsing](#common.Parser.startParse) to track parts of old trees
	/// that can be reused in a new parse. An array of fragments is used
	/// to track regions of an old tree whose nodes might be reused in new
	/// parses. Use the static
	/// [`applyChanges`](#common.TreeFragment^applyChanges) method to
	/// update fragments for document changes.
	class TreeFragment {
	    /// Construct a tree fragment.
	    constructor(
	    /// The start of the unchanged range pointed to by this fragment.
	    /// This refers to an offset in the _updated_ document (as opposed
	    /// to the original tree).
	    from, 
	    /// The end of the unchanged range.
	    to, 
	    /// The tree that this fragment is based on.
	    tree, 
	    /// The offset between the fragment's tree and the document that
	    /// this fragment can be used against. Add this when going from
	    /// document to tree positions, subtract it to go from tree to
	    /// document positions.
	    offset, openStart = false, openEnd = false) {
	        this.from = from;
	        this.to = to;
	        this.tree = tree;
	        this.offset = offset;
	        this.open = (openStart ? 1 /* Start */ : 0) | (openEnd ? 2 /* End */ : 0);
	    }
	    /// Whether the start of the fragment represents the start of a
	    /// parse, or the end of a change. (In the second case, it may not
	    /// be safe to reuse some nodes at the start, depending on the
	    /// parsing algorithm.)
	    get openStart() { return (this.open & 1 /* Start */) > 0; }
	    /// Whether the end of the fragment represents the end of a
	    /// full-document parse, or the start of a change.
	    get openEnd() { return (this.open & 2 /* End */) > 0; }
	    /// Create a set of fragments from a freshly parsed tree, or update
	    /// an existing set of fragments by replacing the ones that overlap
	    /// with a tree with content from the new tree. When `partial` is
	    /// true, the parse is treated as incomplete, and the resulting
	    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to
	    /// true.
	    static addTree(tree, fragments = [], partial = false) {
	        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];
	        for (let f of fragments)
	            if (f.to > tree.length)
	                result.push(f);
	        return result;
	    }
	    /// Apply a set of edits to an array of fragments, removing or
	    /// splitting fragments as necessary to remove edited ranges, and
	    /// adjusting offsets for fragments that moved.
	    static applyChanges(fragments, changes, minGap = 128) {
	        if (!changes.length)
	            return fragments;
	        let result = [];
	        let fI = 1, nextF = fragments.length ? fragments[0] : null;
	        for (let cI = 0, pos = 0, off = 0;; cI++) {
	            let nextC = cI < changes.length ? changes[cI] : null;
	            let nextPos = nextC ? nextC.fromA : 1e9;
	            if (nextPos - pos >= minGap)
	                while (nextF && nextF.from < nextPos) {
	                    let cut = nextF;
	                    if (pos >= cut.from || nextPos <= cut.to || off) {
	                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;
	                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);
	                    }
	                    if (cut)
	                        result.push(cut);
	                    if (nextF.to > nextPos)
	                        break;
	                    nextF = fI < fragments.length ? fragments[fI++] : null;
	                }
	            if (!nextC)
	                break;
	            pos = nextC.toA;
	            off = nextC.toA - nextC.toB;
	        }
	        return result;
	    }
	}
	/// A superclass that parsers should extend.
	class Parser {
	    /// Start a parse, returning a [partial parse](#common.PartialParse)
	    /// object. [`fragments`](#common.TreeFragment) can be passed in to
	    /// make the parse incremental.
	    ///
	    /// By default, the entire input is parsed. You can pass `ranges`,
	    /// which should be a sorted array of non-empty, non-overlapping
	    /// ranges, to parse only those ranges. The tree returned in that
	    /// case will start at `ranges[0].from`.
	    startParse(input, fragments, ranges) {
	        if (typeof input == "string")
	            input = new StringInput(input);
	        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];
	        return this.createParse(input, fragments || [], ranges);
	    }
	    /// Run a full parse, returning the resulting tree.
	    parse(input, fragments, ranges) {
	        let parse = this.startParse(input, fragments, ranges);
	        for (;;) {
	            let done = parse.advance();
	            if (done)
	                return done;
	        }
	    }
	}
	class StringInput {
	    constructor(string) {
	        this.string = string;
	    }
	    get length() { return this.string.length; }
	    chunk(from) { return this.string.slice(from); }
	    get lineChunks() { return false; }
	    read(from, to) { return this.string.slice(from, to); }
	}

	/**
	Node prop stored in a grammar's top syntax node to provide the
	facet that stores language data for that language.
	*/
	const languageDataProp = /*@__PURE__*/new NodeProp();
	/**
	Helper function to define a facet (to be added to the top syntax
	node(s) for a language via
	[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
	used to associate language data with the language. You
	probably only need this when subclassing
	[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
	*/
	function defineLanguageFacet(baseData) {
	    return Facet.define({
	        combine: baseData ? values => values.concat(baseData) : undefined
	    });
	}
	/**
	A language object manages parsing and per-language
	[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
	managed as a [Lezer](https://lezer.codemirror.net) tree. You'll
	want to subclass this class for custom parsers, or use the
	[`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage) or
	[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for
	[Lezer](https://lezer.codemirror.net/) or stream parsers.
	*/
	class Language {
	    /**
	    Construct a language object. You usually don't need to invoke
	    this directly. But when you do, make sure you use
	    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
	    the first argument.
	    */
	    constructor(
	    /**
	    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data
	    facet used for this language.
	    */
	    data, parser, 
	    /**
	    The node type of the top node of trees produced by this parser.
	    */
	    topNode, extraExtensions = []) {
	        this.data = data;
	        this.topNode = topNode;
	        // Kludge to define EditorState.tree as a debugging helper,
	        // without the EditorState package actually knowing about
	        // languages and lezer trees.
	        if (!EditorState.prototype.hasOwnProperty("tree"))
	            Object.defineProperty(EditorState.prototype, "tree", { get() { return syntaxTree(this); } });
	        this.parser = parser;
	        this.extension = [
	            language.of(this),
	            EditorState.languageData.of((state, pos, side) => state.facet(languageDataFacetAt(state, pos, side)))
	        ].concat(extraExtensions);
	    }
	    /**
	    Query whether this language is active at the given position.
	    */
	    isActiveAt(state, pos, side = -1) {
	        return languageDataFacetAt(state, pos, side) == this.data;
	    }
	    /**
	    Find the document regions that were parsed using this language.
	    The returned regions will _include_ any nested languages rooted
	    in this language, when those exist.
	    */
	    findRegions(state) {
	        let lang = state.facet(language);
	        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)
	            return [{ from: 0, to: state.doc.length }];
	        if (!lang || !lang.allowsNesting)
	            return [];
	        let result = [];
	        let explore = (tree, from) => {
	            if (tree.prop(languageDataProp) == this.data) {
	                result.push({ from, to: from + tree.length });
	                return;
	            }
	            let mount = tree.prop(NodeProp.mounted);
	            if (mount) {
	                if (mount.tree.prop(languageDataProp) == this.data) {
	                    if (mount.overlay)
	                        for (let r of mount.overlay)
	                            result.push({ from: r.from + from, to: r.to + from });
	                    else
	                        result.push({ from: from, to: from + tree.length });
	                    return;
	                }
	                else if (mount.overlay) {
	                    let size = result.length;
	                    explore(mount.tree, mount.overlay[0].from + from);
	                    if (result.length > size)
	                        return;
	                }
	            }
	            for (let i = 0; i < tree.children.length; i++) {
	                let ch = tree.children[i];
	                if (ch instanceof Tree)
	                    explore(ch, tree.positions[i] + from);
	            }
	        };
	        explore(syntaxTree(state), 0);
	        return result;
	    }
	    /**
	    Indicates whether this language allows nested languages. The
	    default implementation returns true.
	    */
	    get allowsNesting() { return true; }
	}
	/**
	@internal
	*/
	Language.setState = /*@__PURE__*/StateEffect.define();
	function languageDataFacetAt(state, pos, side) {
	    let topLang = state.facet(language);
	    if (!topLang)
	        return null;
	    let facet = topLang.data;
	    if (topLang.allowsNesting) {
	        for (let node = syntaxTree(state).topNode; node; node = node.enter(pos, side, true, false))
	            facet = node.type.prop(languageDataProp) || facet;
	    }
	    return facet;
	}
	/**
	Get the syntax tree for a state, which is the current (possibly
	incomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),
	or the empty tree if there is no language available.
	*/
	function syntaxTree(state) {
	    let field = state.field(Language.state, false);
	    return field ? field.tree : Tree.empty;
	}
	// Lezer-style Input object for a Text document.
	class DocInput {
	    constructor(doc, length = doc.length) {
	        this.doc = doc;
	        this.length = length;
	        this.cursorPos = 0;
	        this.string = "";
	        this.cursor = doc.iter();
	    }
	    syncTo(pos) {
	        this.string = this.cursor.next(pos - this.cursorPos).value;
	        this.cursorPos = pos + this.string.length;
	        return this.cursorPos - this.string.length;
	    }
	    chunk(pos) {
	        this.syncTo(pos);
	        return this.string;
	    }
	    get lineChunks() { return true; }
	    read(from, to) {
	        let stringStart = this.cursorPos - this.string.length;
	        if (from < stringStart || to >= this.cursorPos)
	            return this.doc.sliceString(from, to);
	        else
	            return this.string.slice(from - stringStart, to - stringStart);
	    }
	}
	let currentContext = null;
	/**
	A parse context provided to parsers working on the editor content.
	*/
	class ParseContext {
	    /**
	    @internal
	    */
	    constructor(parser, 
	    /**
	    The current editor state.
	    */
	    state, 
	    /**
	    Tree fragments that can be reused by incremental re-parses.
	    */
	    fragments = [], 
	    /**
	    @internal
	    */
	    tree, treeLen, 
	    /**
	    The current editor viewport (or some overapproximation
	    thereof). Intended to be used for opportunistically avoiding
	    work (in which case
	    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)
	    should be called to make sure the parser is restarted when the
	    skipped region becomes visible).
	    */
	    viewport, 
	    /**
	    @internal
	    */
	    skipped, 
	    /**
	    This is where skipping parsers can register a promise that,
	    when resolved, will schedule a new parse. It is cleared when
	    the parse worker picks up the promise. @internal
	    */
	    scheduleOn) {
	        this.parser = parser;
	        this.state = state;
	        this.fragments = fragments;
	        this.tree = tree;
	        this.treeLen = treeLen;
	        this.viewport = viewport;
	        this.skipped = skipped;
	        this.scheduleOn = scheduleOn;
	        this.parse = null;
	        /**
	        @internal
	        */
	        this.tempSkipped = [];
	    }
	    startParse() {
	        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);
	    }
	    /**
	    @internal
	    */
	    work(time, upto) {
	        if (upto != null && upto >= this.state.doc.length)
	            upto = undefined;
	        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {
	            this.takeTree();
	            return true;
	        }
	        return this.withContext(() => {
	            var _a;
	            if (!this.parse)
	                this.parse = this.startParse();
	            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&
	                upto < this.state.doc.length)
	                this.parse.stopAt(upto);
	            let endTime = Date.now() + time;
	            for (;;) {
	                let done = this.parse.advance();
	                if (done) {
	                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));
	                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;
	                    this.tree = done;
	                    this.parse = null;
	                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))
	                        this.parse = this.startParse();
	                    else
	                        return true;
	                }
	                if (Date.now() > endTime)
	                    return false;
	            }
	        });
	    }
	    /**
	    @internal
	    */
	    takeTree() {
	        let pos, tree;
	        if (this.parse && (pos = this.parse.parsedPos) > this.treeLen) {
	            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)
	                this.parse.stopAt(pos);
	            this.withContext(() => { while (!(tree = this.parse.advance())) { } });
	            this.tree = tree;
	            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));
	            this.parse = null;
	        }
	    }
	    withContext(f) {
	        let prev = currentContext;
	        currentContext = this;
	        try {
	            return f();
	        }
	        finally {
	            currentContext = prev;
	        }
	    }
	    withoutTempSkipped(fragments) {
	        for (let r; r = this.tempSkipped.pop();)
	            fragments = cutFragments(fragments, r.from, r.to);
	        return fragments;
	    }
	    /**
	    @internal
	    */
	    changes(changes, newState) {
	        let { fragments, tree, treeLen, viewport, skipped } = this;
	        this.takeTree();
	        if (!changes.empty) {
	            let ranges = [];
	            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));
	            fragments = TreeFragment.applyChanges(fragments, ranges);
	            tree = Tree.empty;
	            treeLen = 0;
	            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };
	            if (this.skipped.length) {
	                skipped = [];
	                for (let r of this.skipped) {
	                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);
	                    if (from < to)
	                        skipped.push({ from, to });
	                }
	            }
	        }
	        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);
	    }
	    /**
	    @internal
	    */
	    updateViewport(viewport) {
	        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)
	            return false;
	        this.viewport = viewport;
	        let startLen = this.skipped.length;
	        for (let i = 0; i < this.skipped.length; i++) {
	            let { from, to } = this.skipped[i];
	            if (from < viewport.to && to > viewport.from) {
	                this.fragments = cutFragments(this.fragments, from, to);
	                this.skipped.splice(i--, 1);
	            }
	        }
	        if (this.skipped.length >= startLen)
	            return false;
	        this.reset();
	        return true;
	    }
	    /**
	    @internal
	    */
	    reset() {
	        if (this.parse) {
	            this.takeTree();
	            this.parse = null;
	        }
	    }
	    /**
	    Notify the parse scheduler that the given region was skipped
	    because it wasn't in view, and the parse should be restarted
	    when it comes into view.
	    */
	    skipUntilInView(from, to) {
	        this.skipped.push({ from, to });
	    }
	    /**
	    Returns a parser intended to be used as placeholder when
	    asynchronously loading a nested parser. It'll skip its input and
	    mark it as not-really-parsed, so that the next update will parse
	    it again.
	    
	    When `until` is given, a reparse will be scheduled when that
	    promise resolves.
	    */
	    static getSkippingParser(until) {
	        return new class extends Parser {
	            createParse(input, fragments, ranges) {
	                let from = ranges[0].from, to = ranges[ranges.length - 1].to;
	                let parser = {
	                    parsedPos: from,
	                    advance() {
	                        let cx = currentContext;
	                        if (cx) {
	                            for (let r of ranges)
	                                cx.tempSkipped.push(r);
	                            if (until)
	                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;
	                        }
	                        this.parsedPos = to;
	                        return new Tree(NodeType.none, [], [], to - from);
	                    },
	                    stoppedAt: null,
	                    stopAt() { }
	                };
	                return parser;
	            }
	        };
	    }
	    /**
	    @internal
	    */
	    movedPast(pos) {
	        return this.treeLen < pos && this.parse && this.parse.parsedPos >= pos;
	    }
	    /**
	    @internal
	    */
	    isDone(upto) {
	        let frags = this.fragments;
	        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;
	    }
	    /**
	    Get the context for the current parse, or `null` if no editor
	    parse is in progress.
	    */
	    static get() { return currentContext; }
	}
	function cutFragments(fragments, from, to) {
	    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);
	}
	class LanguageState {
	    constructor(
	    // A mutable parse state that is used to preserve work done during
	    // the lifetime of a state when moving to the next state.
	    context) {
	        this.context = context;
	        this.tree = context.tree;
	    }
	    apply(tr) {
	        if (!tr.docChanged)
	            return this;
	        let newCx = this.context.changes(tr.changes, tr.state);
	        // If the previous parse wasn't done, go forward only up to its
	        // end position or the end of the viewport, to avoid slowing down
	        // state updates with parse work beyond the viewport.
	        let upto = this.context.treeLen == tr.startState.doc.length ? undefined
	            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);
	        if (!newCx.work(25 /* Apply */, upto))
	            newCx.takeTree();
	        return new LanguageState(newCx);
	    }
	    static init(state) {
	        let parseState = new ParseContext(state.facet(language).parser, state, [], Tree.empty, 0, { from: 0, to: state.doc.length }, [], null);
	        if (!parseState.work(25 /* Apply */))
	            parseState.takeTree();
	        return new LanguageState(parseState);
	    }
	}
	Language.state = /*@__PURE__*/StateField.define({
	    create: LanguageState.init,
	    update(value, tr) {
	        for (let e of tr.effects)
	            if (e.is(Language.setState))
	                return e.value;
	        if (tr.startState.facet(language) != tr.state.facet(language))
	            return LanguageState.init(tr.state);
	        return value.apply(tr);
	    }
	});
	let requestIdle = typeof window != "undefined" && window.requestIdleCallback ||
	    ((callback, { timeout }) => setTimeout(callback, timeout));
	let cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
	const parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {
	    constructor(view) {
	        this.view = view;
	        this.working = -1;
	        // End of the current time chunk
	        this.chunkEnd = -1;
	        // Milliseconds of budget left for this chunk
	        this.chunkBudget = -1;
	        this.work = this.work.bind(this);
	        this.scheduleWork();
	    }
	    update(update) {
	        let cx = this.view.state.field(Language.state).context;
	        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)
	            this.scheduleWork();
	        if (update.docChanged) {
	            if (this.view.hasFocus)
	                this.chunkBudget += 50 /* ChangeBonus */;
	            this.scheduleWork();
	        }
	        this.checkAsyncSchedule(cx);
	    }
	    scheduleWork() {
	        if (this.working > -1)
	            return;
	        let { state } = this.view, field = state.field(Language.state);
	        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))
	            this.working = requestIdle(this.work, { timeout: 500 /* Pause */ });
	    }
	    work(deadline) {
	        this.working = -1;
	        let now = Date.now();
	        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk
	            this.chunkEnd = now + 30000 /* ChunkTime */;
	            this.chunkBudget = 3000 /* ChunkBudget */;
	        }
	        if (this.chunkBudget <= 0)
	            return; // No more budget
	        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);
	        if (field.tree == field.context.tree && field.context.treeLen >= vpTo + 1000000 /* MaxParseAhead */)
	            return;
	        let time = Math.min(this.chunkBudget, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
	        let done = field.context.work(time, vpTo + 1000000 /* MaxParseAhead */);
	        this.chunkBudget -= Date.now() - now;
	        if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {
	            field.context.takeTree();
	            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });
	        }
	        if (!done && this.chunkBudget > 0)
	            this.scheduleWork();
	        this.checkAsyncSchedule(field.context);
	    }
	    checkAsyncSchedule(cx) {
	        if (cx.scheduleOn) {
	            cx.scheduleOn.then(() => this.scheduleWork());
	            cx.scheduleOn = null;
	        }
	    }
	    destroy() {
	        if (this.working >= 0)
	            cancelIdle(this.working);
	    }
	}, {
	    eventHandlers: { focus() { this.scheduleWork(); } }
	});
	/**
	The facet used to associate a language with an editor state.
	*/
	const language = /*@__PURE__*/Facet.define({
	    combine(languages) { return languages.length ? languages[0] : null; },
	    enables: [Language.state, parseWorker]
	});

	/**
	Facet that defines a way to provide a function that computes the
	appropriate indentation depth at the start of a given line, or
	`null` to indicate no appropriate indentation could be determined.
	*/
	const indentService = /*@__PURE__*/Facet.define();
	/**
	Facet for overriding the unit by which indentation happens.
	Should be a string consisting either entirely of spaces or
	entirely of tabs. When not set, this defaults to 2 spaces.
	*/
	const indentUnit = /*@__PURE__*/Facet.define({
	    combine: values => {
	        if (!values.length)
	            return "  ";
	        if (!/^(?: +|\t+)$/.test(values[0]))
	            throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
	        return values[0];
	    }
	});
	/**
	Return the _column width_ of an indent unit in the state.
	Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
	facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
	contains tabs.
	*/
	function getIndentUnit(state) {
	    let unit = state.facet(indentUnit);
	    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
	}
	/**
	Create an indentation string that covers columns 0 to `cols`.
	Will use tabs for as much of the columns as possible when the
	[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
	tabs.
	*/
	function indentString(state, cols) {
	    let result = "", ts = state.tabSize;
	    if (state.facet(indentUnit).charCodeAt(0) == 9)
	        while (cols >= ts) {
	            result += "\t";
	            cols -= ts;
	        }
	    for (let i = 0; i < cols; i++)
	        result += " ";
	    return result;
	}
	/**
	Get the indentation at the given position. Will first consult any
	[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
	and if none of those return an indentation, this will check the
	syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
	and use that if found. Returns a number when an indentation could
	be determined, and null otherwise.
	*/
	function getIndentation(context, pos) {
	    if (context instanceof EditorState)
	        context = new IndentContext(context);
	    for (let service of context.state.facet(indentService)) {
	        let result = service(context, pos);
	        if (result != null)
	            return result;
	    }
	    let tree = syntaxTree(context.state);
	    return tree ? syntaxIndentation(context, tree, pos) : null;
	}
	/**
	Indentation contexts are used when calling [indentation
	services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
	useful in indentation logic, and can selectively override the
	indentation reported for some lines.
	*/
	class IndentContext {
	    /**
	    Create an indent context.
	    */
	    constructor(
	    /**
	    The editor state.
	    */
	    state, 
	    /**
	    @internal
	    */
	    options = {}) {
	        this.state = state;
	        this.options = options;
	        this.unit = getIndentUnit(state);
	    }
	    /**
	    Get a description of the line at the given position, taking
	    [simulated line
	    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
	    into account. If there is such a break at `pos`, the `bias`
	    argument determines whether the part of the line line before or
	    after the break is used.
	    */
	    lineAt(pos, bias = 1) {
	        let line = this.state.doc.lineAt(pos);
	        let { simulateBreak } = this.options;
	        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {
	            if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)
	                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };
	            else
	                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };
	        }
	        return line;
	    }
	    /**
	    Get the text directly after `pos`, either the entire line
	    or the next 100 characters, whichever is shorter.
	    */
	    textAfterPos(pos, bias = 1) {
	        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)
	            return "";
	        let { text, from } = this.lineAt(pos, bias);
	        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));
	    }
	    /**
	    Find the column for the given position.
	    */
	    column(pos, bias = 1) {
	        let { text, from } = this.lineAt(pos, bias);
	        let result = this.countColumn(text, pos - from);
	        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;
	        if (override > -1)
	            result += override - this.countColumn(text, text.search(/\S|$/));
	        return result;
	    }
	    /**
	    Find the column position (taking tabs into account) of the given
	    position in the given string.
	    */
	    countColumn(line, pos = line.length) {
	        return countColumn(line, this.state.tabSize, pos);
	    }
	    /**
	    Find the indentation column of the line at the given point.
	    */
	    lineIndent(pos, bias = 1) {
	        let { text, from } = this.lineAt(pos, bias);
	        let override = this.options.overrideIndentation;
	        if (override) {
	            let overriden = override(from);
	            if (overriden > -1)
	                return overriden;
	        }
	        return this.countColumn(text, text.search(/\S|$/));
	    }
	    /**
	    Returns the [simulated line
	    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)
	    for this context, if any.
	    */
	    get simulatedBreak() {
	        return this.options.simulateBreak || null;
	    }
	}
	/**
	A syntax tree node prop used to associate indentation strategies
	with node types. Such a strategy is a function from an indentation
	context to a column number or null, where null indicates that no
	definitive indentation can be determined.
	*/
	const indentNodeProp = /*@__PURE__*/new NodeProp();
	// Compute the indentation for a given position from the syntax tree.
	function syntaxIndentation(cx, ast, pos) {
	    return indentFrom(ast.resolveInner(pos).enterUnfinishedNodesBefore(pos), pos, cx);
	}
	function ignoreClosed(cx) {
	    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;
	}
	function indentStrategy(tree) {
	    let strategy = tree.type.prop(indentNodeProp);
	    if (strategy)
	        return strategy;
	    let first = tree.firstChild, close;
	    if (first && (close = first.type.prop(NodeProp.closedBy))) {
	        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;
	        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
	    }
	    return tree.parent == null ? topIndent : null;
	}
	function indentFrom(node, pos, base) {
	    for (; node; node = node.parent) {
	        let strategy = indentStrategy(node);
	        if (strategy)
	            return strategy(new TreeIndentContext(base, pos, node));
	    }
	    return null;
	}
	function topIndent() { return 0; }
	/**
	Objects of this type provide context information and helper
	methods to indentation functions.
	*/
	class TreeIndentContext extends IndentContext {
	    /**
	    @internal
	    */
	    constructor(base, 
	    /**
	    The position at which indentation is being computed.
	    */
	    pos, 
	    /**
	    The syntax tree node to which the indentation strategy
	    applies.
	    */
	    node) {
	        super(base.state, base.options);
	        this.base = base;
	        this.pos = pos;
	        this.node = node;
	    }
	    /**
	    Get the text directly after `this.pos`, either the entire line
	    or the next 100 characters, whichever is shorter.
	    */
	    get textAfter() {
	        return this.textAfterPos(this.pos);
	    }
	    /**
	    Get the indentation at the reference line for `this.node`, which
	    is the line on which it starts, unless there is a node that is
	    _not_ a parent of this node covering the start of that line. If
	    so, the line at the start of that node is tried, again skipping
	    on if it is covered by another such node.
	    */
	    get baseIndent() {
	        let line = this.state.doc.lineAt(this.node.from);
	        // Skip line starts that are covered by a sibling (or cousin, etc)
	        for (;;) {
	            let atBreak = this.node.resolve(line.from);
	            while (atBreak.parent && atBreak.parent.from == atBreak.from)
	                atBreak = atBreak.parent;
	            if (isParent(atBreak, this.node))
	                break;
	            line = this.state.doc.lineAt(atBreak.from);
	        }
	        return this.lineIndent(line.from);
	    }
	    /**
	    Continue looking for indentations in the node's parent nodes,
	    and return the result of that.
	    */
	    continue() {
	        let parent = this.node.parent;
	        return parent ? indentFrom(parent, this.pos, this.base) : 0;
	    }
	}
	function isParent(parent, of) {
	    for (let cur = of; cur; cur = cur.parent)
	        if (parent == cur)
	            return true;
	    return false;
	}
	// Check whether a delimited node is aligned (meaning there are
	// non-skipped nodes on the same line as the opening delimiter). And
	// if so, return the opening token.
	function bracketedAligned(context) {
	    let tree = context.node;
	    let openToken = tree.childAfter(tree.from), last = tree.lastChild;
	    if (!openToken)
	        return null;
	    let sim = context.options.simulateBreak;
	    let openLine = context.state.doc.lineAt(openToken.from);
	    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
	    for (let pos = openToken.to;;) {
	        let next = tree.childAfter(pos);
	        if (!next || next == last)
	            return null;
	        if (!next.type.isSkipped)
	            return next.from < lineEnd ? openToken : null;
	        pos = next.to;
	    }
	}
	function delimitedStrategy(context, align, units, closing, closedAt) {
	    let after = context.textAfter, space = after.match(/^\s*/)[0].length;
	    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
	    let aligned = align ? bracketedAligned(context) : null;
	    if (aligned)
	        return closed ? context.column(aligned.from) : context.column(aligned.to);
	    return context.baseIndent + (closed ? 0 : context.unit * units);
	}
	const DontIndentBeyond = 200;
	/**
	Enables reindentation on input. When a language defines an
	`indentOnInput` field in its [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
	expression, the line at the cursor will be reindented whenever new
	text is typed and the input from the start of the line up to the
	cursor matches that regexp.

	To avoid unneccesary reindents, it is recommended to start the
	regexp with `^` (usually followed by `\s*`), and end it with `$`.
	For example, `/^\s*\}$/` will reindent when a closing brace is
	added at the start of a line.
	*/
	function indentOnInput() {
	    return EditorState.transactionFilter.of(tr => {
	        if (!tr.docChanged || !tr.isUserEvent("input.type"))
	            return tr;
	        let rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
	        if (!rules.length)
	            return tr;
	        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);
	        if (head > line.from + DontIndentBeyond)
	            return tr;
	        let lineStart = doc.sliceString(line.from, head);
	        if (!rules.some(r => r.test(lineStart)))
	            return tr;
	        let { state } = tr, last = -1, changes = [];
	        for (let { head } of state.selection.ranges) {
	            let line = state.doc.lineAt(head);
	            if (line.from == last)
	                continue;
	            last = line.from;
	            let indent = getIndentation(state, line.from);
	            if (indent == null)
	                continue;
	            let cur = /^\s*/.exec(line.text)[0];
	            let norm = indentString(state, indent);
	            if (cur != norm)
	                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
	        }
	        return changes.length ? [tr, { changes, sequential: true }] : tr;
	    });
	}

	/**
	A facet that registers a code folding service. When called with
	the extent of a line, such a function should return a foldable
	range that starts on that line (but continues beyond it), if one
	can be found.
	*/
	const foldService = /*@__PURE__*/Facet.define();
	/**
	This node prop is used to associate folding information with
	syntax node types. Given a syntax node, it should check whether
	that tree is foldable and return the range that can be collapsed
	when it is.
	*/
	const foldNodeProp = /*@__PURE__*/new NodeProp();
	function syntaxFolding(state, start, end) {
	    let tree = syntaxTree(state);
	    if (tree.length == 0)
	        return null;
	    let inner = tree.resolveInner(end);
	    let found = null;
	    for (let cur = inner; cur; cur = cur.parent) {
	        if (cur.to <= end || cur.from > end)
	            continue;
	        if (found && cur.from < start)
	            break;
	        let prop = cur.type.prop(foldNodeProp);
	        if (prop) {
	            let value = prop(cur, state);
	            if (value && value.from <= end && value.from >= start && value.to > end)
	                found = value;
	        }
	    }
	    return found;
	}
	/**
	Check whether the given line is foldable. First asks any fold
	services registered through
	[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
	a result, tries to query the [fold node
	prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
	of the line.
	*/
	function foldable(state, lineStart, lineEnd) {
	    for (let service of state.facet(foldService)) {
	        let result = service(state, lineStart, lineEnd);
	        if (result)
	            return result;
	    }
	    return syntaxFolding(state, lineStart, lineEnd);
	}

	/**
	A gutter marker represents a bit of information attached to a line
	in a specific gutter. Your own custom markers have to extend this
	class.
	*/
	class GutterMarker extends RangeValue {
	    /**
	    @internal
	    */
	    compare(other) {
	        return this == other || this.constructor == other.constructor && this.eq(other);
	    }
	    /**
	    Compare this marker to another marker of the same type.
	    */
	    eq(other) { return false; }
	}
	GutterMarker.prototype.elementClass = "";
	GutterMarker.prototype.toDOM = undefined;
	GutterMarker.prototype.mapMode = MapMode.TrackBefore;
	GutterMarker.prototype.startSide = GutterMarker.prototype.endSide = -1;
	GutterMarker.prototype.point = true;
	/**
	Facet used to add a class to all gutter elements for a given line.
	Markers given to this facet should _only_ define an
	[`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a
	[`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear
	in all gutters for the line).
	*/
	const gutterLineClass = /*@__PURE__*/Facet.define();
	const defaults$1 = {
	    class: "",
	    renderEmptyElements: false,
	    elementStyle: "",
	    markers: () => RangeSet.empty,
	    lineMarker: () => null,
	    initialSpacer: null,
	    updateSpacer: null,
	    domEventHandlers: {}
	};
	const activeGutters = /*@__PURE__*/Facet.define();
	/**
	Define an editor gutter. The order in which the gutters appear is
	determined by their extension priority.
	*/
	function gutter(config) {
	    return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults$1), config))];
	}
	const baseTheme$7 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-gutters": {
	        display: "flex",
	        height: "100%",
	        boxSizing: "border-box",
	        left: 0,
	        zIndex: 200
	    },
	    "&light .cm-gutters": {
	        backgroundColor: "#f5f5f5",
	        color: "#999",
	        borderRight: "1px solid #ddd"
	    },
	    "&dark .cm-gutters": {
	        backgroundColor: "#333338",
	        color: "#ccc"
	    },
	    ".cm-gutter": {
	        display: "flex !important",
	        flexDirection: "column",
	        flexShrink: 0,
	        boxSizing: "border-box",
	        minHeight: "100%",
	        overflow: "hidden"
	    },
	    ".cm-gutterElement": {
	        boxSizing: "border-box"
	    },
	    ".cm-lineNumbers .cm-gutterElement": {
	        padding: "0 3px 0 5px",
	        minWidth: "20px",
	        textAlign: "right",
	        whiteSpace: "nowrap"
	    },
	    "&light .cm-activeLineGutter": {
	        backgroundColor: "#e2f2ff"
	    },
	    "&dark .cm-activeLineGutter": {
	        backgroundColor: "#222227"
	    }
	});
	const unfixGutters = /*@__PURE__*/Facet.define({
	    combine: values => values.some(x => x)
	});
	/**
	The gutter-drawing plugin is automatically enabled when you add a
	gutter, but you can use this function to explicitly configure it.

	Unless `fixed` is explicitly set to `false`, the gutters are
	fixed, meaning they don't scroll along with the content
	horizontally (except on Internet Explorer, which doesn't support
	CSS [`position:
	sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
	*/
	function gutters(config) {
	    let result = [
	        gutterView,
	        baseTheme$7
	    ];
	    if (config && config.fixed === false)
	        result.push(unfixGutters.of(true));
	    return result;
	}
	const gutterView = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-gutters";
	        this.dom.setAttribute("aria-hidden", "true");
	        this.gutters = view.state.facet(activeGutters).map(conf => new SingleGutterView(view, conf));
	        for (let gutter of this.gutters)
	            this.dom.appendChild(gutter.dom);
	        this.fixed = !view.state.facet(unfixGutters);
	        if (this.fixed) {
	            // FIXME IE11 fallback, which doesn't support position: sticky,
	            // by using position: relative + event handlers that realign the
	            // gutter (or just force fixed=false on IE11?)
	            this.dom.style.position = "sticky";
	        }
	        view.scrollDOM.insertBefore(this.dom, view.contentDOM);
	        this.syncGutters();
	    }
	    update(update) {
	        if (this.updateGutters(update))
	            this.syncGutters();
	    }
	    syncGutters() {
	        let lineClasses = RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
	        let classSet = [];
	        let contexts = this.gutters.map(gutter => new UpdateContext(gutter, this.view.viewport));
	        this.view.viewportLines(line => {
	            let text;
	            if (Array.isArray(line.type)) {
	                for (let b of line.type)
	                    if (b.type == BlockType.Text) {
	                        text = b;
	                        break;
	                    }
	            }
	            else {
	                text = line.type == BlockType.Text ? line : undefined;
	            }
	            if (!text)
	                return;
	            if (classSet.length)
	                classSet = [];
	            advanceCursor(lineClasses, classSet, line.from);
	            for (let cx of contexts)
	                cx.line(this.view, text, classSet);
	        }, 0);
	        for (let cx of contexts)
	            cx.finish();
	        this.dom.style.minHeight = this.view.contentHeight + "px";
	        if (this.view.state.facet(unfixGutters) != !this.fixed) {
	            this.fixed = !this.fixed;
	            this.dom.style.position = this.fixed ? "sticky" : "";
	        }
	    }
	    updateGutters(update) {
	        let prev = update.startState.facet(activeGutters), cur = update.state.facet(activeGutters);
	        let change = update.docChanged || update.heightChanged || update.viewportChanged ||
	            !RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
	        if (prev == cur) {
	            for (let gutter of this.gutters)
	                if (gutter.update(update))
	                    change = true;
	        }
	        else {
	            change = true;
	            let gutters = [];
	            for (let conf of cur) {
	                let known = prev.indexOf(conf);
	                if (known < 0) {
	                    gutters.push(new SingleGutterView(this.view, conf));
	                }
	                else {
	                    this.gutters[known].update(update);
	                    gutters.push(this.gutters[known]);
	                }
	            }
	            for (let g of this.gutters)
	                g.dom.remove();
	            for (let g of gutters)
	                this.dom.appendChild(g.dom);
	            this.gutters = gutters;
	        }
	        return change;
	    }
	    destroy() {
	        this.dom.remove();
	    }
	}, {
	    provide: /*@__PURE__*/PluginField.scrollMargins.from(value => {
	        if (value.gutters.length == 0 || !value.fixed)
	            return null;
	        return value.view.textDirection == Direction.LTR ? { left: value.dom.offsetWidth } : { right: value.dom.offsetWidth };
	    })
	});
	function asArray(val) { return (Array.isArray(val) ? val : [val]); }
	function advanceCursor(cursor, collect, pos) {
	    while (cursor.value && cursor.from <= pos) {
	        if (cursor.from == pos)
	            collect.push(cursor.value);
	        cursor.next();
	    }
	}
	class UpdateContext {
	    constructor(gutter, viewport) {
	        this.gutter = gutter;
	        this.localMarkers = [];
	        this.i = 0;
	        this.height = 0;
	        this.cursor = RangeSet.iter(gutter.markers, viewport.from);
	    }
	    line(view, line, extraMarkers) {
	        if (this.localMarkers.length)
	            this.localMarkers = [];
	        advanceCursor(this.cursor, this.localMarkers, line.from);
	        let localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
	        let forLine = this.gutter.config.lineMarker(view, line, localMarkers);
	        if (forLine)
	            localMarkers.unshift(forLine);
	        let gutter = this.gutter;
	        if (localMarkers.length == 0 && !gutter.config.renderEmptyElements)
	            return;
	        let above = line.top - this.height;
	        if (this.i == gutter.elements.length) {
	            let newElt = new GutterElement(view, line.height, above, localMarkers);
	            gutter.elements.push(newElt);
	            gutter.dom.appendChild(newElt.dom);
	        }
	        else {
	            let elt = gutter.elements[this.i];
	            if (sameMarkers(localMarkers, elt.markers))
	                localMarkers = elt.markers;
	            elt.update(view, line.height, above, localMarkers);
	        }
	        this.height = line.bottom;
	        this.i++;
	    }
	    finish() {
	        let gutter = this.gutter;
	        while (gutter.elements.length > this.i)
	            gutter.dom.removeChild(gutter.elements.pop().dom);
	    }
	}
	class SingleGutterView {
	    constructor(view, config) {
	        this.view = view;
	        this.config = config;
	        this.elements = [];
	        this.spacer = null;
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-gutter" + (this.config.class ? " " + this.config.class : "");
	        for (let prop in config.domEventHandlers) {
	            this.dom.addEventListener(prop, (event) => {
	                let line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
	                if (config.domEventHandlers[prop](view, line, event))
	                    event.preventDefault();
	            });
	        }
	        this.markers = asArray(config.markers(view));
	        if (config.initialSpacer) {
	            this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
	            this.dom.appendChild(this.spacer.dom);
	            this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
	        }
	    }
	    update(update) {
	        let prevMarkers = this.markers;
	        this.markers = asArray(this.config.markers(update.view));
	        if (this.spacer && this.config.updateSpacer) {
	            let updated = this.config.updateSpacer(this.spacer.markers[0], update);
	            if (updated != this.spacer.markers[0])
	                this.spacer.update(update.view, 0, 0, [updated]);
	        }
	        let vp = update.view.viewport;
	        return !RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to);
	    }
	}
	class GutterElement {
	    constructor(view, height, above, markers) {
	        this.height = -1;
	        this.above = 0;
	        this.dom = document.createElement("div");
	        this.update(view, height, above, markers);
	    }
	    update(view, height, above, markers) {
	        if (this.height != height)
	            this.dom.style.height = (this.height = height) + "px";
	        if (this.above != above)
	            this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
	        if (this.markers != markers) {
	            this.markers = markers;
	            for (let ch; ch = this.dom.lastChild;)
	                ch.remove();
	            let cls = "cm-gutterElement";
	            for (let m of markers) {
	                if (m.toDOM)
	                    this.dom.appendChild(m.toDOM(view));
	                let c = m.elementClass;
	                if (c)
	                    cls += " " + c;
	            }
	            this.dom.className = cls;
	        }
	    }
	}
	function sameMarkers(a, b) {
	    if (a.length != b.length)
	        return false;
	    for (let i = 0; i < a.length; i++)
	        if (!a[i].compare(b[i]))
	            return false;
	    return true;
	}
	/**
	Facet used to provide markers to the line number gutter.
	*/
	const lineNumberMarkers = /*@__PURE__*/Facet.define();
	const lineNumberConfig = /*@__PURE__*/Facet.define({
	    combine(values) {
	        return combineConfig(values, { formatNumber: String, domEventHandlers: {} }, {
	            domEventHandlers(a, b) {
	                let result = Object.assign({}, a);
	                for (let event in b) {
	                    let exists = result[event], add = b[event];
	                    result[event] = exists ? (view, line, event) => exists(view, line, event) || add(view, line, event) : add;
	                }
	                return result;
	            }
	        });
	    }
	});
	class NumberMarker extends GutterMarker {
	    constructor(number) {
	        super();
	        this.number = number;
	    }
	    eq(other) { return this.number == other.number; }
	    toDOM(_view) { return document.createTextNode(this.number); }
	}
	function formatNumber(view, number) {
	    return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
	}
	const lineNumberGutter = /*@__PURE__*/activeGutters.compute([lineNumberConfig], state => ({
	    class: "cm-lineNumbers",
	    renderEmptyElements: false,
	    markers(view) { return view.state.facet(lineNumberMarkers); },
	    lineMarker(view, line, others) {
	        if (others.some(m => m.toDOM))
	            return null;
	        return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
	    },
	    initialSpacer(view) {
	        return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
	    },
	    updateSpacer(spacer, update) {
	        let max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
	        return max == spacer.number ? spacer : new NumberMarker(max);
	    },
	    domEventHandlers: state.facet(lineNumberConfig).domEventHandlers
	}));
	/**
	Create a line number gutter extension.
	*/
	function lineNumbers(config = {}) {
	    return [
	        lineNumberConfig.of(config),
	        gutters(),
	        lineNumberGutter
	    ];
	}
	function maxLineNumber(lines) {
	    let last = 9;
	    while (last < lines)
	        last = last * 10 + 9;
	    return last;
	}
	const activeLineGutterMarker = /*@__PURE__*/new class extends GutterMarker {
	    constructor() {
	        super(...arguments);
	        this.elementClass = "cm-activeLineGutter";
	    }
	};
	const activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], state => {
	    let marks = [], last = -1;
	    for (let range of state.selection.ranges)
	        if (range.empty) {
	            let linePos = state.doc.lineAt(range.head).from;
	            if (linePos > last) {
	                last = linePos;
	                marks.push(activeLineGutterMarker.range(linePos));
	            }
	        }
	    return RangeSet.of(marks);
	});
	/**
	Returns an extension that adds a `cm-activeLineGutter` class to
	all gutter elements on the [active
	line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
	*/
	function highlightActiveLineGutter() {
	    return activeLineGutterHighlighter;
	}

	function mapRange(range, mapping) {
	    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);
	    return from >= to ? undefined : { from, to };
	}
	/**
	State effect that can be attached to a transaction to fold the
	given range. (You probably only need this in exceptional
	circumstances—usually you'll just want to let
	[`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode) and the [fold
	gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter) create the transactions.)
	*/
	const foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
	/**
	State effect that unfolds the given range (if it was folded).
	*/
	const unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });
	function selectedLines(view) {
	    let lines = [];
	    for (let { head } of view.state.selection.ranges) {
	        if (lines.some(l => l.from <= head && l.to >= head))
	            continue;
	        lines.push(view.visualLineAt(head));
	    }
	    return lines;
	}
	const foldState = /*@__PURE__*/StateField.define({
	    create() {
	        return Decoration.none;
	    },
	    update(folded, tr) {
	        folded = folded.map(tr.changes);
	        for (let e of tr.effects) {
	            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to))
	                folded = folded.update({ add: [foldWidget.range(e.value.from, e.value.to)] });
	            else if (e.is(unfoldEffect))
	                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,
	                    filterFrom: e.value.from, filterTo: e.value.to });
	        }
	        // Clear folded ranges that cover the selection head
	        if (tr.selection) {
	            let onSelection = false, { head } = tr.selection.main;
	            folded.between(head, head, (a, b) => { if (a < head && b > head)
	                onSelection = true; });
	            if (onSelection)
	                folded = folded.update({
	                    filterFrom: head,
	                    filterTo: head,
	                    filter: (a, b) => b <= head || a >= head
	                });
	        }
	        return folded;
	    },
	    provide: f => EditorView.decorations.from(f)
	});
	function foldInside(state, from, to) {
	    var _a;
	    let found = null;
	    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {
	        if (!found || found.from > from)
	            found = { from, to };
	    });
	    return found;
	}
	function foldExists(folded, from, to) {
	    let found = false;
	    folded.between(from, from, (a, b) => { if (a == from && b == to)
	        found = true; });
	    return found;
	}
	function maybeEnable(state, other) {
	    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));
	}
	/**
	Fold the lines that are selected, if possible.
	*/
	const foldCode = view => {
	    for (let line of selectedLines(view)) {
	        let range = foldable(view.state, line.from, line.to);
	        if (range) {
	            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });
	            return true;
	        }
	    }
	    return false;
	};
	/**
	Unfold folded ranges on selected lines.
	*/
	const unfoldCode = view => {
	    if (!view.state.field(foldState, false))
	        return false;
	    let effects = [];
	    for (let line of selectedLines(view)) {
	        let folded = foldInside(view.state, line.from, line.to);
	        if (folded)
	            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
	    }
	    if (effects.length)
	        view.dispatch({ effects });
	    return effects.length > 0;
	};
	function announceFold(view, range, fold = true) {
	    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;
	    return EditorView.announce.of(`${view.state.phrase(fold ? "Folded lines" : "Unfolded lines")} ${lineFrom} ${view.state.phrase("to")} ${lineTo}.`);
	}
	/**
	Fold all top-level foldable ranges.
	*/
	const foldAll = view => {
	    let { state } = view, effects = [];
	    for (let pos = 0; pos < state.doc.length;) {
	        let line = view.visualLineAt(pos), range = foldable(state, line.from, line.to);
	        if (range)
	            effects.push(foldEffect.of(range));
	        pos = (range ? view.visualLineAt(range.to) : line).to + 1;
	    }
	    if (effects.length)
	        view.dispatch({ effects: maybeEnable(view.state, effects) });
	    return !!effects.length;
	};
	/**
	Unfold all folded code.
	*/
	const unfoldAll = view => {
	    let field = view.state.field(foldState, false);
	    if (!field || !field.size)
	        return false;
	    let effects = [];
	    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });
	    view.dispatch({ effects });
	    return true;
	};
	/**
	Default fold-related key bindings.

	 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode).
	 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#fold.unfoldCode).
	 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#fold.foldAll).
	 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#fold.unfoldAll).
	*/
	const foldKeymap = [
	    { key: "Ctrl-Shift-[", mac: "Cmd-Alt-[", run: foldCode },
	    { key: "Ctrl-Shift-]", mac: "Cmd-Alt-]", run: unfoldCode },
	    { key: "Ctrl-Alt-[", run: foldAll },
	    { key: "Ctrl-Alt-]", run: unfoldAll }
	];
	const defaultConfig = {
	    placeholderDOM: null,
	    placeholderText: "…"
	};
	const foldConfig = /*@__PURE__*/Facet.define({
	    combine(values) { return combineConfig(values, defaultConfig); }
	});
	/**
	Create an extension that configures code folding.
	*/
	function codeFolding(config) {
	    let result = [foldState, baseTheme$6];
	    if (config)
	        result.push(foldConfig.of(config));
	    return result;
	}
	const foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {
	        ignoreEvents() { return false; }
	        toDOM(view) {
	            let { state } = view, conf = state.facet(foldConfig);
	            if (conf.placeholderDOM)
	                return conf.placeholderDOM();
	            let element = document.createElement("span");
	            element.textContent = conf.placeholderText;
	            element.setAttribute("aria-label", state.phrase("folded code"));
	            element.title = state.phrase("unfold");
	            element.className = "cm-foldPlaceholder";
	            element.onclick = event => {
	                let line = view.visualLineAt(view.posAtDOM(event.target));
	                let folded = foldInside(view.state, line.from, line.to);
	                if (folded)
	                    view.dispatch({ effects: unfoldEffect.of(folded) });
	                event.preventDefault();
	            };
	            return element;
	        }
	    } });
	const foldGutterDefaults = {
	    openText: "⌄",
	    closedText: "›",
	    markerDOM: null,
	};
	class FoldMarker extends GutterMarker {
	    constructor(config, open) {
	        super();
	        this.config = config;
	        this.open = open;
	    }
	    eq(other) { return this.config == other.config && this.open == other.open; }
	    toDOM(view) {
	        if (this.config.markerDOM)
	            return this.config.markerDOM(this.open);
	        let span = document.createElement("span");
	        span.textContent = this.open ? this.config.openText : this.config.closedText;
	        span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
	        return span;
	    }
	}
	/**
	Create an extension that registers a fold gutter, which shows a
	fold status indicator before foldable lines (which can be clicked
	to fold or unfold the line).
	*/
	function foldGutter(config = {}) {
	    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
	    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);
	    let markers = ViewPlugin.fromClass(class {
	        constructor(view) {
	            this.from = view.viewport.from;
	            this.markers = this.buildMarkers(view);
	        }
	        update(update) {
	            if (update.docChanged || update.viewportChanged ||
	                update.startState.facet(language) != update.state.facet(language) ||
	                update.startState.field(foldState, false) != update.state.field(foldState, false))
	                this.markers = this.buildMarkers(update.view);
	        }
	        buildMarkers(view) {
	            let builder = new RangeSetBuilder();
	            view.viewportLines(line => {
	                let mark = foldInside(view.state, line.from, line.to) ? canUnfold
	                    : foldable(view.state, line.from, line.to) ? canFold : null;
	                if (mark)
	                    builder.add(line.from, line.from, mark);
	            });
	            return builder.finish();
	        }
	    });
	    return [
	        markers,
	        gutter({
	            class: "cm-foldGutter",
	            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },
	            initialSpacer() {
	                return new FoldMarker(fullConfig, false);
	            },
	            domEventHandlers: {
	                click: (view, line) => {
	                    let folded = foldInside(view.state, line.from, line.to);
	                    if (folded) {
	                        view.dispatch({ effects: unfoldEffect.of(folded) });
	                        return true;
	                    }
	                    let range = foldable(view.state, line.from, line.to);
	                    if (range) {
	                        view.dispatch({ effects: foldEffect.of(range) });
	                        return true;
	                    }
	                    return false;
	                }
	            }
	        }),
	        codeFolding()
	    ];
	}
	const baseTheme$6 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-foldPlaceholder": {
	        backgroundColor: "#eee",
	        border: "1px solid #ddd",
	        color: "#888",
	        borderRadius: ".2em",
	        margin: "0 1px",
	        padding: "0 1px",
	        cursor: "pointer"
	    },
	    ".cm-foldGutter .cm-gutterElement": {
	        padding: "0 1px",
	        cursor: "pointer"
	    }
	});

	const baseTheme$5 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-matchingBracket": { backgroundColor: "#328c8252" },
	    ".cm-nonmatchingBracket": { backgroundColor: "#bb555544" }
	});
	const DefaultScanDist = 10000, DefaultBrackets = "()[]{}";
	const bracketMatchingConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            afterCursor: true,
	            brackets: DefaultBrackets,
	            maxScanDistance: DefaultScanDist
	        });
	    }
	});
	const matchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-matchingBracket" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: "cm-nonmatchingBracket" });
	const bracketMatchingState = /*@__PURE__*/StateField.define({
	    create() { return Decoration.none; },
	    update(deco, tr) {
	        if (!tr.docChanged && !tr.selection)
	            return deco;
	        let decorations = [];
	        let config = tr.state.facet(bracketMatchingConfig);
	        for (let range of tr.state.selection.ranges) {
	            if (!range.empty)
	                continue;
	            let match = matchBrackets(tr.state, range.head, -1, config)
	                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))
	                || (config.afterCursor &&
	                    (matchBrackets(tr.state, range.head, 1, config) ||
	                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));
	            if (!match)
	                continue;
	            let mark = match.matched ? matchingMark : nonmatchingMark;
	            decorations.push(mark.range(match.start.from, match.start.to));
	            if (match.end)
	                decorations.push(mark.range(match.end.from, match.end.to));
	        }
	        return Decoration.set(decorations, true);
	    },
	    provide: f => EditorView.decorations.from(f)
	});
	const bracketMatchingUnique = [
	    bracketMatchingState,
	    baseTheme$5
	];
	/**
	Create an extension that enables bracket matching. Whenever the
	cursor is next to a bracket, that bracket and the one it matches
	are highlighted. Or, when no matching bracket is found, another
	highlighting style is used to indicate this.
	*/
	function bracketMatching(config = {}) {
	    return [bracketMatchingConfig.of(config), bracketMatchingUnique];
	}
	function matchingNodes(node, dir, brackets) {
	    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);
	    if (byProp)
	        return byProp;
	    if (node.name.length == 1) {
	        let index = brackets.indexOf(node.name);
	        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))
	            return [brackets[index + dir]];
	    }
	    return null;
	}
	/**
	Find the matching bracket for the token at `pos`, scanning
	direction `dir`. Only the `brackets` and `maxScanDistance`
	properties are used from `config`, if given. Returns null if no
	bracket was found at `pos`, or a match result otherwise.
	*/
	function matchBrackets(state, pos, dir, config = {}) {
	    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;
	    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);
	    for (let cur = node; cur; cur = cur.parent) {
	        let matches = matchingNodes(cur.type, dir, brackets);
	        if (matches && cur.from < cur.to)
	            return matchMarkedBrackets(state, pos, dir, cur, matches, brackets);
	    }
	    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);
	}
	function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
	    let parent = token.parent, firstToken = { from: token.from, to: token.to };
	    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
	    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))
	        do {
	            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
	                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {
	                    return { start: firstToken, end: { from: cursor.from, to: cursor.to }, matched: true };
	                }
	                else if (matchingNodes(cursor.type, dir, brackets)) {
	                    depth++;
	                }
	                else if (matchingNodes(cursor.type, -dir, brackets)) {
	                    depth--;
	                    if (depth == 0)
	                        return {
	                            start: firstToken,
	                            end: cursor.from == cursor.to ? undefined : { from: cursor.from, to: cursor.to },
	                            matched: false
	                        };
	                }
	            }
	        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
	    return { start: firstToken, matched: false };
	}
	function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
	    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
	    let bracket = brackets.indexOf(startCh);
	    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))
	        return null;
	    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };
	    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;
	    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {
	        let text = iter.value;
	        if (dir < 0)
	            distance += text.length;
	        let basePos = pos + distance * dir;
	        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {
	            let found = brackets.indexOf(text[pos]);
	            if (found < 0 || tree.resolve(basePos + pos, 1).type != tokenType)
	                continue;
	            if ((found % 2 == 0) == (dir > 0)) {
	                depth++;
	            }
	            else if (depth == 1) { // Closing
	                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };
	            }
	            else {
	                depth--;
	            }
	        }
	        if (dir > 0)
	            distance += text.length;
	    }
	    return iter.done ? { start: startToken, matched: false } : null;
	}

	function updateSel(sel, by) {
	    return EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
	}
	function setSel(state, selection) {
	    return state.update({ selection, scrollIntoView: true, userEvent: "select" });
	}
	function moveSel({ state, dispatch }, how) {
	    let selection = updateSel(state.selection, how);
	    if (selection.eq(state.selection))
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	function rangeEnd(range, forward) {
	    return EditorSelection.cursor(forward ? range.to : range.from);
	}
	function cursorByChar(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward));
	}
	/**
	Move the selection one character to the left (which is backward in
	left-to-right text, forward in right-to-left text).
	*/
	const cursorCharLeft = view => cursorByChar(view, view.textDirection != Direction.LTR);
	/**
	Move the selection one character to the right.
	*/
	const cursorCharRight = view => cursorByChar(view, view.textDirection == Direction.LTR);
	function cursorByGroup(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward));
	}
	/**
	Move the selection to the left across one group of word or
	non-word (but also non-space) characters.
	*/
	const cursorGroupLeft = view => cursorByGroup(view, view.textDirection != Direction.LTR);
	/**
	Move the selection one group to the right.
	*/
	const cursorGroupRight = view => cursorByGroup(view, view.textDirection == Direction.LTR);
	function interestingNode(state, node, bracketProp) {
	    if (node.type.prop(bracketProp))
	        return true;
	    let len = node.to - node.from;
	    return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
	}
	function moveBySyntax(state, start, forward) {
	    let pos = syntaxTree(state).resolveInner(start.head);
	    let bracketProp = forward ? NodeProp.closedBy : NodeProp.openedBy;
	    // Scan forward through child nodes to see if there's an interesting
	    // node ahead.
	    for (let at = start.head;;) {
	        let next = forward ? pos.childAfter(at) : pos.childBefore(at);
	        if (!next)
	            break;
	        if (interestingNode(state, next, bracketProp))
	            pos = next;
	        else
	            at = forward ? next.to : next.from;
	    }
	    let bracket = pos.type.prop(bracketProp), match, newPos;
	    if (bracket && (match = forward ? matchBrackets(state, pos.from, 1) : matchBrackets(state, pos.to, -1)) && match.matched)
	        newPos = forward ? match.end.to : match.end.from;
	    else
	        newPos = forward ? pos.to : pos.from;
	    return EditorSelection.cursor(newPos, forward ? -1 : 1);
	}
	/**
	Move the cursor over the next syntactic element to the left.
	*/
	const cursorSyntaxLeft = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
	/**
	Move the cursor over the next syntactic element to the right.
	*/
	const cursorSyntaxRight = view => moveSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
	function cursorByLine(view, forward) {
	    return moveSel(view, range => {
	        if (!range.empty)
	            return rangeEnd(range, forward);
	        let moved = view.moveVertically(range, forward);
	        return moved.head != range.head ? moved : view.moveToLineBoundary(range, forward);
	    });
	}
	/**
	Move the selection one line up.
	*/
	const cursorLineUp = view => cursorByLine(view, false);
	/**
	Move the selection one line down.
	*/
	const cursorLineDown = view => cursorByLine(view, true);
	function cursorByPage(view, forward) {
	    return moveSel(view, range => range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward));
	}
	/**
	Move the selection one page up.
	*/
	const cursorPageUp = view => cursorByPage(view, false);
	/**
	Move the selection one page down.
	*/
	const cursorPageDown = view => cursorByPage(view, true);
	function moveByLineBoundary(view, start, forward) {
	    let line = view.visualLineAt(start.head), moved = view.moveToLineBoundary(start, forward);
	    if (moved.head == start.head && moved.head != (forward ? line.to : line.from))
	        moved = view.moveToLineBoundary(start, forward, false);
	    if (!forward && moved.head == line.from && line.length) {
	        let space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
	        if (space && start.head != line.from + space)
	            moved = EditorSelection.cursor(line.from + space);
	    }
	    return moved;
	}
	/**
	Move the selection to the next line wrap point, or to the end of
	the line if there isn't one left on this line.
	*/
	const cursorLineBoundaryForward = view => moveSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection to previous line wrap point, or failing that to
	the start of the line. If the line is indented, and the cursor
	isn't already at the end of the indentation, this will move to the
	end of the indentation instead of the start of the line.
	*/
	const cursorLineBoundaryBackward = view => moveSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection to the start of the line.
	*/
	const cursorLineStart = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from, 1));
	/**
	Move the selection to the end of the line.
	*/
	const cursorLineEnd = view => moveSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to, -1));
	function toMatchingBracket(state, dispatch, extend) {
	    let found = false, selection = updateSel(state.selection, range => {
	        let matching = matchBrackets(state, range.head, -1)
	            || matchBrackets(state, range.head, 1)
	            || (range.head > 0 && matchBrackets(state, range.head - 1, 1))
	            || (range.head < state.doc.length && matchBrackets(state, range.head + 1, -1));
	        if (!matching || !matching.end)
	            return range;
	        found = true;
	        let head = matching.start.from == range.head ? matching.end.to : matching.end.from;
	        return extend ? EditorSelection.range(range.anchor, head) : EditorSelection.cursor(head);
	    });
	    if (!found)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	}
	/**
	Move the selection to the bracket matching the one it is currently
	on, if any.
	*/
	const cursorMatchingBracket = ({ state, dispatch }) => toMatchingBracket(state, dispatch, false);
	function extendSel(view, how) {
	    let selection = updateSel(view.state.selection, range => {
	        let head = how(range);
	        return EditorSelection.range(range.anchor, head.head, head.goalColumn);
	    });
	    if (selection.eq(view.state.selection))
	        return false;
	    view.dispatch(setSel(view.state, selection));
	    return true;
	}
	function selectByChar(view, forward) {
	    return extendSel(view, range => view.moveByChar(range, forward));
	}
	/**
	Move the selection head one character to the left, while leaving
	the anchor in place.
	*/
	const selectCharLeft = view => selectByChar(view, view.textDirection != Direction.LTR);
	/**
	Move the selection head one character to the right.
	*/
	const selectCharRight = view => selectByChar(view, view.textDirection == Direction.LTR);
	function selectByGroup(view, forward) {
	    return extendSel(view, range => view.moveByGroup(range, forward));
	}
	/**
	Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
	the left.
	*/
	const selectGroupLeft = view => selectByGroup(view, view.textDirection != Direction.LTR);
	/**
	Move the selection head one group to the right.
	*/
	const selectGroupRight = view => selectByGroup(view, view.textDirection == Direction.LTR);
	/**
	Move the selection head over the next syntactic element to the left.
	*/
	const selectSyntaxLeft = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection != Direction.LTR));
	/**
	Move the selection head over the next syntactic element to the right.
	*/
	const selectSyntaxRight = view => extendSel(view, range => moveBySyntax(view.state, range, view.textDirection == Direction.LTR));
	function selectByLine(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward));
	}
	/**
	Move the selection head one line up.
	*/
	const selectLineUp = view => selectByLine(view, false);
	/**
	Move the selection head one line down.
	*/
	const selectLineDown = view => selectByLine(view, true);
	function selectByPage(view, forward) {
	    return extendSel(view, range => view.moveVertically(range, forward, view.dom.clientHeight));
	}
	/**
	Move the selection head one page up.
	*/
	const selectPageUp = view => selectByPage(view, false);
	/**
	Move the selection head one page down.
	*/
	const selectPageDown = view => selectByPage(view, true);
	/**
	Move the selection head to the next line boundary.
	*/
	const selectLineBoundaryForward = view => extendSel(view, range => moveByLineBoundary(view, range, true));
	/**
	Move the selection head to the previous line boundary.
	*/
	const selectLineBoundaryBackward = view => extendSel(view, range => moveByLineBoundary(view, range, false));
	/**
	Move the selection head to the start of the line.
	*/
	const selectLineStart = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).from));
	/**
	Move the selection head to the end of the line.
	*/
	const selectLineEnd = view => extendSel(view, range => EditorSelection.cursor(view.visualLineAt(range.head).to));
	/**
	Move the selection to the start of the document.
	*/
	const cursorDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: 0 }));
	    return true;
	};
	/**
	Move the selection to the end of the document.
	*/
	const cursorDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.doc.length }));
	    return true;
	};
	/**
	Move the selection head to the start of the document.
	*/
	const selectDocStart = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: 0 }));
	    return true;
	};
	/**
	Move the selection head to the end of the document.
	*/
	const selectDocEnd = ({ state, dispatch }) => {
	    dispatch(setSel(state, { anchor: state.selection.main.anchor, head: state.doc.length }));
	    return true;
	};
	/**
	Select the entire document.
	*/
	const selectAll = ({ state, dispatch }) => {
	    dispatch(state.update({ selection: { anchor: 0, head: state.doc.length }, userEvent: "select" }));
	    return true;
	};
	/**
	Expand the selection to cover entire lines.
	*/
	const selectLine = ({ state, dispatch }) => {
	    let ranges = selectedLineBlocks(state).map(({ from, to }) => EditorSelection.range(from, Math.min(to + 1, state.doc.length)));
	    dispatch(state.update({ selection: EditorSelection.create(ranges), userEvent: "select" }));
	    return true;
	};
	/**
	Select the next syntactic construct that is larger than the
	selection. Note that this will only work insofar as the language
	[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
	syntax tree.
	*/
	const selectParentSyntax = ({ state, dispatch }) => {
	    let selection = updateSel(state.selection, range => {
	        var _a;
	        let context = syntaxTree(state).resolveInner(range.head, 1);
	        while (!((context.from < range.from && context.to >= range.to) ||
	            (context.to > range.to && context.from <= range.from) ||
	            !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent)))
	            context = context.parent;
	        return EditorSelection.range(context.to, context.from);
	    });
	    dispatch(setSel(state, selection));
	    return true;
	};
	/**
	Simplify the current selection. When multiple ranges are selected,
	reduce it to its main range. Otherwise, if the selection is
	non-empty, convert it to a cursor selection.
	*/
	const simplifySelection = ({ state, dispatch }) => {
	    let cur = state.selection, selection = null;
	    if (cur.ranges.length > 1)
	        selection = EditorSelection.create([cur.main]);
	    else if (!cur.main.empty)
	        selection = EditorSelection.create([EditorSelection.cursor(cur.main.head)]);
	    if (!selection)
	        return false;
	    dispatch(setSel(state, selection));
	    return true;
	};
	function deleteBy({ state, dispatch }, by) {
	    if (state.readOnly)
	        return false;
	    let event = "delete.selection";
	    let changes = state.changeByRange(range => {
	        let { from, to } = range;
	        if (from == to) {
	            let towards = by(from);
	            if (towards < from)
	                event = "delete.backward";
	            else if (towards > from)
	                event = "delete.forward";
	            from = Math.min(from, towards);
	            to = Math.max(to, towards);
	        }
	        return from == to ? { range } : { changes: { from, to }, range: EditorSelection.cursor(from) };
	    });
	    if (changes.changes.empty)
	        return false;
	    dispatch(state.update(changes, { scrollIntoView: true, userEvent: event }));
	    return true;
	}
	function skipAtomic(target, pos, forward) {
	    if (target instanceof EditorView)
	        for (let ranges of target.pluginField(PluginField.atomicRanges))
	            ranges.between(pos, pos, (from, to) => {
	                if (from < pos && to > pos)
	                    pos = forward ? to : from;
	            });
	    return pos;
	}
	const deleteByChar = (target, forward) => deleteBy(target, pos => {
	    let { state } = target, line = state.doc.lineAt(pos), before, targetPos;
	    if (!forward && pos > line.from && pos < line.from + 200 &&
	        !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
	        if (before[before.length - 1] == "\t")
	            return pos - 1;
	        let col = countColumn(before, state.tabSize), drop = col % getIndentUnit(state) || getIndentUnit(state);
	        for (let i = 0; i < drop && before[before.length - 1 - i] == " "; i++)
	            pos--;
	        targetPos = pos;
	    }
	    else {
	        targetPos = findClusterBreak(line.text, pos - line.from, forward) + line.from;
	        if (targetPos == pos && line.number != (forward ? state.doc.lines : 1))
	            targetPos += forward ? 1 : -1;
	    }
	    return skipAtomic(target, targetPos, forward);
	});
	/**
	Delete the selection, or, for cursor selections, the character
	before the cursor.
	*/
	const deleteCharBackward = view => deleteByChar(view, false);
	/**
	Delete the selection or the character after the cursor.
	*/
	const deleteCharForward = view => deleteByChar(view, true);
	const deleteByGroup = (target, forward) => deleteBy(target, start => {
	    let pos = start, { state } = target, line = state.doc.lineAt(pos);
	    let categorize = state.charCategorizer(pos);
	    for (let cat = null;;) {
	        if (pos == (forward ? line.to : line.from)) {
	            if (pos == start && line.number != (forward ? state.doc.lines : 1))
	                pos += forward ? 1 : -1;
	            break;
	        }
	        let next = findClusterBreak(line.text, pos - line.from, forward) + line.from;
	        let nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
	        let nextCat = categorize(nextChar);
	        if (cat != null && nextCat != cat)
	            break;
	        if (nextChar != " " || pos != start)
	            cat = nextCat;
	        pos = next;
	    }
	    return skipAtomic(target, pos, forward);
	});
	/**
	Delete the selection or backward until the end of the next
	[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
	whitespace when they consist of a single space.
	*/
	const deleteGroupBackward = target => deleteByGroup(target, false);
	/**
	Delete the selection or forward until the end of the next group.
	*/
	const deleteGroupForward = target => deleteByGroup(target, true);
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the end of the line. If the cursor is directly at the end of the
	line, delete the line break after it.
	*/
	const deleteToLineEnd = view => deleteBy(view, pos => {
	    let lineEnd = view.visualLineAt(pos).to;
	    return skipAtomic(view, pos < lineEnd ? lineEnd : Math.min(view.state.doc.length, pos + 1), true);
	});
	/**
	Delete the selection, or, if it is a cursor selection, delete to
	the start of the line. If the cursor is directly at the start of the
	line, delete the line break before it.
	*/
	const deleteToLineStart = view => deleteBy(view, pos => {
	    let lineStart = view.visualLineAt(pos).from;
	    return skipAtomic(view, pos > lineStart ? lineStart : Math.max(0, pos - 1), false);
	});
	/**
	Replace each selection range with a line break, leaving the cursor
	on the line before the break.
	*/
	const splitLine = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let changes = state.changeByRange(range => {
	        return { changes: { from: range.from, to: range.to, insert: Text.of(["", ""]) },
	            range: EditorSelection.cursor(range.from) };
	    });
	    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
	    return true;
	};
	/**
	Flip the characters before and after the cursor(s).
	*/
	const transposeChars = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let changes = state.changeByRange(range => {
	        if (!range.empty || range.from == 0 || range.from == state.doc.length)
	            return { range };
	        let pos = range.from, line = state.doc.lineAt(pos);
	        let from = pos == line.from ? pos - 1 : findClusterBreak(line.text, pos - line.from, false) + line.from;
	        let to = pos == line.to ? pos + 1 : findClusterBreak(line.text, pos - line.from, true) + line.from;
	        return { changes: { from, to, insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos)) },
	            range: EditorSelection.cursor(to) };
	    });
	    if (changes.changes.empty)
	        return false;
	    dispatch(state.update(changes, { scrollIntoView: true, userEvent: "move.character" }));
	    return true;
	};
	function selectedLineBlocks(state) {
	    let blocks = [], upto = -1;
	    for (let range of state.selection.ranges) {
	        let startLine = state.doc.lineAt(range.from), endLine = state.doc.lineAt(range.to);
	        if (!range.empty && range.to == endLine.from)
	            endLine = state.doc.lineAt(range.to - 1);
	        if (upto >= startLine.number) {
	            let prev = blocks[blocks.length - 1];
	            prev.to = endLine.to;
	            prev.ranges.push(range);
	        }
	        else {
	            blocks.push({ from: startLine.from, to: endLine.to, ranges: [range] });
	        }
	        upto = endLine.number + 1;
	    }
	    return blocks;
	}
	function moveLine(state, dispatch, forward) {
	    if (state.readOnly)
	        return false;
	    let changes = [], ranges = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward ? block.to == state.doc.length : block.from == 0)
	            continue;
	        let nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
	        let size = nextLine.length + 1;
	        if (forward) {
	            changes.push({ from: block.to, to: nextLine.to }, { from: block.from, insert: nextLine.text + state.lineBreak });
	            for (let r of block.ranges)
	                ranges.push(EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
	        }
	        else {
	            changes.push({ from: nextLine.from, to: block.from }, { from: block.to, insert: state.lineBreak + nextLine.text });
	            for (let r of block.ranges)
	                ranges.push(EditorSelection.range(r.anchor - size, r.head - size));
	        }
	    }
	    if (!changes.length)
	        return false;
	    dispatch(state.update({
	        changes,
	        scrollIntoView: true,
	        selection: EditorSelection.create(ranges, state.selection.mainIndex),
	        userEvent: "move.line"
	    }));
	    return true;
	}
	/**
	Move the selected lines up one line.
	*/
	const moveLineUp = ({ state, dispatch }) => moveLine(state, dispatch, false);
	/**
	Move the selected lines down one line.
	*/
	const moveLineDown = ({ state, dispatch }) => moveLine(state, dispatch, true);
	function copyLine(state, dispatch, forward) {
	    if (state.readOnly)
	        return false;
	    let changes = [];
	    for (let block of selectedLineBlocks(state)) {
	        if (forward)
	            changes.push({ from: block.from, insert: state.doc.slice(block.from, block.to) + state.lineBreak });
	        else
	            changes.push({ from: block.to, insert: state.lineBreak + state.doc.slice(block.from, block.to) });
	    }
	    dispatch(state.update({ changes, scrollIntoView: true, userEvent: "input.copyline" }));
	    return true;
	}
	/**
	Create a copy of the selected lines. Keep the selection in the top copy.
	*/
	const copyLineUp = ({ state, dispatch }) => copyLine(state, dispatch, false);
	/**
	Create a copy of the selected lines. Keep the selection in the bottom copy.
	*/
	const copyLineDown = ({ state, dispatch }) => copyLine(state, dispatch, true);
	/**
	Delete selected lines.
	*/
	const deleteLine = view => {
	    if (view.state.readOnly)
	        return false;
	    let { state } = view, changes = state.changes(selectedLineBlocks(state).map(({ from, to }) => {
	        if (from > 0)
	            from--;
	        else if (to < state.doc.length)
	            to++;
	        return { from, to };
	    }));
	    let selection = updateSel(state.selection, range => view.moveVertically(range, true)).map(changes);
	    view.dispatch({ changes, selection, scrollIntoView: true, userEvent: "delete.line" });
	    return true;
	};
	function isBetweenBrackets(state, pos) {
	    if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1)))
	        return { from: pos, to: pos };
	    let context = syntaxTree(state).resolveInner(pos);
	    let before = context.childBefore(pos), after = context.childAfter(pos), closedBy;
	    if (before && after && before.to <= pos && after.from >= pos &&
	        (closedBy = before.type.prop(NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 &&
	        state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from)
	        return { from: before.to, to: after.from };
	    return null;
	}
	/**
	Replace the selection with a newline and indent the newly created
	line(s). If the current line consists only of whitespace, this
	will also delete that whitespace. When the cursor is between
	matching brackets, an additional newline will be inserted after
	the cursor.
	*/
	const insertNewlineAndIndent = /*@__PURE__*/newlineAndIndent(false);
	/**
	Create a blank, indented line below the current line.
	*/
	const insertBlankLine = /*@__PURE__*/newlineAndIndent(true);
	function newlineAndIndent(atEof) {
	    return ({ state, dispatch }) => {
	        if (state.readOnly)
	            return false;
	        let changes = state.changeByRange(range => {
	            let { from, to } = range, line = state.doc.lineAt(from);
	            let explode = !atEof && from == to && isBetweenBrackets(state, from);
	            if (atEof)
	                from = to = (to <= line.to ? line : state.doc.lineAt(to)).to;
	            let cx = new IndentContext(state, { simulateBreak: from, simulateDoubleBreak: !!explode });
	            let indent = getIndentation(cx, from);
	            if (indent == null)
	                indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
	            while (to < line.to && /\s/.test(line.text[to - line.from]))
	                to++;
	            if (explode)
	                ({ from, to } = explode);
	            else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from)))
	                from = line.from;
	            let insert = ["", indentString(state, indent)];
	            if (explode)
	                insert.push(indentString(state, cx.lineIndent(line.from, -1)));
	            return { changes: { from, to, insert: Text.of(insert) },
	                range: EditorSelection.cursor(from + 1 + insert[1].length) };
	        });
	        dispatch(state.update(changes, { scrollIntoView: true, userEvent: "input" }));
	        return true;
	    };
	}
	function changeBySelectedLine(state, f) {
	    let atLine = -1;
	    return state.changeByRange(range => {
	        let changes = [];
	        for (let pos = range.from; pos <= range.to;) {
	            let line = state.doc.lineAt(pos);
	            if (line.number > atLine && (range.empty || range.to > line.from)) {
	                f(line, changes, range);
	                atLine = line.number;
	            }
	            pos = line.to + 1;
	        }
	        let changeSet = state.changes(changes);
	        return { changes,
	            range: EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1)) };
	    });
	}
	/**
	Auto-indent the selected lines. This uses the [indentation service
	facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
	information.
	*/
	const indentSelection = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    let updated = Object.create(null);
	    let context = new IndentContext(state, { overrideIndentation: start => {
	            let found = updated[start];
	            return found == null ? -1 : found;
	        } });
	    let changes = changeBySelectedLine(state, (line, changes, range) => {
	        let indent = getIndentation(context, line.from);
	        if (indent == null)
	            return;
	        if (!/\S/.test(line.text))
	            indent = 0;
	        let cur = /^\s*/.exec(line.text)[0];
	        let norm = indentString(state, indent);
	        if (cur != norm || range.from < line.from + cur.length) {
	            updated[line.from] = indent;
	            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });
	        }
	    });
	    if (!changes.changes.empty)
	        dispatch(state.update(changes, { userEvent: "indent" }));
	    return true;
	};
	/**
	Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
	lines.
	*/
	const indentMore = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        changes.push({ from: line.from, insert: state.facet(indentUnit) });
	    }), { userEvent: "input.indent" }));
	    return true;
	};
	/**
	Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
	selected lines.
	*/
	const indentLess = ({ state, dispatch }) => {
	    if (state.readOnly)
	        return false;
	    dispatch(state.update(changeBySelectedLine(state, (line, changes) => {
	        let space = /^\s*/.exec(line.text)[0];
	        if (!space)
	            return;
	        let col = countColumn(space, state.tabSize), keep = 0;
	        let insert = indentString(state, Math.max(0, col - getIndentUnit(state)));
	        while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep))
	            keep++;
	        changes.push({ from: line.from + keep, to: line.from + space.length, insert: insert.slice(keep) });
	    }), { userEvent: "delete.dedent" }));
	    return true;
	};
	/**
	Array of key bindings containing the Emacs-style bindings that are
	available on macOS by default.

	 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
	 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
	 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
	 - Alt-<: [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart)
	 - Alt->: [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd)
	 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
	 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
	*/
	const emacsStyleKeymap = [
	    { key: "Ctrl-b", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
	    { key: "Ctrl-f", run: cursorCharRight, shift: selectCharRight },
	    { key: "Ctrl-p", run: cursorLineUp, shift: selectLineUp },
	    { key: "Ctrl-n", run: cursorLineDown, shift: selectLineDown },
	    { key: "Ctrl-a", run: cursorLineStart, shift: selectLineStart },
	    { key: "Ctrl-e", run: cursorLineEnd, shift: selectLineEnd },
	    { key: "Ctrl-d", run: deleteCharForward },
	    { key: "Ctrl-h", run: deleteCharBackward },
	    { key: "Ctrl-k", run: deleteToLineEnd },
	    { key: "Ctrl-Alt-h", run: deleteGroupBackward },
	    { key: "Ctrl-o", run: splitLine },
	    { key: "Ctrl-t", run: transposeChars },
	    { key: "Alt-<", run: cursorDocStart },
	    { key: "Alt->", run: cursorDocEnd },
	    { key: "Ctrl-v", run: cursorPageDown },
	    { key: "Alt-v", run: cursorPageUp },
	];
	/**
	An array of key bindings closely sticking to platform-standard or
	widely used bindings. (This includes the bindings from
	[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
	property changed to `mac`.)

	 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
	 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
	 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
	 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
	 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
	 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
	 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
	 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
	 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
	 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
	 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
	 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
	 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
	 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
	 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
	 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
	 - Backspace: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
	 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
	 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
	 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
	 - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
	 - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
	*/
	const standardKeymap = /*@__PURE__*/[
	    { key: "ArrowLeft", run: cursorCharLeft, shift: selectCharLeft, preventDefault: true },
	    { key: "Mod-ArrowLeft", mac: "Alt-ArrowLeft", run: cursorGroupLeft, shift: selectGroupLeft },
	    { mac: "Cmd-ArrowLeft", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
	    { key: "ArrowRight", run: cursorCharRight, shift: selectCharRight, preventDefault: true },
	    { key: "Mod-ArrowRight", mac: "Alt-ArrowRight", run: cursorGroupRight, shift: selectGroupRight },
	    { mac: "Cmd-ArrowRight", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
	    { key: "ArrowUp", run: cursorLineUp, shift: selectLineUp, preventDefault: true },
	    { mac: "Cmd-ArrowUp", run: cursorDocStart, shift: selectDocStart },
	    { mac: "Ctrl-ArrowUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "ArrowDown", run: cursorLineDown, shift: selectLineDown, preventDefault: true },
	    { mac: "Cmd-ArrowDown", run: cursorDocEnd, shift: selectDocEnd },
	    { mac: "Ctrl-ArrowDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "PageUp", run: cursorPageUp, shift: selectPageUp },
	    { key: "PageDown", run: cursorPageDown, shift: selectPageDown },
	    { key: "Home", run: cursorLineBoundaryBackward, shift: selectLineBoundaryBackward },
	    { key: "Mod-Home", run: cursorDocStart, shift: selectDocStart },
	    { key: "End", run: cursorLineBoundaryForward, shift: selectLineBoundaryForward },
	    { key: "Mod-End", run: cursorDocEnd, shift: selectDocEnd },
	    { key: "Enter", run: insertNewlineAndIndent },
	    { key: "Mod-a", run: selectAll },
	    { key: "Backspace", run: deleteCharBackward, shift: deleteCharBackward },
	    { key: "Delete", run: deleteCharForward, shift: deleteCharForward },
	    { key: "Mod-Backspace", mac: "Alt-Backspace", run: deleteGroupBackward },
	    { key: "Mod-Delete", mac: "Alt-Delete", run: deleteGroupForward },
	    { mac: "Mod-Backspace", run: deleteToLineStart },
	    { mac: "Mod-Delete", run: deleteToLineEnd }
	].concat(/*@__PURE__*/emacsStyleKeymap.map(b => ({ mac: b.key, run: b.run, shift: b.shift })));
	/**
	The default keymap. Includes all bindings from
	[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

	- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
	- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
	- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
	- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
	- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
	- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
	- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
	- Ctrl-Enter (Comd-Enter on macOS): [`insertBlankLine`](https://codemirror.net/6/docs/ref/#commands.insertBlankLine)
	- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
	- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
	- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
	- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
	- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
	- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
	- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
	*/
	const defaultKeymap = /*@__PURE__*/[
	    { key: "Alt-ArrowLeft", mac: "Ctrl-ArrowLeft", run: cursorSyntaxLeft, shift: selectSyntaxLeft },
	    { key: "Alt-ArrowRight", mac: "Ctrl-ArrowRight", run: cursorSyntaxRight, shift: selectSyntaxRight },
	    { key: "Alt-ArrowUp", run: moveLineUp },
	    { key: "Shift-Alt-ArrowUp", run: copyLineUp },
	    { key: "Alt-ArrowDown", run: moveLineDown },
	    { key: "Shift-Alt-ArrowDown", run: copyLineDown },
	    { key: "Escape", run: simplifySelection },
	    { key: "Mod-Enter", run: insertBlankLine },
	    { key: "Alt-l", mac: "Ctrl-l", run: selectLine },
	    { key: "Mod-i", run: selectParentSyntax, preventDefault: true },
	    { key: "Mod-[", run: indentLess },
	    { key: "Mod-]", run: indentMore },
	    { key: "Mod-Alt-\\", run: indentSelection },
	    { key: "Shift-Mod-k", run: deleteLine },
	    { key: "Shift-Mod-\\", run: cursorMatchingBracket }
	].concat(standardKeymap);

	const defaults = {
	    brackets: ["(", "[", "{", "'", '"'],
	    before: ")]}'\":;>"
	};
	const closeBracketEffect = /*@__PURE__*/StateEffect.define({
	    map(value, mapping) {
	        let mapped = mapping.mapPos(value, -1, MapMode.TrackAfter);
	        return mapped == null ? undefined : mapped;
	    }
	});
	const skipBracketEffect = /*@__PURE__*/StateEffect.define({
	    map(value, mapping) { return mapping.mapPos(value); }
	});
	const closedBracket = /*@__PURE__*/new class extends RangeValue {
	};
	closedBracket.startSide = 1;
	closedBracket.endSide = -1;
	const bracketState = /*@__PURE__*/StateField.define({
	    create() { return RangeSet.empty; },
	    update(value, tr) {
	        if (tr.selection) {
	            let lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
	            let prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
	            if (lineStart != tr.changes.mapPos(prevLineStart, -1))
	                value = RangeSet.empty;
	        }
	        value = value.map(tr.changes);
	        for (let effect of tr.effects) {
	            if (effect.is(closeBracketEffect))
	                value = value.update({ add: [closedBracket.range(effect.value, effect.value + 1)] });
	            else if (effect.is(skipBracketEffect))
	                value = value.update({ filter: from => from != effect.value });
	        }
	        return value;
	    }
	});
	/**
	Extension to enable bracket-closing behavior. When a closeable
	bracket is typed, its closing bracket is immediately inserted
	after the cursor. When closing a bracket directly in front of a
	closing bracket inserted by the extension, the cursor moves over
	that bracket.
	*/
	function closeBrackets() {
	    return [EditorView.inputHandler.of(handleInput), bracketState];
	}
	const definedClosing = "()[]{}<>";
	function closing(ch) {
	    for (let i = 0; i < definedClosing.length; i += 2)
	        if (definedClosing.charCodeAt(i) == ch)
	            return definedClosing.charAt(i + 1);
	    return fromCodePoint(ch < 128 ? ch : ch + 1);
	}
	function config(state, pos) {
	    return state.languageDataAt("closeBrackets", pos)[0] || defaults;
	}
	function handleInput(view, from, to, insert) {
	    if (view.composing)
	        return false;
	    let sel = view.state.selection.main;
	    if (insert.length > 2 || insert.length == 2 && codePointSize(codePointAt(insert, 0)) == 1 ||
	        from != sel.from || to != sel.to)
	        return false;
	    let tr = insertBracket(view.state, insert);
	    if (!tr)
	        return false;
	    view.dispatch(tr);
	    return true;
	}
	/**
	Command that implements deleting a pair of matching brackets when
	the cursor is between them.
	*/
	const deleteBracketPair = ({ state, dispatch }) => {
	    let conf = config(state, state.selection.main.head);
	    let tokens = conf.brackets || defaults.brackets;
	    let dont = null, changes = state.changeByRange(range => {
	        if (range.empty) {
	            let before = prevChar(state.doc, range.head);
	            for (let token of tokens) {
	                if (token == before && nextChar(state.doc, range.head) == closing(codePointAt(token, 0)))
	                    return { changes: { from: range.head - token.length, to: range.head + token.length },
	                        range: EditorSelection.cursor(range.head - token.length),
	                        userEvent: "delete.backward" };
	            }
	        }
	        return { range: dont = range };
	    });
	    if (!dont)
	        dispatch(state.update(changes, { scrollIntoView: true }));
	    return !dont;
	};
	/**
	Close-brackets related key bindings. Binds Backspace to
	[`deleteBracketPair`](https://codemirror.net/6/docs/ref/#closebrackets.deleteBracketPair).
	*/
	const closeBracketsKeymap = [
	    { key: "Backspace", run: deleteBracketPair }
	];
	/**
	Implements the extension's behavior on text insertion. If the
	given string counts as a bracket in the language around the
	selection, and replacing the selection with it requires custom
	behavior (inserting a closing version or skipping past a
	previously-closed bracket), this function returns a transaction
	representing that custom behavior. (You only need this if you want
	to programmatically insert brackets—the
	[`closeBrackets`](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets) extension will
	take care of running this for user input.)
	*/
	function insertBracket(state, bracket) {
	    let conf = config(state, state.selection.main.head);
	    let tokens = conf.brackets || defaults.brackets;
	    for (let tok of tokens) {
	        let closed = closing(codePointAt(tok, 0));
	        if (bracket == tok)
	            return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1)
	                : handleOpen(state, tok, closed, conf.before || defaults.before);
	        if (bracket == closed && closedBracketAt(state, state.selection.main.from))
	            return handleClose(state, tok, closed);
	    }
	    return null;
	}
	function closedBracketAt(state, pos) {
	    let found = false;
	    state.field(bracketState).between(0, state.doc.length, from => {
	        if (from == pos)
	            found = true;
	    });
	    return found;
	}
	function nextChar(doc, pos) {
	    let next = doc.sliceString(pos, pos + 2);
	    return next.slice(0, codePointSize(codePointAt(next, 0)));
	}
	function prevChar(doc, pos) {
	    let prev = doc.sliceString(pos - 2, pos);
	    return codePointSize(codePointAt(prev, 0)) == prev.length ? prev : prev.slice(1);
	}
	function handleOpen(state, open, close, closeBefore) {
	    let dont = null, changes = state.changeByRange(range => {
	        if (!range.empty)
	            return { changes: [{ insert: open, from: range.from }, { insert: close, from: range.to }],
	                effects: closeBracketEffect.of(range.to + open.length),
	                range: EditorSelection.range(range.anchor + open.length, range.head + open.length) };
	        let next = nextChar(state.doc, range.head);
	        if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1)
	            return { changes: { insert: open + close, from: range.head },
	                effects: closeBracketEffect.of(range.head + open.length),
	                range: EditorSelection.cursor(range.head + open.length) };
	        return { range: dont = range };
	    });
	    return dont ? null : state.update(changes, {
	        scrollIntoView: true,
	        userEvent: "input.type"
	    });
	}
	function handleClose(state, _open, close) {
	    let dont = null, moved = state.selection.ranges.map(range => {
	        if (range.empty && nextChar(state.doc, range.head) == close)
	            return EditorSelection.cursor(range.head + close.length);
	        return dont = range;
	    });
	    return dont ? null : state.update({
	        selection: EditorSelection.create(moved, state.selection.mainIndex),
	        scrollIntoView: true,
	        effects: state.selection.ranges.map(({ from }) => skipBracketEffect.of(from))
	    });
	}
	// Handles cases where the open and close token are the same, and
	// possibly triple quotes (as in `"""abc"""`-style quoting).
	function handleSame(state, token, allowTriple) {
	    let dont = null, changes = state.changeByRange(range => {
	        if (!range.empty)
	            return { changes: [{ insert: token, from: range.from }, { insert: token, from: range.to }],
	                effects: closeBracketEffect.of(range.to + token.length),
	                range: EditorSelection.range(range.anchor + token.length, range.head + token.length) };
	        let pos = range.head, next = nextChar(state.doc, pos);
	        if (next == token) {
	            if (nodeStart(state, pos)) {
	                return { changes: { insert: token + token, from: pos },
	                    effects: closeBracketEffect.of(pos + token.length),
	                    range: EditorSelection.cursor(pos + token.length) };
	            }
	            else if (closedBracketAt(state, pos)) {
	                let isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
	                return { range: EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
	                    effects: skipBracketEffect.of(pos) };
	            }
	        }
	        else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token &&
	            nodeStart(state, pos - 2 * token.length)) {
	            return { changes: { insert: token + token + token + token, from: pos },
	                effects: closeBracketEffect.of(pos + token.length),
	                range: EditorSelection.cursor(pos + token.length) };
	        }
	        else if (state.charCategorizer(pos)(next) != CharCategory.Word) {
	            let prev = state.sliceDoc(pos - 1, pos);
	            if (prev != token && state.charCategorizer(pos)(prev) != CharCategory.Word)
	                return { changes: { insert: token + token, from: pos },
	                    effects: closeBracketEffect.of(pos + token.length),
	                    range: EditorSelection.cursor(pos + token.length) };
	        }
	        return { range: dont = range };
	    });
	    return dont ? null : state.update(changes, {
	        scrollIntoView: true,
	        userEvent: "input.type"
	    });
	}
	function nodeStart(state, pos) {
	    let tree = syntaxTree(state).resolveInner(pos + 1);
	    return tree.parent && tree.from == pos;
	}

	const panelConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        let topContainer, bottomContainer;
	        for (let c of configs) {
	            topContainer = topContainer || c.topContainer;
	            bottomContainer = bottomContainer || c.bottomContainer;
	        }
	        return { topContainer, bottomContainer };
	    }
	});
	/**
	Get the active panel created by the given constructor, if any.
	This can be useful when you need access to your panels' DOM
	structure.
	*/
	function getPanel(view, panel) {
	    let plugin = view.plugin(panelPlugin);
	    let index = plugin ? plugin.specs.indexOf(panel) : -1;
	    return index > -1 ? plugin.panels[index] : null;
	}
	const panelPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.input = view.state.facet(showPanel);
	        this.specs = this.input.filter(s => s);
	        this.panels = this.specs.map(spec => spec(view));
	        let conf = view.state.facet(panelConfig);
	        this.top = new PanelGroup(view, true, conf.topContainer);
	        this.bottom = new PanelGroup(view, false, conf.bottomContainer);
	        this.top.sync(this.panels.filter(p => p.top));
	        this.bottom.sync(this.panels.filter(p => !p.top));
	        for (let p of this.panels) {
	            p.dom.classList.add("cm-panel");
	            if (p.mount)
	                p.mount();
	        }
	    }
	    update(update) {
	        let conf = update.state.facet(panelConfig);
	        if (this.top.container != conf.topContainer) {
	            this.top.sync([]);
	            this.top = new PanelGroup(update.view, true, conf.topContainer);
	        }
	        if (this.bottom.container != conf.bottomContainer) {
	            this.bottom.sync([]);
	            this.bottom = new PanelGroup(update.view, false, conf.bottomContainer);
	        }
	        this.top.syncClasses();
	        this.bottom.syncClasses();
	        let input = update.state.facet(showPanel);
	        if (input != this.input) {
	            let specs = input.filter(x => x);
	            let panels = [], top = [], bottom = [], mount = [];
	            for (let spec of specs) {
	                let known = this.specs.indexOf(spec), panel;
	                if (known < 0) {
	                    panel = spec(update.view);
	                    mount.push(panel);
	                }
	                else {
	                    panel = this.panels[known];
	                    if (panel.update)
	                        panel.update(update);
	                }
	                panels.push(panel);
	                (panel.top ? top : bottom).push(panel);
	            }
	            this.specs = specs;
	            this.panels = panels;
	            this.top.sync(top);
	            this.bottom.sync(bottom);
	            for (let p of mount) {
	                p.dom.classList.add("cm-panel");
	                if (p.mount)
	                    p.mount();
	            }
	        }
	        else {
	            for (let p of this.panels)
	                if (p.update)
	                    p.update(update);
	        }
	    }
	    destroy() {
	        this.top.sync([]);
	        this.bottom.sync([]);
	    }
	}, {
	    provide: /*@__PURE__*/PluginField.scrollMargins.from(value => ({ top: value.top.scrollMargin(), bottom: value.bottom.scrollMargin() }))
	});
	class PanelGroup {
	    constructor(view, top, container) {
	        this.view = view;
	        this.top = top;
	        this.container = container;
	        this.dom = undefined;
	        this.classes = "";
	        this.panels = [];
	        this.syncClasses();
	    }
	    sync(panels) {
	        this.panels = panels;
	        this.syncDOM();
	    }
	    syncDOM() {
	        if (this.panels.length == 0) {
	            if (this.dom) {
	                this.dom.remove();
	                this.dom = undefined;
	            }
	            return;
	        }
	        if (!this.dom) {
	            this.dom = document.createElement("div");
	            this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
	            this.dom.style[this.top ? "top" : "bottom"] = "0";
	            let parent = this.container || this.view.dom;
	            parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
	        }
	        let curDOM = this.dom.firstChild;
	        for (let panel of this.panels) {
	            if (panel.dom.parentNode == this.dom) {
	                while (curDOM != panel.dom)
	                    curDOM = rm(curDOM);
	                curDOM = curDOM.nextSibling;
	            }
	            else {
	                this.dom.insertBefore(panel.dom, curDOM);
	            }
	        }
	        while (curDOM)
	            curDOM = rm(curDOM);
	    }
	    scrollMargin() {
	        return !this.dom || this.container ? 0
	            : Math.max(0, this.top ?
	                this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) :
	                Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
	    }
	    syncClasses() {
	        if (!this.container || this.classes == this.view.themeClasses)
	            return;
	        for (let cls of this.classes.split(" "))
	            if (cls)
	                this.container.classList.remove(cls);
	        for (let cls of (this.classes = this.view.themeClasses).split(" "))
	            if (cls)
	                this.container.classList.add(cls);
	    }
	}
	function rm(node) {
	    let next = node.nextSibling;
	    node.remove();
	    return next;
	}
	const baseTheme$4 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-panels": {
	        boxSizing: "border-box",
	        position: "sticky",
	        left: 0,
	        right: 0
	    },
	    "&light .cm-panels": {
	        backgroundColor: "#f5f5f5",
	        color: "black"
	    },
	    "&light .cm-panels-top": {
	        borderBottom: "1px solid #ddd"
	    },
	    "&light .cm-panels-bottom": {
	        borderTop: "1px solid #ddd"
	    },
	    "&dark .cm-panels": {
	        backgroundColor: "#333338",
	        color: "white"
	    }
	});
	/**
	Opening a panel is done by providing a constructor function for
	the panel through this facet. (The panel is closed again when its
	constructor is no longer provided.) Values of `null` are ignored.
	*/
	const showPanel = /*@__PURE__*/Facet.define({
	    enables: [panelPlugin, baseTheme$4]
	});

	function crelt() {
	  var elt = arguments[0];
	  if (typeof elt == "string") elt = document.createElement(elt);
	  var i = 1, next = arguments[1];
	  if (next && typeof next == "object" && next.nodeType == null && !Array.isArray(next)) {
	    for (var name in next) if (Object.prototype.hasOwnProperty.call(next, name)) {
	      var value = next[name];
	      if (typeof value == "string") elt.setAttribute(name, value);
	      else if (value != null) elt[name] = value;
	    }
	    i++;
	  }
	  for (; i < arguments.length; i++) add$1(elt, arguments[i]);
	  return elt
	}

	function add$1(elt, child) {
	  if (typeof child == "string") {
	    elt.appendChild(document.createTextNode(child));
	  } else if (child == null) ; else if (child.nodeType != null) {
	    elt.appendChild(child);
	  } else if (Array.isArray(child)) {
	    for (var i = 0; i < child.length; i++) add$1(elt, child[i]);
	  } else {
	    throw new RangeError("Unsupported child node: " + child)
	  }
	}

	const basicNormalize = typeof String.prototype.normalize == "function"
	    ? x => x.normalize("NFKD") : x => x;
	/**
	A search cursor provides an iterator over text matches in a
	document.
	*/
	class SearchCursor {
	    /**
	    Create a text cursor. The query is the search string, `from` to
	    `to` provides the region to search.
	    
	    When `normalize` is given, it will be called, on both the query
	    string and the content it is matched against, before comparing.
	    You can, for example, create a case-insensitive search by
	    passing `s => s.toLowerCase()`.
	    
	    Text is always normalized with
	    [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
	    (when supported).
	    */
	    constructor(text, query, from = 0, to = text.length, normalize) {
	        /**
	        The current match (only holds a meaningful value after
	        [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
	        `done` is false).
	        */
	        this.value = { from: 0, to: 0 };
	        /**
	        Whether the end of the iterated region has been reached.
	        */
	        this.done = false;
	        this.matches = [];
	        this.buffer = "";
	        this.bufferPos = 0;
	        this.iter = text.iterRange(from, to);
	        this.bufferStart = from;
	        this.normalize = normalize ? x => normalize(basicNormalize(x)) : basicNormalize;
	        this.query = this.normalize(query);
	    }
	    peek() {
	        if (this.bufferPos == this.buffer.length) {
	            this.bufferStart += this.buffer.length;
	            this.iter.next();
	            if (this.iter.done)
	                return -1;
	            this.bufferPos = 0;
	            this.buffer = this.iter.value;
	        }
	        return codePointAt(this.buffer, this.bufferPos);
	    }
	    /**
	    Look for the next match. Updates the iterator's
	    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
	    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
	    at least once before using the cursor.
	    */
	    next() {
	        while (this.matches.length)
	            this.matches.pop();
	        return this.nextOverlapping();
	    }
	    /**
	    The `next` method will ignore matches that partially overlap a
	    previous match. This method behaves like `next`, but includes
	    such matches.
	    */
	    nextOverlapping() {
	        for (;;) {
	            let next = this.peek();
	            if (next < 0) {
	                this.done = true;
	                return this;
	            }
	            let str = fromCodePoint(next), start = this.bufferStart + this.bufferPos;
	            this.bufferPos += codePointSize(next);
	            let norm = this.normalize(str);
	            for (let i = 0, pos = start;; i++) {
	                let code = norm.charCodeAt(i);
	                let match = this.match(code, pos);
	                if (match) {
	                    this.value = match;
	                    return this;
	                }
	                if (i == norm.length - 1)
	                    break;
	                if (pos == start && i < str.length && str.charCodeAt(i) == code)
	                    pos++;
	            }
	        }
	    }
	    match(code, pos) {
	        let match = null;
	        for (let i = 0; i < this.matches.length; i += 2) {
	            let index = this.matches[i], keep = false;
	            if (this.query.charCodeAt(index) == code) {
	                if (index == this.query.length - 1) {
	                    match = { from: this.matches[i + 1], to: pos + 1 };
	                }
	                else {
	                    this.matches[i]++;
	                    keep = true;
	                }
	            }
	            if (!keep) {
	                this.matches.splice(i, 2);
	                i -= 2;
	            }
	        }
	        if (this.query.charCodeAt(0) == code) {
	            if (this.query.length == 1)
	                match = { from: pos, to: pos + 1 };
	            else
	                this.matches.push(1, pos);
	        }
	        return match;
	    }
	}

	const empty = { from: -1, to: -1, match: /*@__PURE__*//.*/.exec("") };
	const baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
	/**
	This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
	but searches for a regular expression pattern instead of a plain
	string.
	*/
	class RegExpCursor {
	    /**
	    Create a cursor that will search the given range in the given
	    document. `query` should be the raw pattern (as you'd pass it to
	    `new RegExp`).
	    */
	    constructor(text, query, options, from = 0, to = text.length) {
	        this.to = to;
	        this.curLine = "";
	        /**
	        Set to `true` when the cursor has reached the end of the search
	        range.
	        */
	        this.done = false;
	        /**
	        Will contain an object with the extent of the match and the
	        match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
	        sucessfully finds a match.
	        */
	        this.value = empty;
	        if (/\\[sWDnr]|\n|\r|\[\^/.test(query))
	            return new MultilineRegExpCursor(text, query, options, from, to);
	        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
	        this.iter = text.iter();
	        let startLine = text.lineAt(from);
	        this.curLineStart = startLine.from;
	        this.matchPos = from;
	        this.getLine(this.curLineStart);
	    }
	    getLine(skip) {
	        this.iter.next(skip);
	        if (this.iter.lineBreak) {
	            this.curLine = "";
	        }
	        else {
	            this.curLine = this.iter.value;
	            if (this.curLineStart + this.curLine.length > this.to)
	                this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
	            this.iter.next();
	        }
	    }
	    nextLine() {
	        this.curLineStart = this.curLineStart + this.curLine.length + 1;
	        if (this.curLineStart > this.to)
	            this.curLine = "";
	        else
	            this.getLine(0);
	    }
	    /**
	    Move to the next match, if there is one.
	    */
	    next() {
	        for (let off = this.matchPos - this.curLineStart;;) {
	            this.re.lastIndex = off;
	            let match = this.matchPos <= this.to && this.re.exec(this.curLine);
	            if (match) {
	                let from = this.curLineStart + match.index, to = from + match[0].length;
	                this.matchPos = to + (from == to ? 1 : 0);
	                if (from == this.curLine.length)
	                    this.nextLine();
	                if (from < to || from > this.value.to) {
	                    this.value = { from, to, match };
	                    return this;
	                }
	                off = this.matchPos - this.curLineStart;
	            }
	            else if (this.curLineStart + this.curLine.length < this.to) {
	                this.nextLine();
	                off = 0;
	            }
	            else {
	                this.done = true;
	                return this;
	            }
	        }
	    }
	}
	const flattened = /*@__PURE__*/new WeakMap();
	// Reusable (partially) flattened document strings
	class FlattenedDoc {
	    constructor(from, text) {
	        this.from = from;
	        this.text = text;
	    }
	    get to() { return this.from + this.text.length; }
	    static get(doc, from, to) {
	        let cached = flattened.get(doc);
	        if (!cached || cached.from >= to || cached.to <= from) {
	            let flat = new FlattenedDoc(from, doc.sliceString(from, to));
	            flattened.set(doc, flat);
	            return flat;
	        }
	        if (cached.from == from && cached.to == to)
	            return cached;
	        let { text, from: cachedFrom } = cached;
	        if (cachedFrom > from) {
	            text = doc.sliceString(from, cachedFrom) + text;
	            cachedFrom = from;
	        }
	        if (cached.to < to)
	            text += doc.sliceString(cached.to, to);
	        flattened.set(doc, new FlattenedDoc(cachedFrom, text));
	        return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
	    }
	}
	class MultilineRegExpCursor {
	    constructor(text, query, options, from, to) {
	        this.text = text;
	        this.to = to;
	        this.done = false;
	        this.value = empty;
	        this.matchPos = from;
	        this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
	        this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
	    }
	    chunkEnd(pos) {
	        return pos >= this.to ? this.to : this.text.lineAt(pos).to;
	    }
	    next() {
	        for (;;) {
	            let off = this.re.lastIndex = this.matchPos - this.flat.from;
	            let match = this.re.exec(this.flat.text);
	            // Skip empty matches directly after the last match
	            if (match && !match[0] && match.index == off) {
	                this.re.lastIndex = off + 1;
	                match = this.re.exec(this.flat.text);
	            }
	            // If a match goes almost to the end of a noncomplete chunk, try
	            // again, since it'll likely be able to match more
	            if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10)
	                match = null;
	            if (match) {
	                let from = this.flat.from + match.index, to = from + match[0].length;
	                this.value = { from, to, match };
	                this.matchPos = to + (from == to ? 1 : 0);
	                return this;
	            }
	            else {
	                if (this.flat.to == this.to) {
	                    this.done = true;
	                    return this;
	                }
	                // Grow the flattened doc
	                this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
	            }
	        }
	    }
	}
	function validRegExp(source) {
	    try {
	        new RegExp(source, baseFlags);
	        return true;
	    }
	    catch (_a) {
	        return false;
	    }
	}

	function createLineDialog(view) {
	    let input = crelt("input", { class: "cm-textfield", name: "line" });
	    let dom = crelt("form", {
	        class: "cm-gotoLine",
	        onkeydown: (event) => {
	            if (event.keyCode == 27) { // Escape
	                event.preventDefault();
	                view.dispatch({ effects: dialogEffect.of(false) });
	                view.focus();
	            }
	            else if (event.keyCode == 13) { // Enter
	                event.preventDefault();
	                go();
	            }
	        },
	        onsubmit: (event) => {
	            event.preventDefault();
	            go();
	        }
	    }, crelt("label", view.state.phrase("Go to line"), ": ", input), " ", crelt("button", { class: "cm-button", type: "submit" }, view.state.phrase("go")));
	    function go() {
	        let match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
	        if (!match)
	            return;
	        let { state } = view, startLine = state.doc.lineAt(state.selection.main.head);
	        let [, sign, ln, cl, percent] = match;
	        let col = cl ? +cl.slice(1) : 0;
	        let line = ln ? +ln : startLine.number;
	        if (ln && percent) {
	            let pc = line / 100;
	            if (sign)
	                pc = pc * (sign == "-" ? -1 : 1) + (startLine.number / state.doc.lines);
	            line = Math.round(state.doc.lines * pc);
	        }
	        else if (ln && sign) {
	            line = line * (sign == "-" ? -1 : 1) + startLine.number;
	        }
	        let docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
	        view.dispatch({
	            effects: dialogEffect.of(false),
	            selection: EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
	            scrollIntoView: true
	        });
	        view.focus();
	    }
	    return { dom, pos: -10 };
	}
	const dialogEffect = /*@__PURE__*/StateEffect.define();
	const dialogField = /*@__PURE__*/StateField.define({
	    create() { return true; },
	    update(value, tr) {
	        for (let e of tr.effects)
	            if (e.is(dialogEffect))
	                value = e.value;
	        return value;
	    },
	    provide: f => showPanel.from(f, val => val ? createLineDialog : null)
	});
	/**
	Command that shows a dialog asking the user for a line number, and
	when a valid position is provided, moves the cursor to that line.

	Supports line numbers, relative line offsets prefixed with `+` or
	`-`, document percentages suffixed with `%`, and an optional
	column position by adding `:` and a second number after the line
	number.

	The dialog can be styled with the `panel.gotoLine` theme
	selector.
	*/
	const gotoLine = view => {
	    let panel = getPanel(view, createLineDialog);
	    if (!panel) {
	        let effects = [dialogEffect.of(true)];
	        if (view.state.field(dialogField, false) == null)
	            effects.push(StateEffect.appendConfig.of([dialogField, baseTheme$1$1]));
	        view.dispatch({ effects });
	        panel = getPanel(view, createLineDialog);
	    }
	    if (panel)
	        panel.dom.querySelector("input").focus();
	    return true;
	};
	const baseTheme$1$1 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-panel.cm-gotoLine": {
	        padding: "2px 6px 4px",
	        "& label": { fontSize: "80%" }
	    }
	});

	const defaultHighlightOptions = {
	    highlightWordAroundCursor: false,
	    minSelectionLength: 1,
	    maxMatches: 100
	};
	const highlightConfig = /*@__PURE__*/Facet.define({
	    combine(options) {
	        return combineConfig(options, defaultHighlightOptions, {
	            highlightWordAroundCursor: (a, b) => a || b,
	            minSelectionLength: Math.min,
	            maxMatches: Math.min
	        });
	    }
	});
	/**
	This extension highlights text that matches the selection. It uses
	the `"cm-selectionMatch"` class for the highlighting. When
	`highlightWordAroundCursor` is enabled, the word at the cursor
	itself will be highlighted with `"cm-selectionMatch-main"`.
	*/
	function highlightSelectionMatches(options) {
	    let ext = [defaultTheme, matchHighlighter];
	    if (options)
	        ext.push(highlightConfig.of(options));
	    return ext;
	}
	const matchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch" });
	const mainMatchDeco = /*@__PURE__*/Decoration.mark({ class: "cm-selectionMatch cm-selectionMatch-main" });
	const matchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.decorations = this.getDeco(view);
	    }
	    update(update) {
	        if (update.selectionSet || update.docChanged || update.viewportChanged)
	            this.decorations = this.getDeco(update.view);
	    }
	    getDeco(view) {
	        let conf = view.state.facet(highlightConfig);
	        let { state } = view, sel = state.selection;
	        if (sel.ranges.length > 1)
	            return Decoration.none;
	        let range = sel.main, query, check = null;
	        if (range.empty) {
	            if (!conf.highlightWordAroundCursor)
	                return Decoration.none;
	            let word = state.wordAt(range.head);
	            if (!word)
	                return Decoration.none;
	            check = state.charCategorizer(range.head);
	            query = state.sliceDoc(word.from, word.to);
	        }
	        else {
	            let len = range.to - range.from;
	            if (len < conf.minSelectionLength || len > 200)
	                return Decoration.none;
	            query = state.sliceDoc(range.from, range.to).trim();
	            if (!query)
	                return Decoration.none;
	        }
	        let deco = [];
	        for (let part of view.visibleRanges) {
	            let cursor = new SearchCursor(state.doc, query, part.from, part.to);
	            while (!cursor.next().done) {
	                let { from, to } = cursor.value;
	                if (!check || ((from == 0 || check(state.sliceDoc(from - 1, from)) != CharCategory.Word) &&
	                    (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != CharCategory.Word))) {
	                    if (check && from <= range.from && to >= range.to)
	                        deco.push(mainMatchDeco.range(from, to));
	                    else if (from >= range.to || to <= range.from)
	                        deco.push(matchDeco.range(from, to));
	                    if (deco.length > conf.maxMatches)
	                        return Decoration.none;
	                }
	            }
	        }
	        return Decoration.set(deco);
	    }
	}, {
	    decorations: v => v.decorations
	});
	const defaultTheme = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-selectionMatch": { backgroundColor: "#99ff7780" },
	    ".cm-searchMatch .cm-selectionMatch": { backgroundColor: "transparent" }
	});
	// Select the words around the cursors.
	const selectWord = ({ state, dispatch }) => {
	    let { selection } = state;
	    let newSel = EditorSelection.create(selection.ranges.map(range => state.wordAt(range.head) || EditorSelection.cursor(range.head)), selection.mainIndex);
	    if (newSel.eq(selection))
	        return false;
	    dispatch(state.update({ selection: newSel }));
	    return true;
	};
	// Find next occurrence of query relative to last cursor. Wrap around
	// the document if there are no more matches.
	function findNextOccurrence(state, query) {
	    let { main, ranges } = state.selection;
	    let word = state.wordAt(main.head), fullWord = word && word.from == main.from && word.to == main.to;
	    for (let cycled = false, cursor = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to);;) {
	        cursor.next();
	        if (cursor.done) {
	            if (cycled)
	                return null;
	            cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
	            cycled = true;
	        }
	        else {
	            if (cycled && ranges.some(r => r.from == cursor.value.from))
	                continue;
	            if (fullWord) {
	                let word = state.wordAt(cursor.value.from);
	                if (!word || word.from != cursor.value.from || word.to != cursor.value.to)
	                    continue;
	            }
	            return cursor.value;
	        }
	    }
	}
	/**
	Select next occurrence of the current selection.
	Expand selection to the word when selection range is empty.
	*/
	const selectNextOccurrence = ({ state, dispatch }) => {
	    let { ranges } = state.selection;
	    if (ranges.some(sel => sel.from === sel.to))
	        return selectWord({ state, dispatch });
	    let searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
	    if (state.selection.ranges.some(r => state.sliceDoc(r.from, r.to) != searchedText))
	        return false;
	    let range = findNextOccurrence(state, searchedText);
	    if (!range)
	        return false;
	    dispatch(state.update({
	        selection: state.selection.addRange(EditorSelection.range(range.from, range.to), false),
	        scrollIntoView: true
	    }));
	    return true;
	};

	const searchConfigFacet = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        let matchCase = configs.some(c => c.matchCase);
	        return {
	            top: configs.some(c => c.top),
	            matchCase: matchCase === undefined ? true : matchCase,
	        };
	    }
	});
	class Query {
	    constructor(search, replace, caseInsensitive) {
	        this.search = search;
	        this.replace = replace;
	        this.caseInsensitive = caseInsensitive;
	    }
	    eq(other) {
	        return this.search == other.search && this.replace == other.replace &&
	            this.caseInsensitive == other.caseInsensitive && this.constructor == other.constructor;
	    }
	}
	class StringQuery extends Query {
	    constructor(search, replace, caseInsensitive) {
	        super(search, replace, caseInsensitive);
	        this.unquoted = search.replace(/\\([nrt\\])/g, (_, ch) => ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\");
	    }
	    cursor(doc, from = 0, to = doc.length) {
	        return new SearchCursor(doc, this.unquoted, from, to, this.caseInsensitive ? x => x.toLowerCase() : undefined);
	    }
	    nextMatch(doc, curFrom, curTo) {
	        let cursor = this.cursor(doc, curTo).nextOverlapping();
	        if (cursor.done)
	            cursor = this.cursor(doc, 0, curFrom).nextOverlapping();
	        return cursor.done ? null : cursor.value;
	    }
	    // Searching in reverse is, rather than implementing inverted search
	    // cursor, done by scanning chunk after chunk forward.
	    prevMatchInRange(doc, from, to) {
	        for (let pos = to;;) {
	            let start = Math.max(from, pos - 10000 /* ChunkSize */ - this.unquoted.length);
	            let cursor = this.cursor(doc, start, pos), range = null;
	            while (!cursor.nextOverlapping().done)
	                range = cursor.value;
	            if (range)
	                return range;
	            if (start == from)
	                return null;
	            pos -= 10000 /* ChunkSize */;
	        }
	    }
	    prevMatch(doc, curFrom, curTo) {
	        return this.prevMatchInRange(doc, 0, curFrom) ||
	            this.prevMatchInRange(doc, curTo, doc.length);
	    }
	    getReplacement(_result) { return this.replace; }
	    matchAll(doc, limit) {
	        let cursor = this.cursor(doc), ranges = [];
	        while (!cursor.next().done) {
	            if (ranges.length >= limit)
	                return null;
	            ranges.push(cursor.value);
	        }
	        return ranges;
	    }
	    highlight(doc, from, to, add) {
	        let cursor = this.cursor(doc, Math.max(0, from - this.unquoted.length), Math.min(to + this.unquoted.length, doc.length));
	        while (!cursor.next().done)
	            add(cursor.value.from, cursor.value.to);
	    }
	    get valid() { return !!this.search; }
	}
	class RegExpQuery extends Query {
	    constructor(search, replace, caseInsensitive) {
	        super(search, replace, caseInsensitive);
	        this.valid = !!search && validRegExp(search);
	    }
	    cursor(doc, from = 0, to = doc.length) {
	        return new RegExpCursor(doc, this.search, this.caseInsensitive ? { ignoreCase: true } : undefined, from, to);
	    }
	    nextMatch(doc, curFrom, curTo) {
	        let cursor = this.cursor(doc, curTo).next();
	        if (cursor.done)
	            cursor = this.cursor(doc, 0, curFrom).next();
	        return cursor.done ? null : cursor.value;
	    }
	    prevMatchInRange(doc, from, to) {
	        for (let size = 1;; size++) {
	            let start = Math.max(from, to - size * 10000 /* ChunkSize */);
	            let cursor = this.cursor(doc, start, to), range = null;
	            while (!cursor.next().done)
	                range = cursor.value;
	            if (range && (start == from || range.from > start + 10))
	                return range;
	            if (start == from)
	                return null;
	        }
	    }
	    prevMatch(doc, curFrom, curTo) {
	        return this.prevMatchInRange(doc, 0, curFrom) ||
	            this.prevMatchInRange(doc, curTo, doc.length);
	    }
	    getReplacement(result) {
	        return this.replace.replace(/\$([$&\d+])/g, (m, i) => i == "$" ? "$"
	            : i == "&" ? result.match[0]
	                : i != "0" && +i < result.match.length ? result.match[i]
	                    : m);
	    }
	    matchAll(doc, limit) {
	        let cursor = this.cursor(doc), ranges = [];
	        while (!cursor.next().done) {
	            if (ranges.length >= limit)
	                return null;
	            ranges.push(cursor.value);
	        }
	        return ranges;
	    }
	    highlight(doc, from, to, add) {
	        let cursor = this.cursor(doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
	        while (!cursor.next().done)
	            add(cursor.value.from, cursor.value.to);
	    }
	}
	const setQuery = /*@__PURE__*/StateEffect.define();
	const togglePanel$1 = /*@__PURE__*/StateEffect.define();
	const searchState = /*@__PURE__*/StateField.define({
	    create(state) {
	        return new SearchState(defaultQuery(state), createSearchPanel);
	    },
	    update(value, tr) {
	        for (let effect of tr.effects) {
	            if (effect.is(setQuery))
	                value = new SearchState(effect.value, value.panel);
	            else if (effect.is(togglePanel$1))
	                value = new SearchState(value.query, effect.value ? createSearchPanel : null);
	        }
	        return value;
	    },
	    provide: f => showPanel.from(f, val => val.panel)
	});
	class SearchState {
	    constructor(query, panel) {
	        this.query = query;
	        this.panel = panel;
	    }
	}
	const matchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch" }), selectedMatchMark = /*@__PURE__*/Decoration.mark({ class: "cm-searchMatch cm-searchMatch-selected" });
	const searchHighlighter = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.decorations = this.highlight(view.state.field(searchState));
	    }
	    update(update) {
	        let state = update.state.field(searchState);
	        if (state != update.startState.field(searchState) || update.docChanged || update.selectionSet)
	            this.decorations = this.highlight(state);
	    }
	    highlight({ query, panel }) {
	        if (!panel || !query.valid)
	            return Decoration.none;
	        let { view } = this;
	        let builder = new RangeSetBuilder();
	        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
	            let { from, to } = ranges[i];
	            while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */)
	                to = ranges[++i].to;
	            query.highlight(view.state.doc, from, to, (from, to) => {
	                let selected = view.state.selection.ranges.some(r => r.from == from && r.to == to);
	                builder.add(from, to, selected ? selectedMatchMark : matchMark);
	            });
	        }
	        return builder.finish();
	    }
	}, {
	    decorations: v => v.decorations
	});
	function searchCommand(f) {
	    return view => {
	        let state = view.state.field(searchState, false);
	        return state && state.query.valid ? f(view, state) : openSearchPanel(view);
	    };
	}
	/**
	Open the search panel if it isn't already open, and move the
	selection to the first match after the current main selection.
	Will wrap around to the start of the document when it reaches the
	end.
	*/
	const findNext = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { from, to } = view.state.selection.main;
	    let next = query.nextMatch(view.state.doc, from, to);
	    if (!next || next.from == from && next.to == to)
	        return false;
	    view.dispatch({
	        selection: { anchor: next.from, head: next.to },
	        scrollIntoView: true,
	        effects: announceMatch(view, next)
	    });
	    return true;
	});
	/**
	Move the selection to the previous instance of the search query,
	before the current main selection. Will wrap past the start
	of the document to start searching at the end again.
	*/
	const findPrevious = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { state } = view, { from, to } = state.selection.main;
	    let range = query.prevMatch(state.doc, from, to);
	    if (!range)
	        return false;
	    view.dispatch({
	        selection: { anchor: range.from, head: range.to },
	        scrollIntoView: true,
	        effects: announceMatch(view, range)
	    });
	    return true;
	});
	/**
	Select all instances of the search query.
	*/
	const selectMatches = /*@__PURE__*/searchCommand((view, { query }) => {
	    let ranges = query.matchAll(view.state.doc, 1000);
	    if (!ranges || !ranges.length)
	        return false;
	    view.dispatch({
	        selection: EditorSelection.create(ranges.map(r => EditorSelection.range(r.from, r.to)))
	    });
	    return true;
	});
	/**
	Select all instances of the currently selected text.
	*/
	const selectSelectionMatches = ({ state, dispatch }) => {
	    let sel = state.selection;
	    if (sel.ranges.length > 1 || sel.main.empty)
	        return false;
	    let { from, to } = sel.main;
	    let ranges = [], main = 0;
	    for (let cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
	        if (ranges.length > 1000)
	            return false;
	        if (cur.value.from == from)
	            main = ranges.length;
	        ranges.push(EditorSelection.range(cur.value.from, cur.value.to));
	    }
	    dispatch(state.update({ selection: EditorSelection.create(ranges, main) }));
	    return true;
	};
	/**
	Replace the current match of the search query.
	*/
	const replaceNext = /*@__PURE__*/searchCommand((view, { query }) => {
	    let { state } = view, { from, to } = state.selection.main;
	    if (state.readOnly)
	        return false;
	    let next = query.nextMatch(state.doc, from, from);
	    if (!next)
	        return false;
	    let changes = [], selection, replacement;
	    if (next.from == from && next.to == to) {
	        replacement = state.toText(query.getReplacement(next));
	        changes.push({ from: next.from, to: next.to, insert: replacement });
	        next = query.nextMatch(state.doc, next.from, next.to);
	    }
	    if (next) {
	        let off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
	        selection = { anchor: next.from - off, head: next.to - off };
	    }
	    view.dispatch({
	        changes, selection,
	        scrollIntoView: !!selection,
	        effects: next ? announceMatch(view, next) : undefined
	    });
	    return true;
	});
	/**
	Replace all instances of the search query with the given
	replacement.
	*/
	const replaceAll = /*@__PURE__*/searchCommand((view, { query }) => {
	    if (view.state.readOnly)
	        return false;
	    let changes = query.matchAll(view.state.doc, 1e9).map(match => {
	        let { from, to } = match;
	        return { from, to, insert: query.getReplacement(match) };
	    });
	    if (!changes.length)
	        return false;
	    view.dispatch({ changes });
	    return true;
	});
	function createSearchPanel(view) {
	    let { query } = view.state.field(searchState);
	    return {
	        dom: buildPanel({
	            view,
	            query,
	            updateQuery(q) {
	                if (!query.eq(q)) {
	                    query = q;
	                    view.dispatch({ effects: setQuery.of(query) });
	                }
	            }
	        }),
	        mount() {
	            this.dom.querySelector("[name=search]").select();
	        },
	        pos: 80,
	        top: view.state.facet(searchConfigFacet).top
	    };
	}
	function defaultQuery(state, fallback) {
	    var _a;
	    let sel = state.selection.main;
	    let selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
	    let caseInsensitive = (_a = fallback === null || fallback === void 0 ? void 0 : fallback.caseInsensitive) !== null && _a !== void 0 ? _a : !state.facet(searchConfigFacet).matchCase;
	    return fallback && !selText ? fallback : new StringQuery(selText.replace(/\n/g, "\\n"), "", caseInsensitive);
	}
	/**
	Make sure the search panel is open and focused.
	*/
	const openSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (state && state.panel) {
	        let panel = getPanel(view, createSearchPanel);
	        if (!panel)
	            return false;
	        let searchInput = panel.dom.querySelector("[name=search]");
	        searchInput.focus();
	        searchInput.select();
	    }
	    else {
	        view.dispatch({ effects: [
	                togglePanel$1.of(true),
	                state ? setQuery.of(defaultQuery(view.state, state.query)) : StateEffect.appendConfig.of(searchExtensions)
	            ] });
	    }
	    return true;
	};
	/**
	Close the search panel.
	*/
	const closeSearchPanel = view => {
	    let state = view.state.field(searchState, false);
	    if (!state || !state.panel)
	        return false;
	    let panel = getPanel(view, createSearchPanel);
	    if (panel && panel.dom.contains(view.root.activeElement))
	        view.focus();
	    view.dispatch({ effects: togglePanel$1.of(false) });
	    return true;
	};
	/**
	Default search-related key bindings.

	 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
	 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
	 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
	 - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
	 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
	*/
	const searchKeymap = [
	    { key: "Mod-f", run: openSearchPanel, scope: "editor search-panel" },
	    { key: "F3", run: findNext, shift: findPrevious, scope: "editor search-panel" },
	    { key: "Mod-g", run: findNext, shift: findPrevious, scope: "editor search-panel" },
	    { key: "Escape", run: closeSearchPanel, scope: "editor search-panel" },
	    { key: "Mod-Shift-l", run: selectSelectionMatches },
	    { key: "Alt-g", run: gotoLine },
	    { key: "Mod-d", run: selectNextOccurrence, preventDefault: true },
	];
	function buildPanel(conf) {
	    function phrase(phrase) { return conf.view.state.phrase(phrase); }
	    let searchField = crelt("input", {
	        value: conf.query.search,
	        placeholder: phrase("Find"),
	        "aria-label": phrase("Find"),
	        class: "cm-textfield",
	        name: "search",
	        onchange: update,
	        onkeyup: update
	    });
	    let replaceField = crelt("input", {
	        value: conf.query.replace,
	        placeholder: phrase("Replace"),
	        "aria-label": phrase("Replace"),
	        class: "cm-textfield",
	        name: "replace",
	        onchange: update,
	        onkeyup: update
	    });
	    let caseField = crelt("input", {
	        type: "checkbox",
	        name: "case",
	        checked: !conf.query.caseInsensitive,
	        onchange: update
	    });
	    let reField = crelt("input", {
	        type: "checkbox",
	        name: "re",
	        checked: conf.query instanceof RegExpQuery,
	        onchange: update
	    });
	    function update() {
	        conf.updateQuery(new (reField.checked ? RegExpQuery : StringQuery)(searchField.value, replaceField.value, !caseField.checked));
	    }
	    function keydown(e) {
	        if (runScopeHandlers(conf.view, e, "search-panel")) {
	            e.preventDefault();
	        }
	        else if (e.keyCode == 13 && e.target == searchField) {
	            e.preventDefault();
	            (e.shiftKey ? findPrevious : findNext)(conf.view);
	        }
	        else if (e.keyCode == 13 && e.target == replaceField) {
	            e.preventDefault();
	            replaceNext(conf.view);
	        }
	    }
	    function button(name, onclick, content) {
	        return crelt("button", { class: "cm-button", name, onclick, type: "button" }, content);
	    }
	    let panel = crelt("div", { onkeydown: keydown, class: "cm-search" }, [
	        searchField,
	        button("next", () => findNext(conf.view), [phrase("next")]),
	        button("prev", () => findPrevious(conf.view), [phrase("previous")]),
	        button("select", () => selectMatches(conf.view), [phrase("all")]),
	        crelt("label", null, [caseField, phrase("match case")]),
	        crelt("label", null, [reField, phrase("regexp")]),
	        crelt("br"),
	        replaceField,
	        button("replace", () => replaceNext(conf.view), [phrase("replace")]),
	        button("replaceAll", () => replaceAll(conf.view), [phrase("replace all")]),
	        crelt("button", { name: "close", onclick: () => closeSearchPanel(conf.view), "aria-label": phrase("close"), type: "button" }, ["×"])
	    ]);
	    return panel;
	}
	const AnnounceMargin = 30;
	const Break = /[\s\.,:;?!]/;
	function announceMatch(view, { from, to }) {
	    let lineStart = view.state.doc.lineAt(from).from, lineEnd = view.state.doc.lineAt(to).to;
	    let start = Math.max(lineStart, from - AnnounceMargin), end = Math.min(lineEnd, to + AnnounceMargin);
	    let text = view.state.sliceDoc(start, end);
	    if (start != lineStart) {
	        for (let i = 0; i < AnnounceMargin; i++)
	            if (!Break.test(text[i + 1]) && Break.test(text[i])) {
	                text = text.slice(i);
	                break;
	            }
	    }
	    if (end != lineEnd) {
	        for (let i = text.length - 1; i > text.length - AnnounceMargin; i--)
	            if (!Break.test(text[i - 1]) && Break.test(text[i])) {
	                text = text.slice(0, i);
	                break;
	            }
	    }
	    return EditorView.announce.of(`${view.state.phrase("current match")}. ${text} ${view.state.phrase("on line")} ${view.state.doc.lineAt(from).number}`);
	}
	const baseTheme$3 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-panel.cm-search": {
	        padding: "2px 6px 4px",
	        position: "relative",
	        "& [name=close]": {
	            position: "absolute",
	            top: "0",
	            right: "4px",
	            backgroundColor: "inherit",
	            border: "none",
	            font: "inherit",
	            padding: 0,
	            margin: 0
	        },
	        "& input, & button, & label": {
	            margin: ".2em .6em .2em 0"
	        },
	        "& input[type=checkbox]": {
	            marginRight: ".2em"
	        },
	        "& label": {
	            fontSize: "80%",
	            whiteSpace: "pre"
	        }
	    },
	    "&light .cm-searchMatch": { backgroundColor: "#ffff0054" },
	    "&dark .cm-searchMatch": { backgroundColor: "#00ffff8a" },
	    "&light .cm-searchMatch-selected": { backgroundColor: "#ff6a0054" },
	    "&dark .cm-searchMatch-selected": { backgroundColor: "#ff00ff8a" }
	});
	const searchExtensions = [
	    searchState,
	    /*@__PURE__*/Prec.fallback(searchHighlighter),
	    baseTheme$3
	];

	var _a;
	const ios = typeof navigator != "undefined" &&
	    !/*@__PURE__*//Edge\/(\d+)/.exec(navigator.userAgent) && /*@__PURE__*//Apple Computer/.test(navigator.vendor) &&
	    (/*@__PURE__*//Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
	const Outside = "-10000px";
	class TooltipViewManager {
	    constructor(view, facet, createTooltipView) {
	        this.facet = facet;
	        this.createTooltipView = createTooltipView;
	        this.input = view.state.facet(facet);
	        this.tooltips = this.input.filter(t => t);
	        this.tooltipViews = this.tooltips.map(createTooltipView);
	    }
	    update(update) {
	        let input = update.state.facet(this.facet);
	        let tooltips = input.filter(x => x);
	        if (input === this.input) {
	            for (let t of this.tooltipViews)
	                if (t.update)
	                    t.update(update);
	            return { shouldMeasure: false };
	        }
	        let tooltipViews = [];
	        for (let i = 0; i < tooltips.length; i++) {
	            let tip = tooltips[i], known = -1;
	            if (!tip)
	                continue;
	            for (let i = 0; i < this.tooltips.length; i++) {
	                let other = this.tooltips[i];
	                if (other && other.create == tip.create)
	                    known = i;
	            }
	            if (known < 0) {
	                tooltipViews[i] = this.createTooltipView(tip);
	            }
	            else {
	                let tooltipView = tooltipViews[i] = this.tooltipViews[known];
	                if (tooltipView.update)
	                    tooltipView.update(update);
	            }
	        }
	        for (let t of this.tooltipViews)
	            if (tooltipViews.indexOf(t) < 0)
	                t.dom.remove();
	        this.input = input;
	        this.tooltips = tooltips;
	        this.tooltipViews = tooltipViews;
	        return { shouldMeasure: true };
	    }
	}
	const tooltipConfig = /*@__PURE__*/Facet.define({
	    combine: values => {
	        var _a, _b;
	        return ({
	            position: ios ? "absolute" : ((_a = values.find(conf => conf.position)) === null || _a === void 0 ? void 0 : _a.position) || "fixed",
	            parent: ((_b = values.find(conf => conf.parent)) === null || _b === void 0 ? void 0 : _b.parent) || null
	        });
	    }
	});
	const tooltipPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.inView = true;
	        let config = view.state.facet(tooltipConfig);
	        this.position = config.position;
	        this.parent = config.parent;
	        this.classes = view.themeClasses;
	        this.createContainer();
	        this.measureReq = { read: this.readMeasure.bind(this), write: this.writeMeasure.bind(this), key: this };
	        this.manager = new TooltipViewManager(view, showTooltip, t => this.createTooltip(t));
	        this.maybeMeasure();
	    }
	    createContainer() {
	        if (this.parent) {
	            this.container = document.createElement("div");
	            this.container.style.position = "relative";
	            this.container.className = this.view.themeClasses;
	            this.parent.appendChild(this.container);
	        }
	        else {
	            this.container = this.view.dom;
	        }
	    }
	    update(update) {
	        let { shouldMeasure } = this.manager.update(update);
	        let newConfig = update.state.facet(tooltipConfig);
	        if (newConfig.position != this.position) {
	            this.position = newConfig.position;
	            for (let t of this.manager.tooltipViews)
	                t.dom.style.position = this.position;
	            shouldMeasure = true;
	        }
	        if (newConfig.parent != this.parent) {
	            if (this.parent)
	                this.container.remove();
	            this.parent = newConfig.parent;
	            this.createContainer();
	            for (let t of this.manager.tooltipViews)
	                this.container.appendChild(t.dom);
	            shouldMeasure = true;
	        }
	        else if (this.parent && this.view.themeClasses != this.classes) {
	            this.classes = this.container.className = this.view.themeClasses;
	        }
	        if (shouldMeasure)
	            this.maybeMeasure();
	    }
	    createTooltip(tooltip) {
	        let tooltipView = tooltip.create(this.view);
	        tooltipView.dom.classList.add("cm-tooltip");
	        if (tooltip.arrow)
	            tooltipView.dom.classList.add("cm-tooltip-arrow");
	        tooltipView.dom.style.position = this.position;
	        tooltipView.dom.style.top = Outside;
	        this.container.appendChild(tooltipView.dom);
	        if (tooltipView.mount)
	            tooltipView.mount(this.view);
	        return tooltipView;
	    }
	    destroy() {
	        for (let { dom } of this.manager.tooltipViews)
	            dom.remove();
	    }
	    readMeasure() {
	        let editor = this.view.dom.getBoundingClientRect();
	        return {
	            editor,
	            parent: this.parent ? this.container.getBoundingClientRect() : editor,
	            pos: this.manager.tooltips.map(t => this.view.coordsAtPos(t.pos)),
	            size: this.manager.tooltipViews.map(({ dom }) => dom.getBoundingClientRect()),
	            innerWidth: window.innerWidth,
	            innerHeight: window.innerHeight
	        };
	    }
	    writeMeasure(measured) {
	        let { editor } = measured;
	        let others = [];
	        for (let i = 0; i < this.manager.tooltips.length; i++) {
	            let tooltip = this.manager.tooltips[i], tView = this.manager.tooltipViews[i], { dom } = tView;
	            let pos = measured.pos[i], size = measured.size[i];
	            // Hide tooltips that are outside of the editor.
	            if (!pos || pos.bottom <= editor.top || pos.top >= editor.bottom || pos.right <= editor.left || pos.left >= editor.right) {
	                dom.style.top = Outside;
	                continue;
	            }
	            let arrow = !!tooltip.arrow, above = !!tooltip.above;
	            let width = size.right - size.left, height = size.bottom - size.top + (arrow ? 7 /* Size */ : 0);
	            let left = this.view.textDirection == Direction.LTR
	                ? Math.min(pos.left - (arrow ? 14 /* Offset */ : 0), measured.innerWidth - width)
	                : Math.max(0, pos.left - width + (arrow ? 14 /* Offset */ : 0));
	            if (!tooltip.strictSide &&
	                (above ? pos.top - (size.bottom - size.top) < 0 : pos.bottom + (size.bottom - size.top) > measured.innerHeight))
	                above = !above;
	            let top = above ? pos.top - height : pos.bottom + (arrow ? 7 /* Size */ : 0), right = left + width;
	            for (let r of others)
	                if (r.left < right && r.right > left && r.top < top + height && r.bottom > top)
	                    top = above ? r.top - height : r.bottom;
	            if (this.position == "absolute") {
	                dom.style.top = (top - measured.parent.top) + "px";
	                dom.style.left = (left - measured.parent.left) + "px";
	            }
	            else {
	                dom.style.top = top + "px";
	                dom.style.left = left + "px";
	            }
	            others.push({ left, top, right, bottom: top + height });
	            dom.classList.toggle("cm-tooltip-above", above);
	            dom.classList.toggle("cm-tooltip-below", !above);
	            if (tView.positioned)
	                tView.positioned();
	        }
	    }
	    maybeMeasure() {
	        if (this.manager.tooltips.length) {
	            if (this.view.inView)
	                this.view.requestMeasure(this.measureReq);
	            if (this.inView != this.view.inView) {
	                this.inView = this.view.inView;
	                if (!this.inView)
	                    for (let tv of this.manager.tooltipViews)
	                        tv.dom.style.top = Outside;
	            }
	        }
	    }
	}, {
	    eventHandlers: {
	        scroll() { this.maybeMeasure(); }
	    }
	});
	const insetInlineStart = typeof document == 'undefined' || ((_a = document.body) === null || _a === void 0 ? void 0 : _a.style.insetInlineStart) != null
	    ? 'insetInlineStart' : 'left';
	const baseTheme$2 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-tooltip": {
	        zIndex: 100
	    },
	    "&light .cm-tooltip": {
	        border: "1px solid #bbb",
	        backgroundColor: "#f5f5f5"
	    },
	    "&light .cm-tooltip-section:not(:first-child)": {
	        borderTop: "1px solid #bbb",
	    },
	    "&dark .cm-tooltip": {
	        backgroundColor: "#333338",
	        color: "white"
	    },
	    ".cm-tooltip.cm-tooltip-arrow:before, .cm-tooltip.cm-tooltip-arrow:after": {
	        position: "absolute",
	        content: "''",
	        [insetInlineStart]: `${14 /* Offset */ - 7 /* Size */}px`,
	        width: 0,
	        height: 0,
	        borderLeft: `${7 /* Size */}px solid transparent`,
	        borderRight: `${7 /* Size */}px solid transparent`,
	        zIndex: -1
	    },
	    ".cm-tooltip-above.cm-tooltip-arrow:before": {
	        borderTop: `${7 /* Size */}px solid #f5f5f5`,
	        bottom: `-${7 /* Size */ - 1}px`
	    },
	    ".cm-tooltip-below.cm-tooltip-arrow:before": {
	        borderBottom: `${7 /* Size */}px solid #f5f5f5`,
	        top: `-${7 /* Size */ - 1}px`
	    },
	    ".cm-tooltip-above.cm-tooltip-arrow:after": {
	        borderTop: `${7 /* Size */}px solid #bbb`,
	        bottom: `-${7 /* Size */}px`,
	        zIndex: -2
	    },
	    ".cm-tooltip-below.cm-tooltip-arrow:after": {
	        borderBottom: `${7 /* Size */}px solid #bbb`,
	        top: `-${7 /* Size */}px`,
	        zIndex: -2
	    },
	    "&dark .cm-tooltip.cm-tooltip-arrow:before": {
	        borderTopColor: "#333338",
	        borderBottomColor: "#333338"
	    },
	    "&dark .cm-tooltip.cm-tooltip-arrow:after": {
	        borderTopColor: "transparent",
	        borderBottomColor: "transparent"
	    }
	});
	/**
	Behavior by which an extension can provide a tooltip to be shown.
	*/
	const showTooltip = /*@__PURE__*/Facet.define({
	    enables: [tooltipPlugin, baseTheme$2]
	});
	const showHoverTooltip = /*@__PURE__*/Facet.define();
	class HoverTooltipHost {
	    constructor(view) {
	        this.view = view;
	        this.mounted = false;
	        this.dom = document.createElement("div");
	        this.dom.classList.add("cm-tooltip-hover");
	        this.manager = new TooltipViewManager(view, showHoverTooltip, t => this.createHostedView(t));
	    }
	    // Needs to be static so that host tooltip instances always match
	    static create(view) {
	        return new HoverTooltipHost(view);
	    }
	    createHostedView(tooltip) {
	        let hostedView = tooltip.create(this.view);
	        hostedView.dom.classList.add("cm-tooltip-section");
	        this.dom.appendChild(hostedView.dom);
	        if (this.mounted && hostedView.mount)
	            hostedView.mount(this.view);
	        return hostedView;
	    }
	    mount(view) {
	        for (let hostedView of this.manager.tooltipViews) {
	            if (hostedView.mount)
	                hostedView.mount(view);
	        }
	        this.mounted = true;
	    }
	    positioned() {
	        for (let hostedView of this.manager.tooltipViews) {
	            if (hostedView.positioned)
	                hostedView.positioned();
	        }
	    }
	    update(update) {
	        this.manager.update(update);
	    }
	}
	const showHoverTooltipHost = /*@__PURE__*/showTooltip.compute([showHoverTooltip], state => {
	    let tooltips = state.facet(showHoverTooltip).filter(t => t);
	    if (tooltips.length === 0)
	        return null;
	    return {
	        pos: Math.min(...tooltips.map(t => t.pos)),
	        end: Math.max(...tooltips.filter(t => t.end != null).map(t => t.end)),
	        create: HoverTooltipHost.create,
	        above: tooltips[0].above,
	        arrow: tooltips.some(t => t.arrow),
	    };
	});
	class HoverPlugin {
	    constructor(view, source, field, setHover, hoverTime) {
	        this.view = view;
	        this.source = source;
	        this.field = field;
	        this.setHover = setHover;
	        this.hoverTime = hoverTime;
	        this.lastMouseMove = null;
	        this.lastMoveTime = 0;
	        this.hoverTimeout = -1;
	        this.restartTimeout = -1;
	        this.pending = null;
	        this.checkHover = this.checkHover.bind(this);
	        view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
	        view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
	    }
	    update() {
	        if (this.pending) {
	            this.pending = null;
	            clearTimeout(this.restartTimeout);
	            this.restartTimeout = setTimeout(() => this.startHover(), 20);
	        }
	    }
	    get active() {
	        return this.view.state.field(this.field);
	    }
	    checkHover() {
	        this.hoverTimeout = -1;
	        if (this.active)
	            return;
	        let hovered = Date.now() - this.lastMoveTime;
	        if (hovered < this.hoverTime)
	            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime - hovered);
	        else
	            this.startHover();
	    }
	    startHover() {
	        var _a;
	        clearTimeout(this.restartTimeout);
	        let lastMove = this.lastMouseMove;
	        let coords = { x: lastMove.clientX, y: lastMove.clientY };
	        let pos = this.view.contentDOM.contains(lastMove.target)
	            ? this.view.posAtCoords(coords) : null;
	        if (pos == null)
	            return;
	        let posCoords = this.view.coordsAtPos(pos);
	        if (posCoords == null || coords.y < posCoords.top || coords.y > posCoords.bottom ||
	            coords.x < posCoords.left - this.view.defaultCharacterWidth ||
	            coords.x > posCoords.right + this.view.defaultCharacterWidth)
	            return;
	        let bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(s => s.from <= pos && s.to >= pos);
	        let rtl = bidi && bidi.dir == Direction.RTL ? -1 : 1;
	        let open = this.source(this.view, pos, (coords.x < posCoords.left ? -rtl : rtl));
	        if ((_a = open) === null || _a === void 0 ? void 0 : _a.then) {
	            let pending = this.pending = { pos };
	            open.then(result => {
	                if (this.pending == pending) {
	                    this.pending = null;
	                    if (result)
	                        this.view.dispatch({ effects: this.setHover.of(result) });
	                }
	            }, e => logException(this.view.state, e, "hover tooltip"));
	        }
	        else if (open) {
	            this.view.dispatch({ effects: this.setHover.of(open) });
	        }
	    }
	    mousemove(event) {
	        var _a;
	        this.lastMouseMove = event;
	        this.lastMoveTime = Date.now();
	        if (this.hoverTimeout < 0)
	            this.hoverTimeout = setTimeout(this.checkHover, this.hoverTime);
	        let tooltip = this.active;
	        if (tooltip && !isInTooltip(event.target) || this.pending) {
	            let { pos } = tooltip || this.pending, end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
	            if ((pos == end ? this.view.posAtCoords({ x: event.clientX, y: event.clientY }) != pos
	                : !isOverRange(this.view, pos, end, event.clientX, event.clientY, 6 /* MaxDist */))) {
	                this.view.dispatch({ effects: this.setHover.of(null) });
	                this.pending = null;
	            }
	        }
	    }
	    mouseleave() {
	        clearTimeout(this.hoverTimeout);
	        this.hoverTimeout = -1;
	        if (this.active)
	            this.view.dispatch({ effects: this.setHover.of(null) });
	    }
	    destroy() {
	        clearTimeout(this.hoverTimeout);
	        this.view.dom.removeEventListener("mouseleave", this.mouseleave);
	        this.view.dom.removeEventListener("mousemove", this.mousemove);
	    }
	}
	function isInTooltip(elt) {
	    for (let cur = elt; cur; cur = cur.parentNode)
	        if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip"))
	            return true;
	    return false;
	}
	function isOverRange(view, from, to, x, y, margin) {
	    let range = document.createRange();
	    let fromDOM = view.domAtPos(from), toDOM = view.domAtPos(to);
	    range.setEnd(toDOM.node, toDOM.offset);
	    range.setStart(fromDOM.node, fromDOM.offset);
	    let rects = range.getClientRects();
	    range.detach();
	    for (let i = 0; i < rects.length; i++) {
	        let rect = rects[i];
	        let dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
	        if (dist <= margin)
	            return true;
	    }
	    return false;
	}
	/**
	Enable a hover tooltip, which shows up when the pointer hovers
	over ranges of text. The callback is called when the mouse hovers
	over the document text. It should, if there is a tooltip
	associated with position `pos` return the tooltip description
	(either directly or in a promise). The `side` argument indicates
	on which side of the position the pointer is—it will be -1 if the
	pointer is before the position, 1 if after the position.

	Note that all hover tooltips are hosted within a single tooltip
	container element. This allows multiple tooltips over the same
	range to be "merged" together without overlapping.
	*/
	function hoverTooltip(source, options = {}) {
	    let setHover = StateEffect.define();
	    let hoverState = StateField.define({
	        create() { return null; },
	        update(value, tr) {
	            if (value && (options.hideOnChange && (tr.docChanged || tr.selection)))
	                return null;
	            for (let effect of tr.effects)
	                if (effect.is(setHover))
	                    return effect.value;
	            if (value && tr.docChanged) {
	                let newPos = tr.changes.mapPos(value.pos, -1, MapMode.TrackDel);
	                if (newPos == null)
	                    return null;
	                let copy = Object.assign(Object.create(null), value);
	                copy.pos = newPos;
	                if (value.end != null)
	                    copy.end = tr.changes.mapPos(value.end);
	                return copy;
	            }
	            return value;
	        },
	        provide: f => showHoverTooltip.from(f)
	    });
	    let hoverTime = options.hoverTime || 750 /* Time */;
	    return [
	        hoverState,
	        ViewPlugin.define(view => new HoverPlugin(view, source, hoverState, setHover, hoverTime)),
	        showHoverTooltipHost
	    ];
	}

	/**
	An instance of this is passed to completion source functions.
	*/
	class CompletionContext {
	    /**
	    Create a new completion context. (Mostly useful for testing
	    completion sources—in the editor, the extension will create
	    these for you.)
	    */
	    constructor(
	    /**
	    The editor state that the completion happens in.
	    */
	    state, 
	    /**
	    The position at which the completion is happening.
	    */
	    pos, 
	    /**
	    Indicates whether completion was activated explicitly, or
	    implicitly by typing. The usual way to respond to this is to
	    only return completions when either there is part of a
	    completable entity before the cursor, or `explicit` is true.
	    */
	    explicit) {
	        this.state = state;
	        this.pos = pos;
	        this.explicit = explicit;
	        /**
	        @internal
	        */
	        this.abortListeners = [];
	    }
	    /**
	    Get the extent, content, and (if there is a token) type of the
	    token before `this.pos`.
	    */
	    tokenBefore(types) {
	        let token = syntaxTree(this.state).resolveInner(this.pos, -1);
	        while (token && types.indexOf(token.name) < 0)
	            token = token.parent;
	        return token ? { from: token.from, to: this.pos,
	            text: this.state.sliceDoc(token.from, this.pos),
	            type: token.type } : null;
	    }
	    /**
	    Get the match of the given expression directly before the
	    cursor.
	    */
	    matchBefore(expr) {
	        let line = this.state.doc.lineAt(this.pos);
	        let start = Math.max(line.from, this.pos - 250);
	        let str = line.text.slice(start - line.from, this.pos - line.from);
	        let found = str.search(ensureAnchor(expr, false));
	        return found < 0 ? null : { from: start + found, to: this.pos, text: str.slice(found) };
	    }
	    /**
	    Yields true when the query has been aborted. Can be useful in
	    asynchronous queries to avoid doing work that will be ignored.
	    */
	    get aborted() { return this.abortListeners == null; }
	    /**
	    Allows you to register abort handlers, which will be called when
	    the query is
	    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
	    */
	    addEventListener(type, listener) {
	        if (type == "abort" && this.abortListeners)
	            this.abortListeners.push(listener);
	    }
	}
	function toSet(chars) {
	    let flat = Object.keys(chars).join("");
	    let words = /\w/.test(flat);
	    if (words)
	        flat = flat.replace(/\w/g, "");
	    return `[${words ? "\\w" : ""}${flat.replace(/[^\w\s]/g, "\\$&")}]`;
	}
	function prefixMatch(options) {
	    let first = Object.create(null), rest = Object.create(null);
	    for (let { label } of options) {
	        first[label[0]] = true;
	        for (let i = 1; i < label.length; i++)
	            rest[label[i]] = true;
	    }
	    let source = toSet(first) + toSet(rest) + "*$";
	    return [new RegExp("^" + source), new RegExp(source)];
	}
	/**
	Given a a fixed array of options, return an autocompleter that
	completes them.
	*/
	function completeFromList(list) {
	    let options = list.map(o => typeof o == "string" ? { label: o } : o);
	    let [span, match] = options.every(o => /^\w+$/.test(o.label)) ? [/\w*$/, /\w+$/] : prefixMatch(options);
	    return (context) => {
	        let token = context.matchBefore(match);
	        return token || context.explicit ? { from: token ? token.from : context.pos, options, span } : null;
	    };
	}
	class Option {
	    constructor(completion, source, match) {
	        this.completion = completion;
	        this.source = source;
	        this.match = match;
	    }
	}
	function cur(state) { return state.selection.main.head; }
	// Make sure the given regexp has a $ at its end and, if `start` is
	// true, a ^ at its start.
	function ensureAnchor(expr, start) {
	    var _a;
	    let { source } = expr;
	    let addStart = start && source[0] != "^", addEnd = source[source.length - 1] != "$";
	    if (!addStart && !addEnd)
	        return expr;
	    return new RegExp(`${addStart ? "^" : ""}(?:${source})${addEnd ? "$" : ""}`, (_a = expr.flags) !== null && _a !== void 0 ? _a : (expr.ignoreCase ? "i" : ""));
	}
	function applyCompletion(view, option) {
	    let apply = option.completion.apply || option.completion.label;
	    let result = option.source;
	    if (typeof apply == "string") {
	        view.dispatch({
	            changes: { from: result.from, to: result.to, insert: apply },
	            selection: { anchor: result.from + apply.length },
	            userEvent: "input.complete"
	        });
	    }
	    else {
	        apply(view, option.completion, result.from, result.to);
	    }
	}
	const SourceCache = /*@__PURE__*/new WeakMap();
	function asSource(source) {
	    if (!Array.isArray(source))
	        return source;
	    let known = SourceCache.get(source);
	    if (!known)
	        SourceCache.set(source, known = completeFromList(source));
	    return known;
	}

	// A pattern matcher for fuzzy completion matching. Create an instance
	// once for a pattern, and then use that to match any number of
	// completions.
	class FuzzyMatcher {
	    constructor(pattern) {
	        this.pattern = pattern;
	        this.chars = [];
	        this.folded = [];
	        // Buffers reused by calls to `match` to track matched character
	        // positions.
	        this.any = [];
	        this.precise = [];
	        this.byWord = [];
	        for (let p = 0; p < pattern.length;) {
	            let char = codePointAt(pattern, p), size = codePointSize(char);
	            this.chars.push(char);
	            let part = pattern.slice(p, p + size), upper = part.toUpperCase();
	            this.folded.push(codePointAt(upper == part ? part.toLowerCase() : upper, 0));
	            p += size;
	        }
	        this.astral = pattern.length != this.chars.length;
	    }
	    // Matches a given word (completion) against the pattern (input).
	    // Will return null for no match, and otherwise an array that starts
	    // with the match score, followed by any number of `from, to` pairs
	    // indicating the matched parts of `word`.
	    //
	    // The score is a number that is more negative the worse the match
	    // is. See `Penalty` above.
	    match(word) {
	        if (this.pattern.length == 0)
	            return [0];
	        if (word.length < this.pattern.length)
	            return null;
	        let { chars, folded, any, precise, byWord } = this;
	        // For single-character queries, only match when they occur right
	        // at the start
	        if (chars.length == 1) {
	            let first = codePointAt(word, 0);
	            return first == chars[0] ? [0, 0, codePointSize(first)]
	                : first == folded[0] ? [-200 /* CaseFold */, 0, codePointSize(first)] : null;
	        }
	        let direct = word.indexOf(this.pattern);
	        if (direct == 0)
	            return [0, 0, this.pattern.length];
	        let len = chars.length, anyTo = 0;
	        if (direct < 0) {
	            for (let i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
	                let next = codePointAt(word, i);
	                if (next == chars[anyTo] || next == folded[anyTo])
	                    any[anyTo++] = i;
	                i += codePointSize(next);
	            }
	            // No match, exit immediately
	            if (anyTo < len)
	                return null;
	        }
	        // This tracks the extent of the precise (non-folded, not
	        // necessarily adjacent) match
	        let preciseTo = 0;
	        // Tracks whether there is a match that hits only characters that
	        // appear to be starting words. `byWordFolded` is set to true when
	        // a case folded character is encountered in such a match
	        let byWordTo = 0, byWordFolded = false;
	        // If we've found a partial adjacent match, these track its state
	        let adjacentTo = 0, adjacentStart = -1, adjacentEnd = -1;
	        let hasLower = /[a-z]/.test(word);
	        // Go over the option's text, scanning for the various kinds of matches
	        for (let i = 0, e = Math.min(word.length, 200), prevType = 0 /* NonWord */; i < e && byWordTo < len;) {
	            let next = codePointAt(word, i);
	            if (direct < 0) {
	                if (preciseTo < len && next == chars[preciseTo])
	                    precise[preciseTo++] = i;
	                if (adjacentTo < len) {
	                    if (next == chars[adjacentTo] || next == folded[adjacentTo]) {
	                        if (adjacentTo == 0)
	                            adjacentStart = i;
	                        adjacentEnd = i + 1;
	                        adjacentTo++;
	                    }
	                    else {
	                        adjacentTo = 0;
	                    }
	                }
	            }
	            let ch, type = next < 0xff
	                ? (next >= 48 && next <= 57 || next >= 97 && next <= 122 ? 2 /* Lower */ : next >= 65 && next <= 90 ? 1 /* Upper */ : 0 /* NonWord */)
	                : ((ch = fromCodePoint(next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */);
	            if ((type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) &&
	                (chars[byWordTo] == next || (folded[byWordTo] == next && (byWordFolded = true))))
	                byWord[byWordTo++] = i;
	            prevType = type;
	            i += codePointSize(next);
	        }
	        if (byWordTo == len && byWord[0] == 0)
	            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
	        if (adjacentTo == len && adjacentStart == 0)
	            return [-200 /* CaseFold */, 0, adjacentEnd];
	        if (direct > -1)
	            return [-700 /* NotStart */, direct, direct + this.pattern.length];
	        if (adjacentTo == len)
	            return [-200 /* CaseFold */ + -700 /* NotStart */, adjacentStart, adjacentEnd];
	        if (byWordTo == len)
	            return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */, byWord, word);
	        return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
	    }
	    result(score, positions, word) {
	        let result = [score], i = 1;
	        for (let pos of positions) {
	            let to = pos + (this.astral ? codePointSize(codePointAt(word, pos)) : 1);
	            if (i > 1 && result[i - 1] == pos)
	                result[i - 1] = to;
	            else {
	                result[i++] = pos;
	                result[i++] = to;
	            }
	        }
	        return result;
	    }
	}

	const completionConfig = /*@__PURE__*/Facet.define({
	    combine(configs) {
	        return combineConfig(configs, {
	            activateOnTyping: true,
	            override: null,
	            maxRenderedOptions: 100,
	            defaultKeymap: true,
	            optionClass: () => "",
	            icons: true,
	            addToOptions: []
	        }, {
	            defaultKeymap: (a, b) => a && b,
	            icons: (a, b) => a && b,
	            optionClass: (a, b) => c => joinClass(a(c), b(c)),
	            addToOptions: (a, b) => a.concat(b)
	        });
	    }
	});
	function joinClass(a, b) {
	    return a ? b ? a + " " + b : a : b;
	}

	const MaxInfoWidth = 300;
	const baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-tooltip.cm-tooltip-autocomplete": {
	        "& > ul": {
	            fontFamily: "monospace",
	            whiteSpace: "nowrap",
	            overflow: "auto",
	            maxWidth_fallback: "700px",
	            maxWidth: "min(700px, 95vw)",
	            maxHeight: "10em",
	            listStyle: "none",
	            margin: 0,
	            padding: 0,
	            "& > li": {
	                cursor: "pointer",
	                padding: "1px 1em 1px 3px",
	                lineHeight: 1.2
	            },
	        }
	    },
	    "&light .cm-tooltip-autocomplete ul li[aria-selected]": {
	        background: "#39e",
	        color: "white",
	    },
	    "&dark .cm-tooltip-autocomplete ul li[aria-selected]": {
	        background: "#347",
	        color: "white",
	    },
	    ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
	        content: '"···"',
	        opacity: 0.5,
	        display: "block",
	        textAlign: "center"
	    },
	    ".cm-tooltip.cm-completionInfo": {
	        position: "absolute",
	        padding: "3px 9px",
	        width: "max-content",
	        maxWidth: MaxInfoWidth + "px",
	    },
	    ".cm-completionInfo.cm-completionInfo-left": { right: "100%" },
	    ".cm-completionInfo.cm-completionInfo-right": { left: "100%" },
	    "&light .cm-snippetField": { backgroundColor: "#00000022" },
	    "&dark .cm-snippetField": { backgroundColor: "#ffffff22" },
	    ".cm-snippetFieldPosition": {
	        verticalAlign: "text-top",
	        width: 0,
	        height: "1.15em",
	        margin: "0 -0.7px -.7em",
	        borderLeft: "1.4px dotted #888"
	    },
	    ".cm-completionMatchedText": {
	        textDecoration: "underline"
	    },
	    ".cm-completionDetail": {
	        marginLeft: "0.5em",
	        fontStyle: "italic"
	    },
	    ".cm-completionIcon": {
	        fontSize: "90%",
	        width: ".8em",
	        display: "inline-block",
	        textAlign: "center",
	        paddingRight: ".6em",
	        opacity: "0.6"
	    },
	    ".cm-completionIcon-function, .cm-completionIcon-method": {
	        "&:after": { content: "'ƒ'" }
	    },
	    ".cm-completionIcon-class": {
	        "&:after": { content: "'○'" }
	    },
	    ".cm-completionIcon-interface": {
	        "&:after": { content: "'◌'" }
	    },
	    ".cm-completionIcon-variable": {
	        "&:after": { content: "'𝑥'" }
	    },
	    ".cm-completionIcon-constant": {
	        "&:after": { content: "'𝐶'" }
	    },
	    ".cm-completionIcon-type": {
	        "&:after": { content: "'𝑡'" }
	    },
	    ".cm-completionIcon-enum": {
	        "&:after": { content: "'∪'" }
	    },
	    ".cm-completionIcon-property": {
	        "&:after": { content: "'□'" }
	    },
	    ".cm-completionIcon-keyword": {
	        "&:after": { content: "'🔑\uFE0E'" } // Disable emoji rendering
	    },
	    ".cm-completionIcon-namespace": {
	        "&:after": { content: "'▢'" }
	    },
	    ".cm-completionIcon-text": {
	        "&:after": { content: "'abc'", fontSize: "50%", verticalAlign: "middle" }
	    }
	});

	function optionContent(config) {
	    let content = config.addToOptions.slice();
	    if (config.icons)
	        content.push({
	            render(completion) {
	                let icon = document.createElement("div");
	                icon.classList.add("cm-completionIcon");
	                if (completion.type)
	                    icon.classList.add(...completion.type.split(/\s+/g).map(cls => "cm-completionIcon-" + cls));
	                icon.setAttribute("aria-hidden", "true");
	                return icon;
	            },
	            position: 20
	        });
	    content.push({
	        render(completion, _s, match) {
	            let labelElt = document.createElement("span");
	            labelElt.className = "cm-completionLabel";
	            let { label } = completion, off = 0;
	            for (let j = 1; j < match.length;) {
	                let from = match[j++], to = match[j++];
	                if (from > off)
	                    labelElt.appendChild(document.createTextNode(label.slice(off, from)));
	                let span = labelElt.appendChild(document.createElement("span"));
	                span.appendChild(document.createTextNode(label.slice(from, to)));
	                span.className = "cm-completionMatchedText";
	                off = to;
	            }
	            if (off < label.length)
	                labelElt.appendChild(document.createTextNode(label.slice(off)));
	            return labelElt;
	        },
	        position: 50
	    }, {
	        render(completion) {
	            if (!completion.detail)
	                return null;
	            let detailElt = document.createElement("span");
	            detailElt.className = "cm-completionDetail";
	            detailElt.textContent = completion.detail;
	            return detailElt;
	        },
	        position: 80
	    });
	    return content.sort((a, b) => a.position - b.position).map(a => a.render);
	}
	function createInfoDialog(option, view) {
	    let dom = document.createElement("div");
	    dom.className = "cm-tooltip cm-completionInfo";
	    let { info } = option.completion;
	    if (typeof info == "string") {
	        dom.textContent = info;
	    }
	    else {
	        let content = info(option.completion);
	        if (content.then)
	            content.then(node => dom.appendChild(node), e => logException(view.state, e, "completion info"));
	        else
	            dom.appendChild(content);
	    }
	    return dom;
	}
	function rangeAroundSelected(total, selected, max) {
	    if (total <= max)
	        return { from: 0, to: total };
	    if (selected <= (total >> 1)) {
	        let off = Math.floor(selected / max);
	        return { from: off * max, to: (off + 1) * max };
	    }
	    let off = Math.floor((total - selected) / max);
	    return { from: total - (off + 1) * max, to: total - off * max };
	}
	class CompletionTooltip {
	    constructor(view, stateField) {
	        this.view = view;
	        this.stateField = stateField;
	        this.info = null;
	        this.placeInfo = {
	            read: () => this.measureInfo(),
	            write: (pos) => this.positionInfo(pos),
	            key: this
	        };
	        let cState = view.state.field(stateField);
	        let { options, selected } = cState.open;
	        let config = view.state.facet(completionConfig);
	        this.optionContent = optionContent(config);
	        this.optionClass = config.optionClass;
	        this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
	        this.dom = document.createElement("div");
	        this.dom.className = "cm-tooltip-autocomplete";
	        this.dom.addEventListener("mousedown", (e) => {
	            for (let dom = e.target, match; dom && dom != this.dom; dom = dom.parentNode) {
	                if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
	                    applyCompletion(view, options[+match[1]]);
	                    e.preventDefault();
	                    return;
	                }
	            }
	        });
	        this.list = this.dom.appendChild(this.createListBox(options, cState.id, this.range));
	        this.list.addEventListener("scroll", () => {
	            if (this.info)
	                this.view.requestMeasure(this.placeInfo);
	        });
	    }
	    mount() { this.updateSel(); }
	    update(update) {
	        if (update.state.field(this.stateField) != update.startState.field(this.stateField))
	            this.updateSel();
	    }
	    positioned() {
	        if (this.info)
	            this.view.requestMeasure(this.placeInfo);
	    }
	    updateSel() {
	        let cState = this.view.state.field(this.stateField), open = cState.open;
	        if (open.selected < this.range.from || open.selected >= this.range.to) {
	            this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
	            this.list.remove();
	            this.list = this.dom.appendChild(this.createListBox(open.options, cState.id, this.range));
	            this.list.addEventListener("scroll", () => {
	                if (this.info)
	                    this.view.requestMeasure(this.placeInfo);
	            });
	        }
	        if (this.updateSelectedOption(open.selected)) {
	            if (this.info) {
	                this.info.remove();
	                this.info = null;
	            }
	            let option = open.options[open.selected];
	            if (option.completion.info) {
	                this.info = this.dom.appendChild(createInfoDialog(option, this.view));
	                this.view.requestMeasure(this.placeInfo);
	            }
	        }
	    }
	    updateSelectedOption(selected) {
	        let set = null;
	        for (let opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
	            if (i == selected) {
	                if (!opt.hasAttribute("aria-selected")) {
	                    opt.setAttribute("aria-selected", "true");
	                    set = opt;
	                }
	            }
	            else {
	                if (opt.hasAttribute("aria-selected"))
	                    opt.removeAttribute("aria-selected");
	            }
	        }
	        if (set)
	            scrollIntoView(this.list, set);
	        return set;
	    }
	    measureInfo() {
	        let sel = this.dom.querySelector("[aria-selected]");
	        if (!sel)
	            return null;
	        let rect = this.dom.getBoundingClientRect();
	        let top = sel.getBoundingClientRect().top - rect.top;
	        if (top < 0 || top > this.list.clientHeight - 10)
	            return null;
	        let left = this.view.textDirection == Direction.RTL;
	        let spaceLeft = rect.left, spaceRight = innerWidth - rect.right;
	        if (left && spaceLeft < Math.min(MaxInfoWidth, spaceRight))
	            left = false;
	        else if (!left && spaceRight < Math.min(MaxInfoWidth, spaceLeft))
	            left = true;
	        return { top, left };
	    }
	    positionInfo(pos) {
	        if (this.info && pos) {
	            this.info.style.top = pos.top + "px";
	            this.info.classList.toggle("cm-completionInfo-left", pos.left);
	            this.info.classList.toggle("cm-completionInfo-right", !pos.left);
	        }
	    }
	    createListBox(options, id, range) {
	        const ul = document.createElement("ul");
	        ul.id = id;
	        ul.setAttribute("role", "listbox");
	        for (let i = range.from; i < range.to; i++) {
	            let { completion, match } = options[i];
	            const li = ul.appendChild(document.createElement("li"));
	            li.id = id + "-" + i;
	            li.setAttribute("role", "option");
	            let cls = this.optionClass(completion);
	            if (cls)
	                li.className = cls;
	            for (let source of this.optionContent) {
	                let node = source(completion, this.view.state, match);
	                if (node)
	                    li.appendChild(node);
	            }
	        }
	        if (range.from)
	            ul.classList.add("cm-completionListIncompleteTop");
	        if (range.to < options.length)
	            ul.classList.add("cm-completionListIncompleteBottom");
	        return ul;
	    }
	}
	// We allocate a new function instance every time the completion
	// changes to force redrawing/repositioning of the tooltip
	function completionTooltip(stateField) {
	    return (view) => new CompletionTooltip(view, stateField);
	}
	function scrollIntoView(container, element) {
	    let parent = container.getBoundingClientRect();
	    let self = element.getBoundingClientRect();
	    if (self.top < parent.top)
	        container.scrollTop -= parent.top - self.top;
	    else if (self.bottom > parent.bottom)
	        container.scrollTop += self.bottom - parent.bottom;
	}

	const MaxOptions = 300;
	// Used to pick a preferred option when two options with the same
	// label occur in the result.
	function score(option) {
	    return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) +
	        (option.type ? 1 : 0);
	}
	function sortOptions(active, state) {
	    let options = [], i = 0;
	    for (let a of active)
	        if (a.hasResult()) {
	            if (a.result.filter === false) {
	                for (let option of a.result.options)
	                    options.push(new Option(option, a, [1e9 - i++]));
	            }
	            else {
	                let matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)), match;
	                for (let option of a.result.options)
	                    if (match = matcher.match(option.label)) {
	                        if (option.boost != null)
	                            match[0] += option.boost;
	                        options.push(new Option(option, a, match));
	                    }
	            }
	        }
	    options.sort(cmpOption);
	    let result = [], prev = null;
	    for (let opt of options.sort(cmpOption)) {
	        if (result.length == MaxOptions)
	            break;
	        if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail)
	            result.push(opt);
	        else if (score(opt.completion) > score(prev))
	            result[result.length - 1] = opt;
	        prev = opt.completion;
	    }
	    return result;
	}
	class CompletionDialog {
	    constructor(options, attrs, tooltip, timestamp, selected) {
	        this.options = options;
	        this.attrs = attrs;
	        this.tooltip = tooltip;
	        this.timestamp = timestamp;
	        this.selected = selected;
	    }
	    setSelected(selected, id) {
	        return selected == this.selected || selected >= this.options.length ? this
	            : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
	    }
	    static build(active, state, id, prev) {
	        let options = sortOptions(active, state);
	        if (!options.length)
	            return null;
	        let selected = 0;
	        if (prev && prev.selected) {
	            let selectedValue = prev.options[prev.selected].completion;
	            for (let i = 0; i < options.length && !selected; i++) {
	                if (options[i].completion == selectedValue)
	                    selected = i;
	            }
	        }
	        return new CompletionDialog(options, makeAttrs(id, selected), {
	            pos: active.reduce((a, b) => b.hasResult() ? Math.min(a, b.from) : a, 1e8),
	            create: completionTooltip(completionState)
	        }, prev ? prev.timestamp : Date.now(), selected);
	    }
	    map(changes) {
	        return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), { pos: changes.mapPos(this.tooltip.pos) }), this.timestamp, this.selected);
	    }
	}
	class CompletionState {
	    constructor(active, id, open) {
	        this.active = active;
	        this.id = id;
	        this.open = open;
	    }
	    static start() {
	        return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
	    }
	    update(tr) {
	        let { state } = tr, conf = state.facet(completionConfig);
	        let sources = conf.override ||
	            state.languageDataAt("autocomplete", cur(state)).map(asSource);
	        let active = sources.map(source => {
	            let value = this.active.find(s => s.source == source) ||
	                new ActiveSource(source, this.active.some(a => a.state != 0 /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);
	            return value.update(tr, conf);
	        });
	        if (active.length == this.active.length && active.every((a, i) => a == this.active[i]))
	            active = this.active;
	        let open = tr.selection || active.some(a => a.hasResult() && tr.changes.touchesRange(a.from, a.to)) ||
	            !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open)
	            : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
	        if (!open && active.every(a => a.state != 1 /* Pending */) && active.some(a => a.hasResult()))
	            active = active.map(a => a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a);
	        for (let effect of tr.effects)
	            if (effect.is(setSelectedEffect))
	                open = open && open.setSelected(effect.value, this.id);
	        return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
	    }
	    get tooltip() { return this.open ? this.open.tooltip : null; }
	    get attrs() { return this.open ? this.open.attrs : baseAttrs; }
	}
	function sameResults(a, b) {
	    if (a == b)
	        return true;
	    for (let iA = 0, iB = 0;;) {
	        while (iA < a.length && !a[iA].hasResult)
	            iA++;
	        while (iB < b.length && !b[iB].hasResult)
	            iB++;
	        let endA = iA == a.length, endB = iB == b.length;
	        if (endA || endB)
	            return endA == endB;
	        if (a[iA++].result != b[iB++].result)
	            return false;
	    }
	}
	const baseAttrs = {
	    "aria-autocomplete": "list",
	    "aria-expanded": "false"
	};
	function makeAttrs(id, selected) {
	    return {
	        "aria-autocomplete": "list",
	        "aria-expanded": "true",
	        "aria-activedescendant": id + "-" + selected,
	        "aria-controls": id
	    };
	}
	const none = [];
	function cmpOption(a, b) {
	    let dScore = b.match[0] - a.match[0];
	    if (dScore)
	        return dScore;
	    return a.completion.label.localeCompare(b.completion.label);
	}
	function getUserEvent(tr) {
	    return tr.isUserEvent("input.type") ? "input" : tr.isUserEvent("delete.backward") ? "delete" : null;
	}
	class ActiveSource {
	    constructor(source, state, explicitPos = -1) {
	        this.source = source;
	        this.state = state;
	        this.explicitPos = explicitPos;
	    }
	    hasResult() { return false; }
	    update(tr, conf) {
	        let event = getUserEvent(tr), value = this;
	        if (event)
	            value = value.handleUserEvent(tr, event, conf);
	        else if (tr.docChanged)
	            value = value.handleChange(tr);
	        else if (tr.selection && value.state != 0 /* Inactive */)
	            value = new ActiveSource(value.source, 0 /* Inactive */);
	        for (let effect of tr.effects) {
	            if (effect.is(startCompletionEffect))
	                value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);
	            else if (effect.is(closeCompletionEffect))
	                value = new ActiveSource(value.source, 0 /* Inactive */);
	            else if (effect.is(setActiveEffect))
	                for (let active of effect.value)
	                    if (active.source == value.source)
	                        value = active;
	        }
	        return value;
	    }
	    handleUserEvent(tr, type, conf) {
	        return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);
	    }
	    handleChange(tr) {
	        return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
	    }
	    map(changes) {
	        return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
	    }
	}
	class ActiveResult extends ActiveSource {
	    constructor(source, explicitPos, result, from, to, span) {
	        super(source, 2 /* Result */, explicitPos);
	        this.result = result;
	        this.from = from;
	        this.to = to;
	        this.span = span;
	    }
	    hasResult() { return true; }
	    handleUserEvent(tr, type, conf) {
	        let from = tr.changes.mapPos(this.from), to = tr.changes.mapPos(this.to, 1);
	        let pos = cur(tr.state);
	        if ((this.explicitPos > -1 ? pos < from : pos <= from) || pos > to)
	            return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);
	        let explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
	        if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to))))
	            return new ActiveResult(this.source, explicitPos, this.result, from, to, this.span);
	        return new ActiveSource(this.source, 1 /* Pending */, explicitPos);
	    }
	    handleChange(tr) {
	        return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
	    }
	    map(mapping) {
	        return mapping.empty ? this :
	            new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
	    }
	}
	const startCompletionEffect = /*@__PURE__*/StateEffect.define();
	const closeCompletionEffect = /*@__PURE__*/StateEffect.define();
	const setActiveEffect = /*@__PURE__*/StateEffect.define({
	    map(sources, mapping) { return sources.map(s => s.map(mapping)); }
	});
	const setSelectedEffect = /*@__PURE__*/StateEffect.define();
	const completionState = /*@__PURE__*/StateField.define({
	    create() { return CompletionState.start(); },
	    update(value, tr) { return value.update(tr); },
	    provide: f => [
	        showTooltip.from(f, val => val.tooltip),
	        EditorView.contentAttributes.from(f, state => state.attrs)
	    ]
	});

	const CompletionInteractMargin = 75;
	/**
	Returns a command that moves the completion selection forward or
	backward by the given amount.
	*/
	function moveCompletionSelection(forward, by = "option") {
	    return (view) => {
	        let cState = view.state.field(completionState, false);
	        if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
	            return false;
	        let step = 1, tooltip;
	        if (by == "page" && (tooltip = view.dom.querySelector(".cm-tooltip-autocomplete")))
	            step = Math.max(2, Math.floor(tooltip.offsetHeight / tooltip.firstChild.offsetHeight));
	        let selected = cState.open.selected + step * (forward ? 1 : -1), { length } = cState.open.options;
	        if (selected < 0)
	            selected = by == "page" ? 0 : length - 1;
	        else if (selected >= length)
	            selected = by == "page" ? length - 1 : 0;
	        view.dispatch({ effects: setSelectedEffect.of(selected) });
	        return true;
	    };
	}
	/**
	Accept the current completion.
	*/
	const acceptCompletion = (view) => {
	    let cState = view.state.field(completionState, false);
	    if (view.state.readOnly || !cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin)
	        return false;
	    applyCompletion(view, cState.open.options[cState.open.selected]);
	    return true;
	};
	/**
	Explicitly start autocompletion.
	*/
	const startCompletion = (view) => {
	    let cState = view.state.field(completionState, false);
	    if (!cState)
	        return false;
	    view.dispatch({ effects: startCompletionEffect.of(true) });
	    return true;
	};
	/**
	Close the currently active completion.
	*/
	const closeCompletion = (view) => {
	    let cState = view.state.field(completionState, false);
	    if (!cState || !cState.active.some(a => a.state != 0 /* Inactive */))
	        return false;
	    view.dispatch({ effects: closeCompletionEffect.of(null) });
	    return true;
	};
	class RunningQuery {
	    constructor(active, context) {
	        this.active = active;
	        this.context = context;
	        this.time = Date.now();
	        this.updates = [];
	        // Note that 'undefined' means 'not done yet', whereas 'null' means
	        // 'query returned null'.
	        this.done = undefined;
	    }
	}
	const DebounceTime = 50, MaxUpdateCount = 50, MinAbortTime = 1000;
	const completionPlugin = /*@__PURE__*/ViewPlugin.fromClass(class {
	    constructor(view) {
	        this.view = view;
	        this.debounceUpdate = -1;
	        this.running = [];
	        this.debounceAccept = -1;
	        this.composing = 0 /* None */;
	        for (let active of view.state.field(completionState).active)
	            if (active.state == 1 /* Pending */)
	                this.startQuery(active);
	    }
	    update(update) {
	        let cState = update.state.field(completionState);
	        if (!update.selectionSet && !update.docChanged && update.startState.field(completionState) == cState)
	            return;
	        let doesReset = update.transactions.some(tr => {
	            return (tr.selection || tr.docChanged) && !getUserEvent(tr);
	        });
	        for (let i = 0; i < this.running.length; i++) {
	            let query = this.running[i];
	            if (doesReset ||
	                query.updates.length + update.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
	                for (let handler of query.context.abortListeners) {
	                    try {
	                        handler();
	                    }
	                    catch (e) {
	                        logException(this.view.state, e);
	                    }
	                }
	                query.context.abortListeners = null;
	                this.running.splice(i--, 1);
	            }
	            else {
	                query.updates.push(...update.transactions);
	            }
	        }
	        if (this.debounceUpdate > -1)
	            clearTimeout(this.debounceUpdate);
	        this.debounceUpdate = cState.active.some(a => a.state == 1 /* Pending */ && !this.running.some(q => q.active.source == a.source))
	            ? setTimeout(() => this.startUpdate(), DebounceTime) : -1;
	        if (this.composing != 0 /* None */)
	            for (let tr of update.transactions) {
	                if (getUserEvent(tr) == "input")
	                    this.composing = 2 /* Changed */;
	                else if (this.composing == 2 /* Changed */ && tr.selection)
	                    this.composing = 3 /* ChangedAndMoved */;
	            }
	    }
	    startUpdate() {
	        this.debounceUpdate = -1;
	        let { state } = this.view, cState = state.field(completionState);
	        for (let active of cState.active) {
	            if (active.state == 1 /* Pending */ && !this.running.some(r => r.active.source == active.source))
	                this.startQuery(active);
	        }
	    }
	    startQuery(active) {
	        let { state } = this.view, pos = cur(state);
	        let context = new CompletionContext(state, pos, active.explicitPos == pos);
	        let pending = new RunningQuery(active, context);
	        this.running.push(pending);
	        Promise.resolve(active.source(context)).then(result => {
	            if (!pending.context.aborted) {
	                pending.done = result || null;
	                this.scheduleAccept();
	            }
	        }, err => {
	            this.view.dispatch({ effects: closeCompletionEffect.of(null) });
	            logException(this.view.state, err);
	        });
	    }
	    scheduleAccept() {
	        if (this.running.every(q => q.done !== undefined))
	            this.accept();
	        else if (this.debounceAccept < 0)
	            this.debounceAccept = setTimeout(() => this.accept(), DebounceTime);
	    }
	    // For each finished query in this.running, try to create a result
	    // or, if appropriate, restart the query.
	    accept() {
	        var _a;
	        if (this.debounceAccept > -1)
	            clearTimeout(this.debounceAccept);
	        this.debounceAccept = -1;
	        let updated = [];
	        let conf = this.view.state.facet(completionConfig);
	        for (let i = 0; i < this.running.length; i++) {
	            let query = this.running[i];
	            if (query.done === undefined)
	                continue;
	            this.running.splice(i--, 1);
	            if (query.done) {
	                let active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : this.view.state), query.done.span && query.done.filter !== false ? ensureAnchor(query.done.span, true) : null);
	                // Replay the transactions that happened since the start of
	                // the request and see if that preserves the result
	                for (let tr of query.updates)
	                    active = active.update(tr, conf);
	                if (active.hasResult()) {
	                    updated.push(active);
	                    continue;
	                }
	            }
	            let current = this.view.state.field(completionState).active.find(a => a.source == query.active.source);
	            if (current && current.state == 1 /* Pending */) {
	                if (query.done == null) {
	                    // Explicitly failed. Should clear the pending status if it
	                    // hasn't been re-set in the meantime.
	                    let active = new ActiveSource(query.active.source, 0 /* Inactive */);
	                    for (let tr of query.updates)
	                        active = active.update(tr, conf);
	                    if (active.state != 1 /* Pending */)
	                        updated.push(active);
	                }
	                else {
	                    // Cleared by subsequent transactions. Restart.
	                    this.startQuery(current);
	                }
	            }
	        }
	        if (updated.length)
	            this.view.dispatch({ effects: setActiveEffect.of(updated) });
	    }
	}, {
	    eventHandlers: {
	        compositionstart() {
	            this.composing = 1 /* Started */;
	        },
	        compositionend() {
	            if (this.composing == 3 /* ChangedAndMoved */) {
	                // Safari fires compositionend events synchronously, possibly
	                // from inside an update, so dispatch asynchronously to avoid reentrancy
	                setTimeout(() => this.view.dispatch({ effects: startCompletionEffect.of(false) }), 20);
	            }
	            this.composing = 0 /* None */;
	        }
	    }
	});

	/**
	Returns an extension that enables autocompletion.
	*/
	function autocompletion(config = {}) {
	    return [
	        completionState,
	        completionConfig.of(config),
	        completionPlugin,
	        completionKeymapExt,
	        baseTheme$1
	    ];
	}
	/**
	Basic keybindings for autocompletion.

	 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
	 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
	 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
	 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
	 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
	 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
	 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
	*/
	const completionKeymap = [
	    { key: "Ctrl-Space", run: startCompletion },
	    { key: "Escape", run: closeCompletion },
	    { key: "ArrowDown", run: /*@__PURE__*/moveCompletionSelection(true) },
	    { key: "ArrowUp", run: /*@__PURE__*/moveCompletionSelection(false) },
	    { key: "PageDown", run: /*@__PURE__*/moveCompletionSelection(true, "page") },
	    { key: "PageUp", run: /*@__PURE__*/moveCompletionSelection(false, "page") },
	    { key: "Enter", run: acceptCompletion }
	];
	const completionKeymapExt = /*@__PURE__*/Prec.override(/*@__PURE__*/keymap.computeN([completionConfig], state => state.facet(completionConfig).defaultKeymap ? [completionKeymap] : []));

	/**
	Comment or uncomment the current selection. Will use line comments
	if available, otherwise falling back to block comments.
	*/
	const toggleComment = target => {
	    let config = getConfig(target.state);
	    return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
	};
	function command(f, option) {
	    return ({ state, dispatch }) => {
	        let tr = f(option, state.selection.ranges, state);
	        if (!tr)
	            return false;
	        dispatch(state.update(tr));
	        return true;
	    };
	}
	/**
	Comment or uncomment the current selection using line comments.
	The line comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* Toggle */);
	/**
	Comment or uncomment the current selection using block comments.
	The block comment syntax is taken from the
	[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
	data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
	*/
	const toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* Toggle */);
	/**
	Default key bindings for this package.

	 - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#comment.toggleComment).
	 - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#comment.toggleBlockComment).
	*/
	const commentKeymap = [
	    { key: "Mod-/", run: toggleComment },
	    { key: "Alt-A", run: toggleBlockComment }
	];
	function getConfig(state, pos = state.selection.main.head) {
	    let data = state.languageDataAt("commentTokens", pos);
	    return data.length ? data[0] : {};
	}
	const SearchMargin = 50;
	/**
	Determines if the given range is block-commented in the given
	state.
	*/
	function findBlockComment(state, { open, close }, from, to) {
	    let textBefore = state.sliceDoc(from - SearchMargin, from);
	    let textAfter = state.sliceDoc(to, to + SearchMargin);
	    let spaceBefore = /\s*$/.exec(textBefore)[0].length, spaceAfter = /^\s*/.exec(textAfter)[0].length;
	    let beforeOff = textBefore.length - spaceBefore;
	    if (textBefore.slice(beforeOff - open.length, beforeOff) == open &&
	        textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
	        return { open: { pos: from - spaceBefore, margin: spaceBefore && 1 },
	            close: { pos: to + spaceAfter, margin: spaceAfter && 1 } };
	    }
	    let startText, endText;
	    if (to - from <= 2 * SearchMargin) {
	        startText = endText = state.sliceDoc(from, to);
	    }
	    else {
	        startText = state.sliceDoc(from, from + SearchMargin);
	        endText = state.sliceDoc(to - SearchMargin, to);
	    }
	    let startSpace = /^\s*/.exec(startText)[0].length, endSpace = /\s*$/.exec(endText)[0].length;
	    let endOff = endText.length - endSpace - close.length;
	    if (startText.slice(startSpace, startSpace + open.length) == open &&
	        endText.slice(endOff, endOff + close.length) == close) {
	        return { open: { pos: from + startSpace + open.length,
	                margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0 },
	            close: { pos: to - endSpace - close.length,
	                margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0 } };
	    }
	    return null;
	}
	// Performs toggle, comment and uncomment of block comments in
	// languages that support them.
	function changeBlockComment(option, ranges, state) {
	    let tokens = ranges.map(r => getConfig(state, r.from).block);
	    if (!tokens.every(c => c))
	        return null;
	    let comments = ranges.map((r, i) => findBlockComment(state, tokens[i], r.from, r.to));
	    if (option != 2 /* Uncomment */ && !comments.every(c => c)) {
	        let index = 0;
	        return state.changeByRange(range => {
	            let { open, close } = tokens[index++];
	            if (comments[index])
	                return { range };
	            let shift = open.length + 1;
	            return {
	                changes: [{ from: range.from, insert: open + " " }, { from: range.to, insert: " " + close }],
	                range: EditorSelection.range(range.anchor + shift, range.head + shift)
	            };
	        });
	    }
	    else if (option != 1 /* Comment */ && comments.some(c => c)) {
	        let changes = [];
	        for (let i = 0, comment; i < comments.length; i++)
	            if (comment = comments[i]) {
	                let token = tokens[i], { open, close } = comment;
	                changes.push({ from: open.pos - token.open.length, to: open.pos + open.margin }, { from: close.pos - close.margin, to: close.pos + token.close.length });
	            }
	        return { changes };
	    }
	    return null;
	}
	// Performs toggle, comment and uncomment of line comments.
	function changeLineComment(option, ranges, state) {
	    let lines = [];
	    let prevLine = -1;
	    for (let { from, to } of ranges) {
	        let startI = lines.length, minIndent = 1e9;
	        for (let pos = from; pos <= to;) {
	            let line = state.doc.lineAt(pos);
	            if (line.from > prevLine && (from == to || to > line.from)) {
	                prevLine = line.from;
	                let token = getConfig(state, pos).line;
	                if (!token)
	                    continue;
	                let indent = /^\s*/.exec(line.text)[0].length;
	                let empty = indent == line.length;
	                let comment = line.text.slice(indent, indent + token.length) == token ? indent : -1;
	                if (indent < line.text.length && indent < minIndent)
	                    minIndent = indent;
	                lines.push({ line, comment, token, indent, empty, single: false });
	            }
	            pos = line.to + 1;
	        }
	        if (minIndent < 1e9)
	            for (let i = startI; i < lines.length; i++)
	                if (lines[i].indent < lines[i].line.text.length)
	                    lines[i].indent = minIndent;
	        if (lines.length == startI + 1)
	            lines[startI].single = true;
	    }
	    if (option != 2 /* Uncomment */ && lines.some(l => l.comment < 0 && (!l.empty || l.single))) {
	        let changes = [];
	        for (let { line, token, indent, empty, single } of lines)
	            if (single || !empty)
	                changes.push({ from: line.from + indent, insert: token + " " });
	        let changeSet = state.changes(changes);
	        return { changes: changeSet, selection: state.selection.map(changeSet, 1) };
	    }
	    else if (option != 1 /* Comment */ && lines.some(l => l.comment >= 0)) {
	        let changes = [];
	        for (let { line, comment, token } of lines)
	            if (comment >= 0) {
	                let from = line.from + comment, to = from + token.length;
	                if (line.text[to - line.from] == " ")
	                    to++;
	                changes.push({ from, to });
	            }
	        return { changes };
	    }
	    return null;
	}

	// Don't compute precise column positions for line offsets above this
	// (since it could get expensive). Assume offset==column for them.
	const MaxOff = 2000;
	function rectangleFor(state, a, b) {
	    let startLine = Math.min(a.line, b.line), endLine = Math.max(a.line, b.line);
	    let ranges = [];
	    if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
	        let startOff = Math.min(a.off, b.off), endOff = Math.max(a.off, b.off);
	        for (let i = startLine; i <= endLine; i++) {
	            let line = state.doc.line(i);
	            if (line.length <= endOff)
	                ranges.push(EditorSelection.range(line.from + startOff, line.to + endOff));
	        }
	    }
	    else {
	        let startCol = Math.min(a.col, b.col), endCol = Math.max(a.col, b.col);
	        for (let i = startLine; i <= endLine; i++) {
	            let line = state.doc.line(i);
	            let start = findColumn(line.text, startCol, state.tabSize, true);
	            if (start > -1) {
	                let end = findColumn(line.text, endCol, state.tabSize);
	                ranges.push(EditorSelection.range(line.from + start, line.from + end));
	            }
	        }
	    }
	    return ranges;
	}
	function absoluteColumn(view, x) {
	    let ref = view.coordsAtPos(view.viewport.from);
	    return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
	}
	function getPos(view, event) {
	    let offset = view.posAtCoords({ x: event.clientX, y: event.clientY }, false);
	    let line = view.state.doc.lineAt(offset), off = offset - line.from;
	    let col = off > MaxOff ? -1
	        : off == line.length ? absoluteColumn(view, event.clientX)
	            : countColumn(line.text, view.state.tabSize, offset - line.from);
	    return { line: line.number, col, off };
	}
	function rectangleSelectionStyle(view, event) {
	    let start = getPos(view, event), startSel = view.state.selection;
	    if (!start)
	        return null;
	    return {
	        update(update) {
	            if (update.docChanged) {
	                let newStart = update.changes.mapPos(update.startState.doc.line(start.line).from);
	                let newLine = update.state.doc.lineAt(newStart);
	                start = { line: newLine.number, col: start.col, off: Math.min(start.off, newLine.length) };
	                startSel = startSel.map(update.changes);
	            }
	        },
	        get(event, _extend, multiple) {
	            let cur = getPos(view, event);
	            if (!cur)
	                return startSel;
	            let ranges = rectangleFor(view.state, start, cur);
	            if (!ranges.length)
	                return startSel;
	            if (multiple)
	                return EditorSelection.create(ranges.concat(startSel.ranges));
	            else
	                return EditorSelection.create(ranges);
	        }
	    };
	}
	/**
	Create an extension that enables rectangular selections. By
	default, it will react to left mouse drag with the Alt key held
	down. When such a selection occurs, the text within the rectangle
	that was dragged over will be selected, as one selection
	[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
	*/
	function rectangularSelection(options) {
	    let filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || (e => e.altKey && e.button == 0);
	    return EditorView.mouseSelectionStyle.of((view, event) => filter(event) ? rectangleSelectionStyle(view, event) : null);
	}

	let nextTagID = 0;
	/**
	Highlighting tags are markers that denote a highlighting category.
	They are [associated](https://codemirror.net/6/docs/ref/#highlight.styleTags) with parts of a syntax
	tree by a language mode, and then mapped to an actual CSS style by
	a [highlight style](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle).

	Because syntax tree node types and highlight styles have to be
	able to talk the same language, CodeMirror uses a mostly _closed_
	[vocabulary](https://codemirror.net/6/docs/ref/#highlight.tags) of syntax tags (as opposed to
	traditional open string-based systems, which make it hard for
	highlighting themes to cover all the tokens produced by the
	various languages).

	It _is_ possible to [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) your own
	highlighting tags for system-internal use (where you control both
	the language package and the highlighter), but such tags will not
	be picked up by regular highlighters (though you can derive them
	from standard tags to allow highlighters to fall back to those).
	*/
	class Tag {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The set of tags that match this tag, starting with this one
	    itself, sorted in order of decreasing specificity. @internal
	    */
	    set, 
	    /**
	    The base unmodified tag that this one is based on, if it's
	    modified @internal
	    */
	    base, 
	    /**
	    The modifiers applied to this.base @internal
	    */
	    modified) {
	        this.set = set;
	        this.base = base;
	        this.modified = modified;
	        /**
	        @internal
	        */
	        this.id = nextTagID++;
	    }
	    /**
	    Define a new tag. If `parent` is given, the tag is treated as a
	    sub-tag of that parent, and [highlight
	    styles](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle) that don't mention this tag
	    will try to fall back to the parent tag (or grandparent tag,
	    etc).
	    */
	    static define(parent) {
	        if (parent === null || parent === void 0 ? void 0 : parent.base)
	            throw new Error("Can not derive from a modified tag");
	        let tag = new Tag([], null, []);
	        tag.set.push(tag);
	        if (parent)
	            for (let t of parent.set)
	                tag.set.push(t);
	        return tag;
	    }
	    /**
	    Define a tag _modifier_, which is a function that, given a tag,
	    will return a tag that is a subtag of the original. Applying the
	    same modifier to a twice tag will return the same value (`m1(t1)
	    == m1(t1)`) and applying multiple modifiers will, regardless or
	    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
	    
	    When multiple modifiers are applied to a given base tag, each
	    smaller set of modifiers is registered as a parent, so that for
	    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
	    `m1(m3(t1)`, and so on.
	    */
	    static defineModifier() {
	        let mod = new Modifier;
	        return (tag) => {
	            if (tag.modified.indexOf(mod) > -1)
	                return tag;
	            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));
	        };
	    }
	}
	let nextModifierID = 0;
	class Modifier {
	    constructor() {
	        this.instances = [];
	        this.id = nextModifierID++;
	    }
	    static get(base, mods) {
	        if (!mods.length)
	            return base;
	        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));
	        if (exists)
	            return exists;
	        let set = [], tag = new Tag(set, base, mods);
	        for (let m of mods)
	            m.instances.push(tag);
	        let configs = permute(mods);
	        for (let parent of base.set)
	            for (let config of configs)
	                set.push(Modifier.get(parent, config));
	        return tag;
	    }
	}
	function sameArray(a, b) {
	    return a.length == b.length && a.every((x, i) => x == b[i]);
	}
	function permute(array) {
	    let result = [array];
	    for (let i = 0; i < array.length; i++) {
	        for (let a of permute(array.slice(0, i).concat(array.slice(i + 1))))
	            result.push(a);
	    }
	    return result;
	}
	/**
	This function is used to add a set of tags to a language syntax
	via
	[`LRParser.configure`](https://lezer.codemirror.net/docs/ref#lr.LRParser.configure).

	The argument object maps node selectors to [highlighting
	tags](https://codemirror.net/6/docs/ref/#highlight.Tag) or arrays of tags.

	Node selectors may hold one or more (space-separated) node paths.
	Such a path can be a [node
	name](https://lezer.codemirror.net/docs/ref#common.NodeType.name),
	or multiple node names (or `*` wildcards) separated by slash
	characters, as in `"Block/Declaration/VariableName"`. Such a path
	matches the final node but only if its direct parent nodes are the
	other nodes mentioned. A `*` in such a path matches any parent,
	but only a single level—wildcards that match multiple parents
	aren't supported, both for efficiency reasons and because Lezer
	trees make it rather hard to reason about what they would match.)

	A path can be ended with `/...` to indicate that the tag assigned
	to the node should also apply to all child nodes, even if they
	match their own style (by default, only the innermost style is
	used).

	When a path ends in `!`, as in `Attribute!`, no further matching
	happens for the node's child nodes, and the entire node gets the
	given style.

	In this notation, node names that contain `/`, `!`, `*`, or `...`
	must be quoted as JSON strings.

	For example:

	```javascript
	parser.withProps(
	  styleTags({
	    // Style Number and BigNumber nodes
	    "Number BigNumber": tags.number,
	    // Style Escape nodes whose parent is String
	    "String/Escape": tags.escape,
	    // Style anything inside Attributes nodes
	    "Attributes!": tags.meta,
	    // Add a style to all content inside Italic nodes
	    "Italic/...": tags.emphasis,
	    // Style InvalidString nodes as both `string` and `invalid`
	    "InvalidString": [tags.string, tags.invalid],
	    // Style the node named "/" as punctuation
	    '"/"': tags.punctuation
	  })
	)
	```
	*/
	function styleTags(spec) {
	    let byName = Object.create(null);
	    for (let prop in spec) {
	        let tags = spec[prop];
	        if (!Array.isArray(tags))
	            tags = [tags];
	        for (let part of prop.split(" "))
	            if (part) {
	                let pieces = [], mode = 2 /* Normal */, rest = part;
	                for (let pos = 0;;) {
	                    if (rest == "..." && pos > 0 && pos + 3 == part.length) {
	                        mode = 1 /* Inherit */;
	                        break;
	                    }
	                    let m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
	                    if (!m)
	                        throw new RangeError("Invalid path: " + part);
	                    pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
	                    pos += m[0].length;
	                    if (pos == part.length)
	                        break;
	                    let next = part[pos++];
	                    if (pos == part.length && next == "!") {
	                        mode = 0 /* Opaque */;
	                        break;
	                    }
	                    if (next != "/")
	                        throw new RangeError("Invalid path: " + part);
	                    rest = part.slice(pos);
	                }
	                let last = pieces.length - 1, inner = pieces[last];
	                if (!inner)
	                    throw new RangeError("Invalid path: " + part);
	                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);
	                byName[inner] = rule.sort(byName[inner]);
	            }
	    }
	    return ruleNodeProp.add(byName);
	}
	const ruleNodeProp = /*@__PURE__*/new NodeProp();
	const highlightStyle = /*@__PURE__*/Facet.define({
	    combine(stylings) { return stylings.length ? HighlightStyle.combinedMatch(stylings) : null; }
	});
	const fallbackHighlightStyle = /*@__PURE__*/Facet.define({
	    combine(values) { return values.length ? values[0].match : null; }
	});
	function getHighlightStyle(state) {
	    return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle);
	}
	class Rule {
	    constructor(tags, mode, context, next) {
	        this.tags = tags;
	        this.mode = mode;
	        this.context = context;
	        this.next = next;
	    }
	    sort(other) {
	        if (!other || other.depth < this.depth) {
	            this.next = other;
	            return this;
	        }
	        other.next = this.sort(other.next);
	        return other;
	    }
	    get depth() { return this.context ? this.context.length : 0; }
	}
	/**
	A highlight style associates CSS styles with higlighting
	[tags](https://codemirror.net/6/docs/ref/#highlight.Tag).
	*/
	class HighlightStyle {
	    constructor(spec, options) {
	        this.map = Object.create(null);
	        let modSpec;
	        function def(spec) {
	            let cls = StyleModule.newName();
	            (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
	            return cls;
	        }
	        this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;
	        for (let style of spec) {
	            let cls = (style.class || def(Object.assign({}, style, { tag: null }))) +
	                (this.all ? " " + this.all : "");
	            let tags = style.tag;
	            if (!Array.isArray(tags))
	                this.map[tags.id] = cls;
	            else
	                for (let tag of tags)
	                    this.map[tag.id] = cls;
	        }
	        this.module = modSpec ? new StyleModule(modSpec) : null;
	        this.scope = options.scope || null;
	        this.match = this.match.bind(this);
	        let ext = [treeHighlighter];
	        if (this.module)
	            ext.push(EditorView.styleModule.of(this.module));
	        this.extension = ext.concat(highlightStyle.of(this));
	        this.fallback = ext.concat(fallbackHighlightStyle.of(this));
	    }
	    /**
	    Returns the CSS class associated with the given tag, if any.
	    This method is bound to the instance by the constructor.
	    */
	    match(tag, scope) {
	        if (this.scope && scope != this.scope)
	            return null;
	        for (let t of tag.set) {
	            let match = this.map[t.id];
	            if (match !== undefined) {
	                if (t != tag)
	                    this.map[tag.id] = match;
	                return match;
	            }
	        }
	        return this.map[tag.id] = this.all;
	    }
	    /**
	    Combines an array of highlight styles into a single match
	    function that returns all of the classes assigned by the styles
	    for a given tag.
	    */
	    static combinedMatch(styles) {
	        if (styles.length == 1)
	            return styles[0].match;
	        let cache = styles.some(s => s.scope) ? undefined : Object.create(null);
	        return (tag, scope) => {
	            let cached = cache && cache[tag.id];
	            if (cached !== undefined)
	                return cached;
	            let result = null;
	            for (let style of styles) {
	                let value = style.match(tag, scope);
	                if (value)
	                    result = result ? result + " " + value : value;
	            }
	            if (cache)
	                cache[tag.id] = result;
	            return result;
	        };
	    }
	    /**
	    Create a highlighter style that associates the given styles to
	    the given tags. The spec must be objects that hold a style tag
	    or array of tags in their `tag` property, and either a single
	    `class` property providing a static CSS class (for highlighters
	    like [`classHighlightStyle`](https://codemirror.net/6/docs/ref/#highlight.classHighlightStyle)
	    that rely on external styling), or a
	    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
	    set of CSS properties (which define the styling for those tags).
	    
	    The CSS rules created for a highlighter will be emitted in the
	    order of the spec's properties. That means that for elements that
	    have multiple tags associated with them, styles defined further
	    down in the list will have a higher CSS precedence than styles
	    defined earlier.
	    */
	    static define(specs, options) {
	        return new HighlightStyle(specs, options || {});
	    }
	    /**
	    Returns the CSS classes (if any) that the highlight styles
	    active in the given state would assign to the given a style
	    [tag](https://codemirror.net/6/docs/ref/#highlight.Tag) and (optional) language
	    [scope](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle^define^options.scope).
	    */
	    static get(state, tag, scope) {
	        let style = getHighlightStyle(state);
	        return style && style(tag, scope || NodeType.none);
	    }
	}
	class TreeHighlighter {
	    constructor(view) {
	        this.markCache = Object.create(null);
	        this.tree = syntaxTree(view.state);
	        this.decorations = this.buildDeco(view, getHighlightStyle(view.state));
	    }
	    update(update) {
	        let tree = syntaxTree(update.state), style = getHighlightStyle(update.state);
	        let styleChange = style != update.startState.facet(highlightStyle);
	        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {
	            this.decorations = this.decorations.map(update.changes);
	        }
	        else if (tree != this.tree || update.viewportChanged || styleChange) {
	            this.tree = tree;
	            this.decorations = this.buildDeco(update.view, style);
	        }
	    }
	    buildDeco(view, match) {
	        if (!match || !this.tree.length)
	            return Decoration.none;
	        let builder = new RangeSetBuilder();
	        for (let { from, to } of view.visibleRanges) {
	            highlightTreeRange(this.tree, from, to, match, (from, to, style) => {
	                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));
	            });
	        }
	        return builder.finish();
	    }
	}
	// This extension installs a highlighter that highlights based on the
	// syntax tree and highlight style.
	const treeHighlighter = /*@__PURE__*/Prec.extend(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {
	    decorations: v => v.decorations
	}));
	const nodeStack = [""];
	class HighlightBuilder {
	    constructor(at, style, span) {
	        this.at = at;
	        this.style = style;
	        this.span = span;
	        this.class = "";
	    }
	    startSpan(at, cls) {
	        if (cls != this.class) {
	            this.flush(at);
	            if (at > this.at)
	                this.at = at;
	            this.class = cls;
	        }
	    }
	    flush(to) {
	        if (to > this.at && this.class)
	            this.span(this.at, to, this.class);
	    }
	    highlightRange(cursor, from, to, inheritedClass, depth, scope) {
	        let { type, from: start, to: end } = cursor;
	        if (start >= to || end <= from)
	            return;
	        nodeStack[depth] = type.name;
	        if (type.isTop)
	            scope = type;
	        let cls = inheritedClass;
	        let rule = type.prop(ruleNodeProp), opaque = false;
	        while (rule) {
	            if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
	                for (let tag of rule.tags) {
	                    let st = this.style(tag, scope);
	                    if (st) {
	                        if (cls)
	                            cls += " ";
	                        cls += st;
	                        if (rule.mode == 1 /* Inherit */)
	                            inheritedClass += (inheritedClass ? " " : "") + st;
	                        else if (rule.mode == 0 /* Opaque */)
	                            opaque = true;
	                    }
	                }
	                break;
	            }
	            rule = rule.next;
	        }
	        this.startSpan(cursor.from, cls);
	        if (opaque)
	            return;
	        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);
	        if (mounted && mounted.overlay) {
	            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);
	            let hasChild = cursor.firstChild();
	            for (let i = 0, pos = start;; i++) {
	                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;
	                let nextPos = next ? next.from + start : end;
	                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);
	                if (rangeFrom < rangeTo && hasChild) {
	                    while (cursor.from < rangeTo) {
	                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, depth + 1, scope);
	                        this.startSpan(Math.min(to, cursor.to), cls);
	                        if (cursor.to >= nextPos || !cursor.nextSibling())
	                            break;
	                    }
	                }
	                if (!next || nextPos > to)
	                    break;
	                pos = next.to + start;
	                if (pos > from) {
	                    this.highlightRange(inner.cursor, Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, depth, mounted.tree.type);
	                    this.startSpan(pos, cls);
	                }
	            }
	            if (hasChild)
	                cursor.parent();
	        }
	        else if (cursor.firstChild()) {
	            do {
	                if (cursor.to <= from)
	                    continue;
	                if (cursor.from >= to)
	                    break;
	                this.highlightRange(cursor, from, to, inheritedClass, depth + 1, scope);
	                this.startSpan(Math.min(to, cursor.to), cls);
	            } while (cursor.nextSibling());
	            cursor.parent();
	        }
	    }
	}
	function highlightTreeRange(tree, from, to, style, span) {
	    let builder = new HighlightBuilder(from, style, span);
	    builder.highlightRange(tree.cursor(), from, to, "", 0, tree.type);
	    builder.flush(to);
	}
	function matchContext(context, stack, depth) {
	    if (context.length > depth - 1)
	        return false;
	    for (let d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
	        let check = context[i];
	        if (check && check != stack[d])
	            return false;
	    }
	    return true;
	}
	const t = Tag.define;
	const comment = /*@__PURE__*/t(), name = /*@__PURE__*/t(), typeName = /*@__PURE__*/t(name), propertyName = /*@__PURE__*/t(name), literal = /*@__PURE__*/t(), string = /*@__PURE__*/t(literal), number = /*@__PURE__*/t(literal), content = /*@__PURE__*/t(), heading = /*@__PURE__*/t(content), keyword = /*@__PURE__*/t(), operator = /*@__PURE__*/t(), punctuation = /*@__PURE__*/t(), bracket = /*@__PURE__*/t(punctuation), meta = /*@__PURE__*/t();
	/**
	The default set of highlighting [tags](https://codemirror.net/6/docs/ref/#highlight.Tag^define) used
	by regular language packages and themes.

	This collection is heavily biased towards programming languages,
	and necessarily incomplete. A full ontology of syntactic
	constructs would fill a stack of books, and be impractical to
	write themes for. So try to make do with this set. If all else
	fails, [open an
	issue](https://github.com/codemirror/codemirror.next) to propose a
	new tag, or [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) a local custom tag for
	your use case.

	Note that it is not obligatory to always attach the most specific
	tag possible to an element—if your grammar can't easily
	distinguish a certain type of element (such as a local variable),
	it is okay to style it as its more general variant (a variable).

	For tags that extend some parent tag, the documentation links to
	the parent.
	*/
	const tags = {
	    /**
	    A comment.
	    */
	    comment,
	    /**
	    A line [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
	    */
	    lineComment: /*@__PURE__*/t(comment),
	    /**
	    A block [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
	    */
	    blockComment: /*@__PURE__*/t(comment),
	    /**
	    A documentation [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
	    */
	    docComment: /*@__PURE__*/t(comment),
	    /**
	    Any kind of identifier.
	    */
	    name,
	    /**
	    The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a variable.
	    */
	    variableName: /*@__PURE__*/t(name),
	    /**
	    A type [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
	    */
	    typeName: typeName,
	    /**
	    A tag name (subtag of [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)).
	    */
	    tagName: /*@__PURE__*/t(typeName),
	    /**
	    A property or field [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
	    */
	    propertyName: propertyName,
	    /**
	    An attribute name (subtag of [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)).
	    */
	    attributeName: /*@__PURE__*/t(propertyName),
	    /**
	    The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a class.
	    */
	    className: /*@__PURE__*/t(name),
	    /**
	    A label [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
	    */
	    labelName: /*@__PURE__*/t(name),
	    /**
	    A namespace [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
	    */
	    namespace: /*@__PURE__*/t(name),
	    /**
	    The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a macro.
	    */
	    macroName: /*@__PURE__*/t(name),
	    /**
	    A literal value.
	    */
	    literal,
	    /**
	    A string [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    string,
	    /**
	    A documentation [string](https://codemirror.net/6/docs/ref/#highlight.tags.string).
	    */
	    docString: /*@__PURE__*/t(string),
	    /**
	    A character literal (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
	    */
	    character: /*@__PURE__*/t(string),
	    /**
	    An attribute value (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
	    */
	    attributeValue: /*@__PURE__*/t(string),
	    /**
	    A number [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    number,
	    /**
	    An integer [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
	    */
	    integer: /*@__PURE__*/t(number),
	    /**
	    A floating-point [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
	    */
	    float: /*@__PURE__*/t(number),
	    /**
	    A boolean [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    bool: /*@__PURE__*/t(literal),
	    /**
	    Regular expression [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    regexp: /*@__PURE__*/t(literal),
	    /**
	    An escape [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal), for example a
	    backslash escape in a string.
	    */
	    escape: /*@__PURE__*/t(literal),
	    /**
	    A color [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    color: /*@__PURE__*/t(literal),
	    /**
	    A URL [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
	    */
	    url: /*@__PURE__*/t(literal),
	    /**
	    A language keyword.
	    */
	    keyword,
	    /**
	    The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for the self or this
	    object.
	    */
	    self: /*@__PURE__*/t(keyword),
	    /**
	    The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for null.
	    */
	    null: /*@__PURE__*/t(keyword),
	    /**
	    A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) denoting some atomic value.
	    */
	    atom: /*@__PURE__*/t(keyword),
	    /**
	    A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that represents a unit.
	    */
	    unit: /*@__PURE__*/t(keyword),
	    /**
	    A modifier [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
	    */
	    modifier: /*@__PURE__*/t(keyword),
	    /**
	    A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that acts as an operator.
	    */
	    operatorKeyword: /*@__PURE__*/t(keyword),
	    /**
	    A control-flow related [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
	    */
	    controlKeyword: /*@__PURE__*/t(keyword),
	    /**
	    A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that defines something.
	    */
	    definitionKeyword: /*@__PURE__*/t(keyword),
	    /**
	    An operator.
	    */
	    operator,
	    /**
	    An [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
	    */
	    derefOperator: /*@__PURE__*/t(operator),
	    /**
	    Arithmetic-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    arithmeticOperator: /*@__PURE__*/t(operator),
	    /**
	    Logical [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    logicOperator: /*@__PURE__*/t(operator),
	    /**
	    Bit [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    bitwiseOperator: /*@__PURE__*/t(operator),
	    /**
	    Comparison [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    compareOperator: /*@__PURE__*/t(operator),
	    /**
	    [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that updates its operand.
	    */
	    updateOperator: /*@__PURE__*/t(operator),
	    /**
	    [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
	    */
	    definitionOperator: /*@__PURE__*/t(operator),
	    /**
	    Type-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    typeOperator: /*@__PURE__*/t(operator),
	    /**
	    Control-flow [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
	    */
	    controlOperator: /*@__PURE__*/t(operator),
	    /**
	    Program or markup punctuation.
	    */
	    punctuation,
	    /**
	    [Punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation) that separates
	    things.
	    */
	    separator: /*@__PURE__*/t(punctuation),
	    /**
	    Bracket-style [punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation).
	    */
	    bracket,
	    /**
	    Angle [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `<` and `>`
	    tokens).
	    */
	    angleBracket: /*@__PURE__*/t(bracket),
	    /**
	    Square [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `[` and `]`
	    tokens).
	    */
	    squareBracket: /*@__PURE__*/t(bracket),
	    /**
	    Parentheses (usually `(` and `)` tokens). Subtag of
	    [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
	    */
	    paren: /*@__PURE__*/t(bracket),
	    /**
	    Braces (usually `{` and `}` tokens). Subtag of
	    [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
	    */
	    brace: /*@__PURE__*/t(bracket),
	    /**
	    Content, for example plain text in XML or markup documents.
	    */
	    content,
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a heading.
	    */
	    heading,
	    /**
	    A level 1 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading1: /*@__PURE__*/t(heading),
	    /**
	    A level 2 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading2: /*@__PURE__*/t(heading),
	    /**
	    A level 3 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading3: /*@__PURE__*/t(heading),
	    /**
	    A level 4 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading4: /*@__PURE__*/t(heading),
	    /**
	    A level 5 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading5: /*@__PURE__*/t(heading),
	    /**
	    A level 6 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
	    */
	    heading6: /*@__PURE__*/t(heading),
	    /**
	    A prose separator (such as a horizontal rule).
	    */
	    contentSeparator: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a list.
	    */
	    list: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a quote.
	    */
	    quote: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is emphasized.
	    */
	    emphasis: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled strong.
	    */
	    strong: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is part of a link.
	    */
	    link: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled as code or
	    monospace.
	    */
	    monospace: /*@__PURE__*/t(content),
	    /**
	    [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that has a strike-through
	    style.
	    */
	    strikethrough: /*@__PURE__*/t(content),
	    /**
	    Inserted text in a change-tracking format.
	    */
	    inserted: /*@__PURE__*/t(),
	    /**
	    Deleted text.
	    */
	    deleted: /*@__PURE__*/t(),
	    /**
	    Changed text.
	    */
	    changed: /*@__PURE__*/t(),
	    /**
	    An invalid or unsyntactic element.
	    */
	    invalid: /*@__PURE__*/t(),
	    /**
	    Metadata or meta-instruction.
	    */
	    meta,
	    /**
	    [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that applies to the entire
	    document.
	    */
	    documentMeta: /*@__PURE__*/t(meta),
	    /**
	    [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that annotates or adds
	    attributes to a given syntactic element.
	    */
	    annotation: /*@__PURE__*/t(meta),
	    /**
	    Processing instruction or preprocessor directive. Subtag of
	    [meta](https://codemirror.net/6/docs/ref/#highlight.tags.meta).
	    */
	    processingInstruction: /*@__PURE__*/t(meta),
	    /**
	    [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that a
	    given element is being defined. Expected to be used with the
	    various [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) tags.
	    */
	    definition: /*@__PURE__*/Tag.defineModifier(),
	    /**
	    [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that
	    something is constant. Mostly expected to be used with
	    [variable names](https://codemirror.net/6/docs/ref/#highlight.tags.variableName).
	    */
	    constant: /*@__PURE__*/Tag.defineModifier(),
	    /**
	    [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) used to indicate that
	    a [variable](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) or [property
	    name](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName) is being called or defined
	    as a function.
	    */
	    function: /*@__PURE__*/Tag.defineModifier(),
	    /**
	    [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that can be applied to
	    [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) to indicate that they belong to
	    the language's standard environment.
	    */
	    standard: /*@__PURE__*/Tag.defineModifier(),
	    /**
	    [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates a given
	    [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) is local to some scope.
	    */
	    local: /*@__PURE__*/Tag.defineModifier(),
	    /**
	    A generic variant [modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that
	    can be used to tag language-specific alternative variants of
	    some common tag. It is recommended for themes to define special
	    forms of at least the [string](https://codemirror.net/6/docs/ref/#highlight.tags.string) and
	    [variable name](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) tags, since those
	    come up a lot.
	    */
	    special: /*@__PURE__*/Tag.defineModifier()
	};
	/**
	A default highlight style (works well with light themes).
	*/
	const defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([
	    { tag: tags.link,
	        textDecoration: "underline" },
	    { tag: tags.heading,
	        textDecoration: "underline",
	        fontWeight: "bold" },
	    { tag: tags.emphasis,
	        fontStyle: "italic" },
	    { tag: tags.strong,
	        fontWeight: "bold" },
	    { tag: tags.strikethrough,
	        textDecoration: "line-through" },
	    { tag: tags.keyword,
	        color: "#708" },
	    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
	        color: "#219" },
	    { tag: [tags.literal, tags.inserted],
	        color: "#164" },
	    { tag: [tags.string, tags.deleted],
	        color: "#a11" },
	    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
	        color: "#e40" },
	    { tag: /*@__PURE__*/tags.definition(tags.variableName),
	        color: "#00f" },
	    { tag: /*@__PURE__*/tags.local(tags.variableName),
	        color: "#30a" },
	    { tag: [tags.typeName, tags.namespace],
	        color: "#085" },
	    { tag: tags.className,
	        color: "#167" },
	    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
	        color: "#256" },
	    { tag: /*@__PURE__*/tags.definition(tags.propertyName),
	        color: "#00c" },
	    { tag: tags.comment,
	        color: "#940" },
	    { tag: tags.meta,
	        color: "#7a757a" },
	    { tag: tags.invalid,
	        color: "#f00" }
	]);
	/**
	This is a highlight style that adds stable, predictable classes to
	tokens, for styling with external CSS.

	These tags are mapped to their name prefixed with `"cmt-"` (for
	example `"cmt-comment"`):

	* [`link`](https://codemirror.net/6/docs/ref/#highlight.tags.link)
	* [`heading`](https://codemirror.net/6/docs/ref/#highlight.tags.heading)
	* [`emphasis`](https://codemirror.net/6/docs/ref/#highlight.tags.emphasis)
	* [`strong`](https://codemirror.net/6/docs/ref/#highlight.tags.strong)
	* [`keyword`](https://codemirror.net/6/docs/ref/#highlight.tags.keyword)
	* [`atom`](https://codemirror.net/6/docs/ref/#highlight.tags.atom) [`bool`](https://codemirror.net/6/docs/ref/#highlight.tags.bool)
	* [`url`](https://codemirror.net/6/docs/ref/#highlight.tags.url)
	* [`labelName`](https://codemirror.net/6/docs/ref/#highlight.tags.labelName)
	* [`inserted`](https://codemirror.net/6/docs/ref/#highlight.tags.inserted)
	* [`deleted`](https://codemirror.net/6/docs/ref/#highlight.tags.deleted)
	* [`literal`](https://codemirror.net/6/docs/ref/#highlight.tags.literal)
	* [`string`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
	* [`number`](https://codemirror.net/6/docs/ref/#highlight.tags.number)
	* [`variableName`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
	* [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)
	* [`namespace`](https://codemirror.net/6/docs/ref/#highlight.tags.namespace)
	* [`macroName`](https://codemirror.net/6/docs/ref/#highlight.tags.macroName)
	* [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)
	* [`operator`](https://codemirror.net/6/docs/ref/#highlight.tags.operator)
	* [`comment`](https://codemirror.net/6/docs/ref/#highlight.tags.comment)
	* [`meta`](https://codemirror.net/6/docs/ref/#highlight.tags.meta)
	* [`punctuation`](https://codemirror.net/6/docs/ref/#highlight.tags.puncutation)
	* [`invalid`](https://codemirror.net/6/docs/ref/#highlight.tags.invalid)

	In addition, these mappings are provided:

	* [`regexp`](https://codemirror.net/6/docs/ref/#highlight.tags.regexp),
	  [`escape`](https://codemirror.net/6/docs/ref/#highlight.tags.escape), and
	  [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(string)`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
	  are mapped to `"cmt-string2"`
	* [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
	  to `"cmt-variableName2"`
	* [`local`](https://codemirror.net/6/docs/ref/#highlight.tags.local)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
	  to `"cmt-variableName cmt-local"`
	* [`definition`](https://codemirror.net/6/docs/ref/#highlight.tags.definition)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
	  to `"cmt-variableName cmt-definition"`
	*/
	/*@__PURE__*/HighlightStyle.define([
	    { tag: tags.link, class: "cmt-link" },
	    { tag: tags.heading, class: "cmt-heading" },
	    { tag: tags.emphasis, class: "cmt-emphasis" },
	    { tag: tags.strong, class: "cmt-strong" },
	    { tag: tags.keyword, class: "cmt-keyword" },
	    { tag: tags.atom, class: "cmt-atom" },
	    { tag: tags.bool, class: "cmt-bool" },
	    { tag: tags.url, class: "cmt-url" },
	    { tag: tags.labelName, class: "cmt-labelName" },
	    { tag: tags.inserted, class: "cmt-inserted" },
	    { tag: tags.deleted, class: "cmt-deleted" },
	    { tag: tags.literal, class: "cmt-literal" },
	    { tag: tags.string, class: "cmt-string" },
	    { tag: tags.number, class: "cmt-number" },
	    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)], class: "cmt-string2" },
	    { tag: tags.variableName, class: "cmt-variableName" },
	    { tag: /*@__PURE__*/tags.local(tags.variableName), class: "cmt-variableName cmt-local" },
	    { tag: /*@__PURE__*/tags.definition(tags.variableName), class: "cmt-variableName cmt-definition" },
	    { tag: /*@__PURE__*/tags.special(tags.variableName), class: "cmt-variableName2" },
	    { tag: tags.typeName, class: "cmt-typeName" },
	    { tag: tags.namespace, class: "cmt-namespace" },
	    { tag: tags.macroName, class: "cmt-macroName" },
	    { tag: tags.propertyName, class: "cmt-propertyName" },
	    { tag: tags.operator, class: "cmt-operator" },
	    { tag: tags.comment, class: "cmt-comment" },
	    { tag: tags.meta, class: "cmt-meta" },
	    { tag: tags.invalid, class: "cmt-invalid" },
	    { tag: tags.punctuation, class: "cmt-punctuation" }
	]);

	class SelectedDiagnostic {
	    constructor(from, to, diagnostic) {
	        this.from = from;
	        this.to = to;
	        this.diagnostic = diagnostic;
	    }
	}
	class LintState {
	    constructor(diagnostics, panel, selected) {
	        this.diagnostics = diagnostics;
	        this.panel = panel;
	        this.selected = selected;
	    }
	    static init(diagnostics, panel, state) {
	        let ranges = Decoration.set(diagnostics.map((d) => {
	            // For zero-length ranges or ranges covering only a line break, create a widget
	            return d.from == d.to || (d.from == d.to - 1 && state.doc.lineAt(d.from).to == d.from)
	                ? Decoration.widget({
	                    widget: new DiagnosticWidget(d),
	                    diagnostic: d
	                }).range(d.from)
	                : Decoration.mark({
	                    attributes: { class: "cm-lintRange cm-lintRange-" + d.severity },
	                    diagnostic: d
	                }).range(d.from, d.to);
	        }), true);
	        return new LintState(ranges, panel, findDiagnostic(ranges));
	    }
	}
	function findDiagnostic(diagnostics, diagnostic = null, after = 0) {
	    let found = null;
	    diagnostics.between(after, 1e9, (from, to, { spec }) => {
	        if (diagnostic && spec.diagnostic != diagnostic)
	            return;
	        found = new SelectedDiagnostic(from, to, spec.diagnostic);
	        return false;
	    });
	    return found;
	}
	function maybeEnableLint(state, effects, getState) {
	    return state.field(lintState, false) ? effects : effects.concat(StateEffect.appendConfig.of([
	        lintState.init(getState),
	        EditorView.decorations.compute([lintState], state => {
	            let { selected, panel } = state.field(lintState);
	            return !selected || !panel || selected.from == selected.to ? Decoration.none : Decoration.set([
	                activeMark.range(selected.from, selected.to)
	            ]);
	        }),
	        hoverTooltip(lintTooltip),
	        baseTheme
	    ]));
	}
	const setDiagnosticsEffect = /*@__PURE__*/StateEffect.define();
	const togglePanel = /*@__PURE__*/StateEffect.define();
	const movePanelSelection = /*@__PURE__*/StateEffect.define();
	const lintState = /*@__PURE__*/StateField.define({
	    create() {
	        return new LintState(Decoration.none, null, null);
	    },
	    update(value, tr) {
	        if (tr.docChanged) {
	            let mapped = value.diagnostics.map(tr.changes), selected = null;
	            if (value.selected) {
	                let selPos = tr.changes.mapPos(value.selected.from, 1);
	                selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
	            }
	            value = new LintState(mapped, value.panel, selected);
	        }
	        for (let effect of tr.effects) {
	            if (effect.is(setDiagnosticsEffect)) {
	                value = LintState.init(effect.value, value.panel, tr.state);
	            }
	            else if (effect.is(togglePanel)) {
	                value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
	            }
	            else if (effect.is(movePanelSelection)) {
	                value = new LintState(value.diagnostics, value.panel, effect.value);
	            }
	        }
	        return value;
	    },
	    provide: f => [showPanel.from(f, val => val.panel),
	        EditorView.decorations.from(f, s => s.diagnostics)]
	});
	const activeMark = /*@__PURE__*/Decoration.mark({ class: "cm-lintRange cm-lintRange-active" });
	function lintTooltip(view, pos, side) {
	    let { diagnostics } = view.state.field(lintState);
	    let found = [], stackStart = 2e8, stackEnd = 0;
	    diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), (from, to, { spec }) => {
	        if (pos >= from && pos <= to &&
	            (from == to || ((pos > from || side > 0) && (pos < to || side < 0)))) {
	            found.push(spec.diagnostic);
	            stackStart = Math.min(from, stackStart);
	            stackEnd = Math.max(to, stackEnd);
	        }
	    });
	    if (!found.length)
	        return null;
	    return {
	        pos: stackStart,
	        end: stackEnd,
	        above: view.state.doc.lineAt(stackStart).to < stackEnd,
	        create() {
	            return { dom: crelt("ul", { class: "cm-tooltip-lint" }, found.map(d => renderDiagnostic(view, d, false))) };
	        }
	    };
	}
	/**
	Command to open and focus the lint panel.
	*/
	const openLintPanel = (view) => {
	    let field = view.state.field(lintState, false);
	    if (!field || !field.panel)
	        view.dispatch({ effects: maybeEnableLint(view.state, [togglePanel.of(true)], () => LintState.init([], LintPanel.open, view.state)) });
	    let panel = getPanel(view, LintPanel.open);
	    if (panel)
	        panel.dom.querySelector(".cm-panel-lint ul").focus();
	    return true;
	};
	/**
	Command to close the lint panel, when open.
	*/
	const closeLintPanel = (view) => {
	    let field = view.state.field(lintState, false);
	    if (!field || !field.panel)
	        return false;
	    view.dispatch({ effects: togglePanel.of(false) });
	    return true;
	};
	/**
	Move the selection to the next diagnostic.
	*/
	const nextDiagnostic = (view) => {
	    let field = view.state.field(lintState, false);
	    if (!field)
	        return false;
	    let sel = view.state.selection.main, next = field.diagnostics.iter(sel.to + 1);
	    if (!next.value) {
	        next = field.diagnostics.iter(0);
	        if (!next.value || next.from == sel.from && next.to == sel.to)
	            return false;
	    }
	    view.dispatch({ selection: { anchor: next.from, head: next.to }, scrollIntoView: true });
	    return true;
	};
	/**
	A set of default key bindings for the lint functionality.

	- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
	- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
	*/
	const lintKeymap = [
	    { key: "Mod-Shift-m", run: openLintPanel },
	    { key: "F8", run: nextDiagnostic }
	];
	function assignKeys(actions) {
	    let assigned = [];
	    if (actions)
	        actions: for (let { name } of actions) {
	            for (let i = 0; i < name.length; i++) {
	                let ch = name[i];
	                if (/[a-zA-Z]/.test(ch) && !assigned.some(c => c.toLowerCase() == ch.toLowerCase())) {
	                    assigned.push(ch);
	                    continue actions;
	                }
	            }
	            assigned.push("");
	        }
	    return assigned;
	}
	function renderDiagnostic(view, diagnostic, inPanel) {
	    var _a;
	    let keys = inPanel ? assignKeys(diagnostic.actions) : [];
	    return crelt("li", { class: "cm-diagnostic cm-diagnostic-" + diagnostic.severity }, crelt("span", { class: "cm-diagnosticText" }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map((action, i) => {
	        let click = (e) => {
	            e.preventDefault();
	            let found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
	            if (found)
	                action.apply(view, found.from, found.to);
	        };
	        let { name } = action, keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
	        let nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex),
	            crelt("u", name.slice(keyIndex, keyIndex + 1)),
	            name.slice(keyIndex + 1)];
	        return crelt("button", {
	            type: "button",
	            class: "cm-diagnosticAction",
	            onclick: click,
	            onmousedown: click,
	            "aria-label": ` Action: ${name}${keyIndex < 0 ? "" : ` (access key "${keys[i]})"`}.`
	        }, nameElt);
	    }), diagnostic.source && crelt("div", { class: "cm-diagnosticSource" }, diagnostic.source));
	}
	class DiagnosticWidget extends WidgetType {
	    constructor(diagnostic) {
	        super();
	        this.diagnostic = diagnostic;
	    }
	    eq(other) { return other.diagnostic == this.diagnostic; }
	    toDOM() {
	        return crelt("span", { class: "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity });
	    }
	}
	class PanelItem {
	    constructor(view, diagnostic) {
	        this.diagnostic = diagnostic;
	        this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
	        this.dom = renderDiagnostic(view, diagnostic, true);
	        this.dom.id = this.id;
	        this.dom.setAttribute("role", "option");
	    }
	}
	class LintPanel {
	    constructor(view) {
	        this.view = view;
	        this.items = [];
	        let onkeydown = (event) => {
	            if (event.keyCode == 27) { // Escape
	                closeLintPanel(this.view);
	                this.view.focus();
	            }
	            else if (event.keyCode == 38 || event.keyCode == 33) { // ArrowUp, PageUp
	                this.moveSelection((this.selectedIndex - 1 + this.items.length) % this.items.length);
	            }
	            else if (event.keyCode == 40 || event.keyCode == 34) { // ArrowDown, PageDown
	                this.moveSelection((this.selectedIndex + 1) % this.items.length);
	            }
	            else if (event.keyCode == 36) { // Home
	                this.moveSelection(0);
	            }
	            else if (event.keyCode == 35) { // End
	                this.moveSelection(this.items.length - 1);
	            }
	            else if (event.keyCode == 13) { // Enter
	                this.view.focus();
	            }
	            else if (event.keyCode >= 65 && event.keyCode <= 90 && this.selectedIndex >= 0) { // A-Z
	                let { diagnostic } = this.items[this.selectedIndex], keys = assignKeys(diagnostic.actions);
	                for (let i = 0; i < keys.length; i++)
	                    if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
	                        let found = findDiagnostic(this.view.state.field(lintState).diagnostics, diagnostic);
	                        if (found)
	                            diagnostic.actions[i].apply(view, found.from, found.to);
	                    }
	            }
	            else {
	                return;
	            }
	            event.preventDefault();
	        };
	        let onclick = (event) => {
	            for (let i = 0; i < this.items.length; i++) {
	                if (this.items[i].dom.contains(event.target))
	                    this.moveSelection(i);
	            }
	        };
	        this.list = crelt("ul", {
	            tabIndex: 0,
	            role: "listbox",
	            "aria-label": this.view.state.phrase("Diagnostics"),
	            onkeydown,
	            onclick
	        });
	        this.dom = crelt("div", { class: "cm-panel-lint" }, this.list, crelt("button", {
	            type: "button",
	            name: "close",
	            "aria-label": this.view.state.phrase("close"),
	            onclick: () => closeLintPanel(this.view)
	        }, "×"));
	        this.update();
	    }
	    get selectedIndex() {
	        let selected = this.view.state.field(lintState).selected;
	        if (!selected)
	            return -1;
	        for (let i = 0; i < this.items.length; i++)
	            if (this.items[i].diagnostic == selected.diagnostic)
	                return i;
	        return -1;
	    }
	    update() {
	        let { diagnostics, selected } = this.view.state.field(lintState);
	        let i = 0, needsSync = false, newSelectedItem = null;
	        diagnostics.between(0, this.view.state.doc.length, (_start, _end, { spec }) => {
	            let found = -1, item;
	            for (let j = i; j < this.items.length; j++)
	                if (this.items[j].diagnostic == spec.diagnostic) {
	                    found = j;
	                    break;
	                }
	            if (found < 0) {
	                item = new PanelItem(this.view, spec.diagnostic);
	                this.items.splice(i, 0, item);
	                needsSync = true;
	            }
	            else {
	                item = this.items[found];
	                if (found > i) {
	                    this.items.splice(i, found - i);
	                    needsSync = true;
	                }
	            }
	            if (selected && item.diagnostic == selected.diagnostic) {
	                if (!item.dom.hasAttribute("aria-selected")) {
	                    item.dom.setAttribute("aria-selected", "true");
	                    newSelectedItem = item;
	                }
	            }
	            else if (item.dom.hasAttribute("aria-selected")) {
	                item.dom.removeAttribute("aria-selected");
	            }
	            i++;
	        });
	        while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
	            needsSync = true;
	            this.items.pop();
	        }
	        if (this.items.length == 0) {
	            this.items.push(new PanelItem(this.view, {
	                from: -1, to: -1,
	                severity: "info",
	                message: this.view.state.phrase("No diagnostics")
	            }));
	            needsSync = true;
	        }
	        if (newSelectedItem) {
	            this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
	            this.view.requestMeasure({
	                key: this,
	                read: () => ({ sel: newSelectedItem.dom.getBoundingClientRect(), panel: this.list.getBoundingClientRect() }),
	                write: ({ sel, panel }) => {
	                    if (sel.top < panel.top)
	                        this.list.scrollTop -= panel.top - sel.top;
	                    else if (sel.bottom > panel.bottom)
	                        this.list.scrollTop += sel.bottom - panel.bottom;
	                }
	            });
	        }
	        else if (this.selectedIndex < 0) {
	            this.list.removeAttribute("aria-activedescendant");
	        }
	        if (needsSync)
	            this.sync();
	    }
	    sync() {
	        let domPos = this.list.firstChild;
	        function rm() {
	            let prev = domPos;
	            domPos = prev.nextSibling;
	            prev.remove();
	        }
	        for (let item of this.items) {
	            if (item.dom.parentNode == this.list) {
	                while (domPos != item.dom)
	                    rm();
	                domPos = item.dom.nextSibling;
	            }
	            else {
	                this.list.insertBefore(item.dom, domPos);
	            }
	        }
	        while (domPos)
	            rm();
	    }
	    moveSelection(selectedIndex) {
	        if (this.selectedIndex < 0)
	            return;
	        let field = this.view.state.field(lintState);
	        let selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
	        if (!selection)
	            return;
	        this.view.dispatch({
	            selection: { anchor: selection.from, head: selection.to },
	            scrollIntoView: true,
	            effects: movePanelSelection.of(selection)
	        });
	    }
	    static open(view) { return new LintPanel(view); }
	}
	function underline(color) {
	    if (typeof btoa != "function")
	        return "none";
	    let svg = `<svg xmlns="http://www.w3.org/2000/svg" width="6" height="3">
    <path d="m0 3 l2 -2 l1 0 l2 2 l1 0" stroke="${color}" fill="none" stroke-width=".7"/>
  </svg>`;
	    return `url('data:image/svg+xml;base64,${btoa(svg)}')`;
	}
	const baseTheme = /*@__PURE__*/EditorView.baseTheme({
	    ".cm-diagnostic": {
	        padding: "3px 6px 3px 8px",
	        marginLeft: "-1px",
	        display: "block",
	        whiteSpace: "pre-wrap"
	    },
	    ".cm-diagnostic-error": { borderLeft: "5px solid #d11" },
	    ".cm-diagnostic-warning": { borderLeft: "5px solid orange" },
	    ".cm-diagnostic-info": { borderLeft: "5px solid #999" },
	    ".cm-diagnosticAction": {
	        font: "inherit",
	        border: "none",
	        padding: "2px 4px",
	        backgroundColor: "#444",
	        color: "white",
	        borderRadius: "3px",
	        marginLeft: "8px"
	    },
	    ".cm-diagnosticSource": {
	        fontSize: "70%",
	        opacity: .7
	    },
	    ".cm-lintRange": {
	        backgroundPosition: "left bottom",
	        backgroundRepeat: "repeat-x"
	    },
	    ".cm-lintRange-error": { backgroundImage: /*@__PURE__*/underline("#d11") },
	    ".cm-lintRange-warning": { backgroundImage: /*@__PURE__*/underline("orange") },
	    ".cm-lintRange-info": { backgroundImage: /*@__PURE__*/underline("#999") },
	    ".cm-lintRange-active": { backgroundColor: "#ffdd9980" },
	    ".cm-tooltip-lint": {
	        padding: 0,
	        margin: 0
	    },
	    ".cm-lintPoint": {
	        position: "relative",
	        "&:after": {
	            content: '""',
	            position: "absolute",
	            bottom: 0,
	            left: "-2px",
	            borderLeft: "3px solid transparent",
	            borderRight: "3px solid transparent",
	            borderBottom: "4px solid #d11"
	        }
	    },
	    ".cm-lintPoint-warning": {
	        "&:after": { borderBottomColor: "orange" }
	    },
	    ".cm-lintPoint-info": {
	        "&:after": { borderBottomColor: "#999" }
	    },
	    ".cm-panel.cm-panel-lint": {
	        position: "relative",
	        "& ul": {
	            maxHeight: "100px",
	            overflowY: "auto",
	            "& [aria-selected]": {
	                backgroundColor: "#ddd",
	                "& u": { textDecoration: "underline" }
	            },
	            "&:focus [aria-selected]": {
	                background_fallback: "#bdf",
	                backgroundColor: "Highlight",
	                color_fallback: "white",
	                color: "HighlightText"
	            },
	            "& u": { textDecoration: "none" },
	            padding: 0,
	            margin: 0
	        },
	        "& [name=close]": {
	            position: "absolute",
	            top: "0",
	            right: "2px",
	            background: "inherit",
	            border: "none",
	            font: "inherit",
	            padding: 0,
	            margin: 0
	        }
	    }
	});

	/**
	This is an extension value that just pulls together a whole lot of
	extensions that you might want in a basic editor. It is meant as a
	convenient helper to quickly set up CodeMirror without installing
	and importing a lot of packages.

	Specifically, it includes...

	 - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
	 - [line numbers](https://codemirror.net/6/docs/ref/#gutter.lineNumbers)
	 - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
	 - [the undo history](https://codemirror.net/6/docs/ref/#history.history)
	 - [a fold gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter)
	 - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
	 - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
	 - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
	 - [the default highlight style](https://codemirror.net/6/docs/ref/#highlight.defaultHighlightStyle) (as fallback)
	 - [bracket matching](https://codemirror.net/6/docs/ref/#matchbrackets.bracketMatching)
	 - [bracket closing](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets)
	 - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
	 - [rectangular selection](https://codemirror.net/6/docs/ref/#rectangular-selection.rectangularSelection)
	 - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
	 - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#gutter.highlightActiveLineGutter)
	 - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
	 - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
	 - [commenting](https://codemirror.net/6/docs/ref/#comment.commentKeymap)
	 - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

	(You'll probably want to add some language package to your setup
	too.)

	This package does not allow customization. The idea is that, once
	you decide you want to configure your editor more precisely, you
	take this package's source (which is just a bunch of imports and
	an array literal), copy it into your own code, and adjust it as
	desired.
	*/
	const basicSetup = [
	    /*@__PURE__*/lineNumbers(),
	    /*@__PURE__*/highlightActiveLineGutter(),
	    /*@__PURE__*/highlightSpecialChars(),
	    /*@__PURE__*/history(),
	    /*@__PURE__*/foldGutter(),
	    /*@__PURE__*/drawSelection(),
	    /*@__PURE__*/EditorState.allowMultipleSelections.of(true),
	    /*@__PURE__*/indentOnInput(),
	    defaultHighlightStyle.fallback,
	    /*@__PURE__*/bracketMatching(),
	    /*@__PURE__*/closeBrackets(),
	    /*@__PURE__*/autocompletion(),
	    /*@__PURE__*/rectangularSelection(),
	    /*@__PURE__*/highlightActiveLine(),
	    /*@__PURE__*/highlightSelectionMatches(),
	    /*@__PURE__*/keymap.of([
	        ...closeBracketsKeymap,
	        ...defaultKeymap,
	        ...searchKeymap,
	        ...historyKeymap,
	        ...foldKeymap,
	        ...commentKeymap,
	        ...completionKeymap,
	        ...lintKeymap
	    ])
	];

	// Counts the column offset in a string, taking tabs into account.
	// Used mostly to find indentation.
	function countCol(string, end, tabSize, startIndex = 0, startValue = 0) {
	    if (end == null) {
	        end = string.search(/[^\s\u00a0]/);
	        if (end == -1)
	            end = string.length;
	    }
	    let n = startValue;
	    for (let i = startIndex; i < end; i++) {
	        if (string.charCodeAt(i) == 9)
	            n += tabSize - (n % tabSize);
	        else
	            n++;
	    }
	    return n;
	}
	/**
	Encapsulates a single line of input. Given to stream syntax code,
	which uses it to tokenize the content.
	*/
	class StringStream {
	    /**
	    @internal
	    */
	    constructor(
	    /**
	    The line.
	    */
	    string, tabSize, 
	    /**
	    The current indent unit size.
	    */
	    indentUnit) {
	        this.string = string;
	        this.tabSize = tabSize;
	        this.indentUnit = indentUnit;
	        /**
	        The current position on the line.
	        */
	        this.pos = 0;
	        /**
	        The start position of the current token.
	        */
	        this.start = 0;
	        this.lastColumnPos = 0;
	        this.lastColumnValue = 0;
	    }
	    /**
	    True if we are at the end of the line.
	    */
	    eol() { return this.pos >= this.string.length; }
	    /**
	    True if we are at the start of the line.
	    */
	    sol() { return this.pos == 0; }
	    /**
	    Get the next code unit after the current position, or undefined
	    if we're at the end of the line.
	    */
	    peek() { return this.string.charAt(this.pos) || undefined; }
	    /**
	    Read the next code unit and advance `this.pos`.
	    */
	    next() {
	        if (this.pos < this.string.length)
	            return this.string.charAt(this.pos++);
	    }
	    /**
	    Match the next character against the given string, regular
	    expression, or predicate. Consume and return it if it matches.
	    */
	    eat(match) {
	        let ch = this.string.charAt(this.pos);
	        let ok;
	        if (typeof match == "string")
	            ok = ch == match;
	        else
	            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));
	        if (ok) {
	            ++this.pos;
	            return ch;
	        }
	    }
	    /**
	    Continue matching characters that match the given string,
	    regular expression, or predicate function. Return true if any
	    characters were consumed.
	    */
	    eatWhile(match) {
	        let start = this.pos;
	        while (this.eat(match)) { }
	        return this.pos > start;
	    }
	    /**
	    Consume whitespace ahead of `this.pos`. Return true if any was
	    found.
	    */
	    eatSpace() {
	        let start = this.pos;
	        while (/[\s\u00a0]/.test(this.string.charAt(this.pos)))
	            ++this.pos;
	        return this.pos > start;
	    }
	    /**
	    Move to the end of the line.
	    */
	    skipToEnd() { this.pos = this.string.length; }
	    /**
	    Move to directly before the given character, if found on the
	    current line.
	    */
	    skipTo(ch) {
	        let found = this.string.indexOf(ch, this.pos);
	        if (found > -1) {
	            this.pos = found;
	            return true;
	        }
	    }
	    /**
	    Move back `n` characters.
	    */
	    backUp(n) { this.pos -= n; }
	    /**
	    Get the column position at `this.pos`.
	    */
	    column() {
	        if (this.lastColumnPos < this.start) {
	            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);
	            this.lastColumnPos = this.start;
	        }
	        return this.lastColumnValue;
	    }
	    /**
	    Get the indentation column of the current line.
	    */
	    indentation() {
	        return countCol(this.string, null, this.tabSize);
	    }
	    /**
	    Match the input against the given string or regular expression
	    (which should start with a `^`). Return true or the regexp match
	    if it matches.
	    
	    Unless `consume` is set to `false`, this will move `this.pos`
	    past the matched text.
	    
	    When matching a string `caseInsensitive` can be set to true to
	    make the match case-insensitive.
	    */
	    match(pattern, consume, caseInsensitive) {
	        if (typeof pattern == "string") {
	            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;
	            let substr = this.string.substr(this.pos, pattern.length);
	            if (cased(substr) == cased(pattern)) {
	                if (consume !== false)
	                    this.pos += pattern.length;
	                return true;
	            }
	            else
	                return null;
	        }
	        else {
	            let match = this.string.slice(this.pos).match(pattern);
	            if (match && match.index > 0)
	                return null;
	            if (match && consume !== false)
	                this.pos += match[0].length;
	            return match;
	        }
	    }
	    /**
	    Get the current token.
	    */
	    current() { return this.string.slice(this.start, this.pos); }
	}

	function fullParser(spec) {
	    return {
	        token: spec.token,
	        blankLine: spec.blankLine || (() => { }),
	        startState: spec.startState || (() => true),
	        copyState: spec.copyState || defaultCopyState,
	        indent: spec.indent || (() => null),
	        languageData: spec.languageData || {}
	    };
	}
	function defaultCopyState(state) {
	    if (typeof state != "object")
	        return state;
	    let newState = {};
	    for (let prop in state) {
	        let val = state[prop];
	        newState[prop] = (val instanceof Array ? val.slice() : val);
	    }
	    return newState;
	}
	/**
	A [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a streaming
	parser.
	*/
	class StreamLanguage extends Language {
	    constructor(parser) {
	        let data = defineLanguageFacet(parser.languageData);
	        let p = fullParser(parser), self;
	        let impl = new class extends Parser {
	            createParse(input, fragments, ranges) {
	                return new Parse(self, input, fragments, ranges);
	            }
	        };
	        super(data, impl, docID(data), [indentService.of((cx, pos) => this.getIndent(cx, pos))]);
	        self = this;
	        this.streamParser = p;
	        this.stateAfter = new NodeProp({ perNode: true });
	    }
	    static define(spec) { return new StreamLanguage(spec); }
	    getIndent(cx, pos) {
	        let tree = syntaxTree(cx.state), at = tree.resolve(pos);
	        while (at && at.type != this.topNode)
	            at = at.parent;
	        if (!at)
	            return null;
	        let start = findState(this, tree, 0, at.from, pos), statePos, state;
	        if (start) {
	            state = start.state;
	            statePos = start.pos + 1;
	        }
	        else {
	            state = this.streamParser.startState(cx.unit);
	            statePos = 0;
	        }
	        if (pos - statePos > 10000 /* MaxIndentScanDist */)
	            return null;
	        while (statePos < pos) {
	            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);
	            if (line.length) {
	                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit);
	                while (stream.pos < end - line.from)
	                    readToken(this.streamParser.token, stream, state);
	            }
	            else {
	                this.streamParser.blankLine(state, cx.unit);
	            }
	            if (end == pos)
	                break;
	            statePos = line.to + 1;
	        }
	        let { text } = cx.state.doc.lineAt(pos);
	        return this.streamParser.indent(state, /^\s*(.*)/.exec(text)[1], cx);
	    }
	    get allowsNesting() { return false; }
	}
	function findState(lang, tree, off, startPos, before) {
	    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);
	    if (state)
	        return { state: lang.streamParser.copyState(state), pos: off + tree.length };
	    for (let i = tree.children.length - 1; i >= 0; i--) {
	        let child = tree.children[i], pos = off + tree.positions[i];
	        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);
	        if (found)
	            return found;
	    }
	    return null;
	}
	function cutTree(lang, tree, from, to, inside) {
	    if (inside && from <= 0 && to >= tree.length)
	        return tree;
	    if (!inside && tree.type == lang.topNode)
	        inside = true;
	    for (let i = tree.children.length - 1; i >= 0; i--) {
	        let pos = tree.positions[i] + from, child = tree.children[i], inner;
	        if (pos < to && child instanceof Tree) {
	            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))
	                break;
	            return !inside ? inner
	                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);
	        }
	    }
	    return null;
	}
	function findStartInFragments(lang, fragments, startPos, editorState) {
	    for (let f of fragments) {
	        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);
	        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;
	        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))
	            return { state: found.state, tree };
	    }
	    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };
	}
	class Parse {
	    constructor(lang, input, fragments, ranges) {
	        this.lang = lang;
	        this.input = input;
	        this.fragments = fragments;
	        this.ranges = ranges;
	        this.stoppedAt = null;
	        this.chunks = [];
	        this.chunkPos = [];
	        this.chunk = [];
	        this.chunkReused = undefined;
	        this.rangeIndex = 0;
	        this.to = ranges[ranges.length - 1].to;
	        let context = ParseContext.get(), from = ranges[0].from;
	        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);
	        this.state = state;
	        this.parsedPos = this.chunkStart = from + tree.length;
	        if (tree.length) {
	            this.chunks.push(tree);
	            this.chunkPos.push(0);
	        }
	        if (context && this.parsedPos < context.viewport.from - 100000 /* MaxDistanceBeforeViewport */) {
	            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));
	            context.skipUntilInView(this.parsedPos, context.viewport.from);
	            this.parsedPos = context.viewport.from;
	        }
	    }
	    advance() {
	        let context = ParseContext.get();
	        let parseEnd = this.stoppedAt == null ? this.to : this.stoppedAt;
	        let end = Math.min(parseEnd, this.chunkStart + 2048 /* ChunkSize */);
	        if (context)
	            end = Math.min(end, context.viewport.to);
	        while (this.parsedPos < end)
	            this.parseLine(context);
	        if (this.chunkStart < this.parsedPos)
	            this.finishChunk();
	        if (this.parsedPos >= parseEnd)
	            return this.finish();
	        if (context && this.parsedPos >= context.viewport.to) {
	            context.skipUntilInView(this.parsedPos, parseEnd);
	            return this.finish();
	        }
	        return null;
	    }
	    stopAt(pos) {
	        this.stoppedAt = pos;
	    }
	    lineAfter(pos) {
	        let chunk = this.input.chunk(pos);
	        if (!this.input.lineChunks) {
	            let eol = chunk.indexOf("\n");
	            if (eol > -1)
	                chunk = chunk.slice(0, eol);
	        }
	        else if (chunk == "\n") {
	            chunk = "";
	        }
	        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);
	    }
	    nextLine() {
	        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;
	        for (let index = this.rangeIndex;;) {
	            let rangeEnd = this.ranges[index].to;
	            if (rangeEnd >= end)
	                break;
	            line = line.slice(0, rangeEnd - (end - line.length));
	            index++;
	            if (index == this.ranges.length)
	                break;
	            let rangeStart = this.ranges[index].from;
	            let after = this.lineAfter(rangeStart);
	            line += after;
	            end = rangeStart + after.length;
	        }
	        return { line, end };
	    }
	    skipGapsTo(pos, offset, side) {
	        for (;;) {
	            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;
	            if (side > 0 ? end > offPos : end >= offPos)
	                break;
	            let start = this.ranges[++this.rangeIndex].from;
	            offset += start - end;
	        }
	        return offset;
	    }
	    emitToken(id, from, to, size, offset) {
	        if (this.ranges.length > 1) {
	            offset = this.skipGapsTo(from, offset, 1);
	            from += offset;
	            let len0 = this.chunk.length;
	            offset = this.skipGapsTo(to, offset, -1);
	            to += offset;
	            size += this.chunk.length - len0;
	        }
	        this.chunk.push(id, from, to, size);
	        return offset;
	    }
	    parseLine(context) {
	        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;
	        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);
	        if (stream.eol()) {
	            streamParser.blankLine(this.state, stream.indentUnit);
	        }
	        else {
	            while (!stream.eol()) {
	                let token = readToken(streamParser.token, stream, this.state);
	                if (token)
	                    offset = this.emitToken(tokenID(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);
	                if (stream.start > 10000 /* MaxLineLength */)
	                    break;
	            }
	        }
	        this.parsedPos = end;
	        if (this.parsedPos < this.to)
	            this.parsedPos++;
	    }
	    finishChunk() {
	        let tree = Tree.build({
	            buffer: this.chunk,
	            start: this.chunkStart,
	            length: this.parsedPos - this.chunkStart,
	            nodeSet,
	            topID: 0,
	            maxBufferLength: 2048 /* ChunkSize */,
	            reused: this.chunkReused
	        });
	        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);
	        this.chunks.push(tree);
	        this.chunkPos.push(this.chunkStart - this.ranges[0].from);
	        this.chunk = [];
	        this.chunkReused = undefined;
	        this.chunkStart = this.parsedPos;
	    }
	    finish() {
	        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();
	    }
	}
	function readToken(token, stream, state) {
	    stream.start = stream.pos;
	    for (let i = 0; i < 10; i++) {
	        let result = token(stream, state);
	        if (stream.pos > stream.start)
	            return result;
	    }
	    throw new Error("Stream parser failed to advance stream.");
	}
	const tokenTable = /*@__PURE__*/Object.create(null);
	const typeArray = [NodeType.none];
	const nodeSet = /*@__PURE__*/new NodeSet(typeArray);
	const warned = [];
	function tokenID(tag) {
	    return !tag ? 0 : tokenTable[tag] || (tokenTable[tag] = createTokenType(tag));
	}
	for (let [legacyName, name] of [
	    ["variable", "variableName"],
	    ["variable-2", "variableName.special"],
	    ["string-2", "string.special"],
	    ["def", "variableName.definition"],
	    ["tag", "typeName"],
	    ["attribute", "propertyName"],
	    ["type", "typeName"],
	    ["builtin", "variableName.standard"],
	    ["qualifier", "modifier"],
	    ["error", "invalid"],
	    ["header", "heading"],
	    ["property", "propertyName"]
	])
	    tokenTable[legacyName] = /*@__PURE__*/tokenID(name);
	function warnForPart(part, msg) {
	    if (warned.indexOf(part) > -1)
	        return;
	    warned.push(part);
	    console.warn(msg);
	}
	function createTokenType(tagStr) {
	    let tag = null;
	    for (let part of tagStr.split(".")) {
	        let value = tags[part];
	        if (!value) {
	            warnForPart(part, `Unknown highlighting tag ${part}`);
	        }
	        else if (typeof value == "function") {
	            if (!tag)
	                warnForPart(part, `Modifier ${part} used at start of tag`);
	            else
	                tag = value(tag);
	        }
	        else {
	            if (tag)
	                warnForPart(part, `Tag ${part} used as modifier`);
	            else
	                tag = value;
	        }
	    }
	    if (!tag)
	        return 0;
	    let name = tagStr.replace(/ /g, "_"), type = NodeType.define({
	        id: typeArray.length,
	        name,
	        props: [styleTags({ [name]: tag })]
	    });
	    typeArray.push(type);
	    return type.id;
	}
	function docID(data) {
	    let type = NodeType.define({ id: typeArray.length, name: "Document", props: [languageDataProp.add(() => data)] });
	    typeArray.push(type);
	    return type;
	}

	function mkGas(arch) {
	  // If an architecture is specified, its initialization function may
	  // populate this array with custom parsing functions which will be
	  // tried in the event that the standard functions do not find a match.
	  var custom = [];

	  // The symbol used to start a line comment changes based on the target
	  // architecture.
	  // If no architecture is pased in "parserConfig" then only multiline
	  // comments will have syntax support.
	  var lineCommentStartSymbol = "";

	  // These directives are architecture independent.
	  // Machine specific directives should go in their respective
	  // architecture initialization function.
	  // Reference:
	  // http://sourceware.org/binutils/docs/as/Pseudo-Ops.html#Pseudo-Ops
	  var directives = {
	    ".abort" : "builtin",
	    ".align" : "builtin",
	    ".altmacro" : "builtin",
	    ".ascii" : "builtin",
	    ".asciz" : "builtin",
	    ".balign" : "builtin",
	    ".balignw" : "builtin",
	    ".balignl" : "builtin",
	    ".bundle_align_mode" : "builtin",
	    ".bundle_lock" : "builtin",
	    ".bundle_unlock" : "builtin",
	    ".byte" : "builtin",
	    ".cfi_startproc" : "builtin",
	    ".comm" : "builtin",
	    ".data" : "builtin",
	    ".def" : "builtin",
	    ".desc" : "builtin",
	    ".dim" : "builtin",
	    ".double" : "builtin",
	    ".eject" : "builtin",
	    ".else" : "builtin",
	    ".elseif" : "builtin",
	    ".end" : "builtin",
	    ".endef" : "builtin",
	    ".endfunc" : "builtin",
	    ".endif" : "builtin",
	    ".equ" : "builtin",
	    ".equiv" : "builtin",
	    ".eqv" : "builtin",
	    ".err" : "builtin",
	    ".error" : "builtin",
	    ".exitm" : "builtin",
	    ".extern" : "builtin",
	    ".fail" : "builtin",
	    ".file" : "builtin",
	    ".fill" : "builtin",
	    ".float" : "builtin",
	    ".func" : "builtin",
	    ".global" : "builtin",
	    ".gnu_attribute" : "builtin",
	    ".hidden" : "builtin",
	    ".hword" : "builtin",
	    ".ident" : "builtin",
	    ".if" : "builtin",
	    ".incbin" : "builtin",
	    ".include" : "builtin",
	    ".int" : "builtin",
	    ".internal" : "builtin",
	    ".irp" : "builtin",
	    ".irpc" : "builtin",
	    ".lcomm" : "builtin",
	    ".lflags" : "builtin",
	    ".line" : "builtin",
	    ".linkonce" : "builtin",
	    ".list" : "builtin",
	    ".ln" : "builtin",
	    ".loc" : "builtin",
	    ".loc_mark_labels" : "builtin",
	    ".local" : "builtin",
	    ".long" : "builtin",
	    ".macro" : "builtin",
	    ".mri" : "builtin",
	    ".noaltmacro" : "builtin",
	    ".nolist" : "builtin",
	    ".octa" : "builtin",
	    ".offset" : "builtin",
	    ".org" : "builtin",
	    ".p2align" : "builtin",
	    ".popsection" : "builtin",
	    ".previous" : "builtin",
	    ".print" : "builtin",
	    ".protected" : "builtin",
	    ".psize" : "builtin",
	    ".purgem" : "builtin",
	    ".pushsection" : "builtin",
	    ".quad" : "builtin",
	    ".reloc" : "builtin",
	    ".rept" : "builtin",
	    ".sbttl" : "builtin",
	    ".scl" : "builtin",
	    ".section" : "builtin",
	    ".set" : "builtin",
	    ".short" : "builtin",
	    ".single" : "builtin",
	    ".size" : "builtin",
	    ".skip" : "builtin",
	    ".sleb128" : "builtin",
	    ".space" : "builtin",
	    ".stab" : "builtin",
	    ".string" : "builtin",
	    ".struct" : "builtin",
	    ".subsection" : "builtin",
	    ".symver" : "builtin",
	    ".tag" : "builtin",
	    ".text" : "builtin",
	    ".title" : "builtin",
	    ".type" : "builtin",
	    ".uleb128" : "builtin",
	    ".val" : "builtin",
	    ".version" : "builtin",
	    ".vtable_entry" : "builtin",
	    ".vtable_inherit" : "builtin",
	    ".warning" : "builtin",
	    ".weak" : "builtin",
	    ".weakref" : "builtin",
	    ".word" : "builtin"
	  };

	  var registers = {};

	  function x86() {
	    lineCommentStartSymbol = "#";

	    registers.ax  = "variable";
	    registers.eax = "variableName.special";
	    registers.rax = "variableName.special";

	    registers.bx  = "variable";
	    registers.ebx = "variableName.special";
	    registers.rbx = "variableName.special";

	    registers.cx  = "variable";
	    registers.ecx = "variableName.special";
	    registers.rcx = "variableName.special";

	    registers.dx  = "variable";
	    registers.edx = "variableName.special";
	    registers.rdx = "variableName.special";

	    registers.si  = "variable";
	    registers.esi = "variableName.special";
	    registers.rsi = "variableName.special";

	    registers.di  = "variable";
	    registers.edi = "variableName.special";
	    registers.rdi = "variableName.special";

	    registers.sp  = "variable";
	    registers.esp = "variableName.special";
	    registers.rsp = "variableName.special";

	    registers.bp  = "variable";
	    registers.ebp = "variableName.special";
	    registers.rbp = "variableName.special";

	    registers.ip  = "variable";
	    registers.eip = "variableName.special";
	    registers.rip = "variableName.special";

	    registers.cs  = "keyword";
	    registers.ds  = "keyword";
	    registers.ss  = "keyword";
	    registers.es  = "keyword";
	    registers.fs  = "keyword";
	    registers.gs  = "keyword";
	  }

	  function armv6() {
	    // Reference:
	    // http://infocenter.arm.com/help/topic/com.arm.doc.qrc0001l/QRC0001_UAL.pdf
	    // http://infocenter.arm.com/help/topic/com.arm.doc.ddi0301h/DDI0301H_arm1176jzfs_r0p7_trm.pdf
	    lineCommentStartSymbol = "@";
	    directives.syntax = "builtin";

	    registers.r0  = "variable";
	    registers.r1  = "variable";
	    registers.r2  = "variable";
	    registers.r3  = "variable";
	    registers.r4  = "variable";
	    registers.r5  = "variable";
	    registers.r6  = "variable";
	    registers.r7  = "variable";
	    registers.r8  = "variable";
	    registers.r9  = "variable";
	    registers.r10 = "variable";
	    registers.r11 = "variable";
	    registers.r12 = "variable";

	    registers.sp  = "variableName.special";
	    registers.lr  = "variableName.special";
	    registers.pc  = "variableName.special";
	    registers.r13 = registers.sp;
	    registers.r14 = registers.lr;
	    registers.r15 = registers.pc;

	    custom.push(function(ch, stream) {
	      if (ch === '#') {
	        stream.eatWhile(/\w/);
	        return "number";
	      }
	    });
	  }

	  if (arch === "x86") {
	    x86();
	  } else if (arch === "arm" || arch === "armv6") {
	    armv6();
	  }

	  function nextUntilUnescaped(stream, end) {
	    var escaped = false, next;
	    while ((next = stream.next()) != null) {
	      if (next === end && !escaped) {
	        return false;
	      }
	      escaped = !escaped && next === "\\";
	    }
	    return escaped;
	  }

	  function clikeComment(stream, state) {
	    var maybeEnd = false, ch;
	    while ((ch = stream.next()) != null) {
	      if (ch === "/" && maybeEnd) {
	        state.tokenize = null;
	        break;
	      }
	      maybeEnd = (ch === "*");
	    }
	    return "comment";
	  }

	  return {
	    startState: function() {
	      return {
	        tokenize: null
	      };
	    },

	    token: function(stream, state) {
	      if (state.tokenize) {
	        return state.tokenize(stream, state);
	      }

	      if (stream.eatSpace()) {
	        return null;
	      }

	      var style, cur, ch = stream.next();

	      if (ch === "/") {
	        if (stream.eat("*")) {
	          state.tokenize = clikeComment;
	          return clikeComment(stream, state);
	        }
	      }

	      if (ch === lineCommentStartSymbol) {
	        stream.skipToEnd();
	        return "comment";
	      }

	      if (ch === '"') {
	        nextUntilUnescaped(stream, '"');
	        return "string";
	      }

	      if (ch === '.') {
	        stream.eatWhile(/\w/);
	        cur = stream.current().toLowerCase();
	        style = directives[cur];
	        return style || null;
	      }

	      if (ch === '=') {
	        stream.eatWhile(/\w/);
	        return "tag";
	      }

	      if (ch === '{') {
	        return "bracket";
	      }

	      if (ch === '}') {
	        return "bracket";
	      }

	      if (/\d/.test(ch)) {
	        if (ch === "0" && stream.eat("x")) {
	          stream.eatWhile(/[0-9a-fA-F]/);
	          return "number";
	        }
	        stream.eatWhile(/\d/);
	        return "number";
	      }

	      if (/\w/.test(ch)) {
	        stream.eatWhile(/\w/);
	        if (stream.eat(":")) {
	          return 'tag';
	        }
	        cur = stream.current().toLowerCase();
	        style = registers[cur];
	        return style || null;
	      }

	      for (var i = 0; i < custom.length; i++) {
	        style = custom[i](ch, stream, state);
	        if (style) {
	          return style;
	        }
	      }
	    },

	    languageData: {
	      commentTokens: {
	        line: lineCommentStartSymbol,
	        block: {open: "/*", close: "*/"}
	      }
	    }
	  };
	}
	const gas = mkGas("x86");
	mkGas("arm");

	class Display extends Array {
	  constructor(size) {
	    super(size);
	    this.palette = new Array(
	      "#000000",
	      "#ffffff",
	      "#880000",
	      "#aaffee",
	      "#cc44cc",
	      "#00cc55",
	      "#0000aa",
	      "#eeee77",
	      "#dd8855",
	      "#664400",
	      "#ff7777",
	      "#333333",
	      "#777777",
	      "#aaff66",
	      "#0088ff",
	      "#bbbbbb"
	    );

	    this.#createScreen();
	    this.#linkWithScreen();
	  }

	  #createScreen() {
	    let html = '<table class="screen">';
	    for (let y = 0; y < 32; y++) {
	      html += "<tr>";
	      for (let x = 0; x < 32; x++) {
	        html += '<td class="screen" id="x' + x + "y" + y + '"></td>';
	      }
	      html += "</tr>";
	    }
	    html += "</table>";
	    $("#screen").html(html);
	  }

	  #linkWithScreen() {
	    for (let y = 0; y < 32; y++) {
	      for (let x = 0; x < 32; x++) {
	        let pixelId = "x" + x + "y" + y;
	        this[y * 32 + x] = $("#" + pixelId);
	      }
	    }
	  }

	  reset() {
	    for (let y = 0; y < 32; y++) {
	      for (let x = 0; x < 32; x++) {
	        this[y * 32 + x].css("background", "#000000");
	      }
	    }
	  }

	  /*
	   *  updateDisplayFull() - Simply redraws the entire display according to memory
	   *  The colors are supposed to be identical with the C64's palette.
	   */
	  updateFull() {
	    for (let y = 0; y < 32; y++) {
	      for (let x = 0; x < 32; x++) {
	        this.updatePixel((y << 5) + x + 0x200);
	      }
	    }
	  }
	  updatePixel(addr) {
	    let colorNibble = exports.memory.readByte(addr).lowestNibble;
	    this[addr - 0x200].css("background", this.palette[colorNibble]);
	  }
	}

	// helper
	function fmtToHexBr(value) {
	  return "[" + fmtToHexIntern(value) + "]";
	}

	function fmtToHex(value) {
	  return "0x" + value.toString(16).padStart(2, 0);
	}

	function fmtToHexIntern(value) {
	  return "0x" + value.toString(16).padStart(2, 0);
	}

	function fmtToHexWord(value) {
	  return "0x" + value.toString(16).padStart(4, 0);
	}

	function fmtToHexWordIntern(value) {
	  return "0x" + value.toString(16).padStart(4, 0);
	}

	function fmtToHexWordBr(value) {
	  return "[" + fmtToHexWordIntern(value) + "]";
	}

	function fmtToBin(value) {
	  return value.toString(2).padStart(8, 0);
	}
	function getLowerByte(value) {
	  return value & 0xff;
	}

	function isNegative(value) {
	  // 0x80 = 128 = 0b1000 0000 means sign bit is set
	  if (value & 0x80) {
	    return true;
	  }
	  return false;
	}

	class Debugger {
	  constructor() {}
	  toggle() {
	    if (exports.debug) {
	      this.disable();
	    } else {
	      this.enable();
	    }
	  }

	  disable() {
	    exports.debug = false;
	    $("#stepButton").prop("disabled", true);
	    $("#gotoButton").prop("disabled", true);
	    if (exports.started) {
	      //reset highlighting
	      let lastLine = exports.editor.state.doc.line(exports.lastLineNumber);
	      exports.editor.dispatch({
	        changes: {
	          from: lastLine.from,
	          to: lastLine.to,
	          insert: exports.lastLineText,
	        },
	      });
	    }
	  }

	  enable() {
	    exports.debug = true;
	    // if (codeRunning) {
	    this.updateInfo();
	    $("#stepButton").prop("disabled", false);
	    $("#gotoButton").prop("disabled", false);
	    // }
	  }

	  updateInfo() {
	    let binaryMode = $("#binaryCheckbox").prop("checked");

	    let infoCellIDPrefix = "debug-info-content-";
	    let register = ["A", "X", "Y", "PC"];
	    let infoCell = null;

	    register.map((regName) => {
	      let infoCell = $("#" + infoCellIDPrefix + regName);
	      infoCell.html(
	        binaryMode
	          ? fmtToBin(exports.reg[regName])
	          : "$" + fmtToHex(exports.reg[regName])
	      );
	    });
	    infoCell = $("#" + infoCellIDPrefix + "SP");
	    infoCell.html(
	      binaryMode
	        ? fmtToBin(exports.memory.regSP)
	        : "$" + fmtToHex(exports.memory.regSP)
	    );

	    infoCell = $("#" + infoCellIDPrefix + "P");
	    let statusRegister =
	      "NV-BDIZC<br>" +
	      fmtToBin(exports.flags.byte) +
	      "    $" +
	      fmtToHex(exports.flags.byte);
	    infoCell.html(statusRegister);
	  }
	}

	/*
	 *  printMessage() - Prints text in the message window
	 */
	function printMessage(text) {
	  let obj = $("#messages");
	  obj.append(text + "\n");
	  obj.scrollTop = obj.scrollHeight;
	}

	function resetMessageWindow() {
	  $("#messages").html("");
	}

	/*
	 *  printErrorMessage() - Prints error in the message window
	 */
	function printErrorMessage({
	  line = "",
	  errMsg = "",
	  errType = "",
	} = {}) {
	  exports.error = true;
	  if (line != "") {
	    errMsg =
	      "<b>" + errType + "Error at line " + line + ": " + errMsg + "!</b>";
	  } else {
	    errMsg = "<b>" + errType + ": " + errMsg + "!</b>";
	  }
	  printMessage(errMsg);
	}
	function raiseSyntaxError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "Syntax" });
	}
	function raiseAddressingModeError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "AddressingMode" });
	}
	function raiseDCBValueError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "DCBValue" });
	}
	function raiseLabelError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "Label" });
	}
	function raiseRangeError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "Range" });
	}
	function raiseRunTimeError(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "RunTime" });
	}
	function raiseStackOverflow(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "StackOverflow" });
	}
	function raiseStackEmpty(line, errMsg) {
	  printErrorMessage({ line: line, errMsg: errMsg, errType: "StackEmpty" });
	}

	function consoleDebug({ msg, bold = false } = {}) {
	  // if (true) {
	  if (exports.debug) {
	    if (bold) {
	      printMessage("<b>" + msg + "</b>");
	      console.debug("%c" + msg, "font-weight: bold");
	      return;
	    }
	    printMessage(msg);
	    console.debug(msg);
	  }
	}

	class Flag {
	  constructor({ set = false } = {}) {
	    this.set = set;
	  }
	  isSet() {
	    return this.set;
	  }
	  isClear() {
	    return !this.set;
	  }

	  _set() {
	    this.set = true;
	  }

	  setByValue(value) {
	    if (value === 1) {
	      this.set = true;
	      return;
	    }
	    this.set = false;
	  }

	  clear() {
	    this.set = false;
	  }

	  get value() {
	    if (this.set) {
	      return 0x1;
	    }
	    return 0x0;
	  }
	}

	class Flags {
	  constructor() {
	    this.negative = new Flag();
	    this.overflow = new Flag();
	    this.unused = new Flag({ set: true });
	    this.break = new Flag();
	    this.decimal = new Flag();
	    this.interruptDisable = new Flag();
	    this.zero = new Flag();
	    this.carry = new Flag();
	  }
	  clearAll() {
	    this.negative.clear();
	    this.overflow.clear();
	    this.unused._set(); // unused is always one according to 6502 specs
	    this.break.clear();
	    this.decimal.clear();
	    this.interruptDisable.clear();
	    this.zero.clear();
	    this.carry.clear();
	  }

	  get byte() {
	    return (
	      (this.negative.value << 7) +
	      (this.overflow.value << 6) +
	      (this.unused.value << 5) +
	      (this.break.value << 4) +
	      (this.decimal.value << 3) +
	      (this.interruptDisable.value << 2) +
	      (this.zero.value << 1) +
	      this.carry.value
	    );
	  }

	  getByteClearedOn(flagName) {
	    let byte = this.byte;
	    switch (
	      flagName //                               NV-B DIZC
	    ) {
	      case "negative":
	        return byte & 0x7f; // 0b0111 1111
	      case "overflow":
	        return byte & 0xbf; // 0b1011 1111
	      case "unused":
	        return byte & 0xdf; // 0b1101 1111
	      case "break":
	        return byte & 0xef; // 0b1110 1111
	      case "decimal":
	        return byte & 0xf7; // 0b1111 0111
	      case "interruptDisable":
	        return byte & 0xfb; // 0b1111 1011
	      case "zero":
	        return byte & 0xfd; // 0b1111 1101
	      case "carry":
	        return byte & 0xfe; // 0b1111 1110
	    }
	  }

	  getByteClearedOnNandV() {
	    return this.byte & 0x7f & 0xbf;
	  }

	  setFromByte(byte) {
	    this.negative.setByValue(getBit(byte, 7));
	    this.overflow.setByValue(getBit(byte, 6));
	    this.unused._set(); // unused is always one according to 6502 specs
	    this.break.setByValue(getBit(byte, 4));
	    this.decimal.setByValue(getBit(byte, 3));
	    this.interruptDisable.setByValue(getBit(byte, 2));
	    this.zero.setByValue(getBit(byte, 1));
	    this.carry.setByValue(getBit(byte, 0));

	    return;
	  }

	  toggleZeroAndNegative(value) {
	    if (value) {
	      this.zero.clear();
	    } else {
	      this.zero._set();
	    }
	    if (isNegative(value)) {
	      this.negative._set();
	    } else {
	      this.negative.clear();
	    }
	    return;
	  }
	}
	Flags.prototype.toString = function () {
	  let msg =
	    "Flag content" +
	    "\nFlagName          Value" +
	    "\nNegative          [" +
	    this.negative.value +
	    "]" +
	    "\nOverflow          [" +
	    this.overflow.value +
	    "]" +
	    "\nUnused            [" +
	    this.unused.value +
	    "]" +
	    "\nBreak             [" +
	    this.break.value +
	    "]" +
	    "\nDecimal           [" +
	    this.decimal.value +
	    "]" +
	    "\nInterruptDisable  [" +
	    this.interruptDisable.value +
	    "]" +
	    "\nZero              [" +
	    this.zero.value +
	    "]" +
	    "\nCarry             [" +
	    this.carry.value +
	    "]";
	  console.log(msg);
	};
	function getBit(byte, position) {
	  return (byte >> position) & 1;
	}

	class Command {
	  //prettier-ignore
	  static opCodes = {
	    // NoAd means, command can be called without param
	    //Name NoAd  Imm   ZP    ZPX   ZPY   ABS   ABSI  ABSX  ABSY  INDX  INDY  BRA   rel-
	    ADC: [ 0x00, 0x69, 0x65, 0x75, 0x00, 0x6d, 0x00, 0x7d, 0x79, 0x61, 0x71, 0x00, 0x00, ],
	    //
	    AND: [ 0x00, 0x29, 0x25, 0x35, 0x00, 0x2d, 0x00, 0x3d, 0x39, 0x21, 0x31, 0x00, 0x00, ],
	    AAC: [ 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    AAX: [ 0x00, 0x00, 0x87, 0x00, 0x97, 0x8f, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, ],
	    ARR: [ 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    ASR: [ 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    ATX: [ 0x00, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    AXA: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x93, 0x00, 0x00, ],
	    AXS: [ 0x00, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    LAR: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, ],
	    // DCB: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    ASL: [ 0x0a, 0x00, 0x06, 0x16, 0x00, 0x0e, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    BPL: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x100, ],
	    BMI: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x101, ],
	    BVC: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x102, ],
	    BVS: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x103, ],
	    BCC: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x104, ],
	    BCS: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb0, 0x105, ],
	    BNE: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x106, ],
	    BEQ: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x107, ],
	    BRK: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    BIT: [ 0x00, 0x00, 0x24, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CLC: [ 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CLD: [ 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CLI: [ 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CLV: [ 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CMP: [ 0x00, 0xc9, 0xc5, 0xd5, 0x00, 0xcd, 0x00, 0xdd, 0xd9, 0xc1, 0xd1, 0x00, 0x00, ],
	    CPX: [ 0x00, 0xe0, 0xe4, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    CPY: [ 0x00, 0xc0, 0xc4, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    DEC: [ 0x00, 0x00, 0xc6, 0xd6, 0x00, 0xce, 0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    DEX: [ 0xca, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    DEY: [ 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    EOR: [ 0x00, 0x49, 0x45, 0x55, 0x00, 0x4d, 0x00, 0x5d, 0x59, 0x41, 0x51, 0x00, 0x00, ],
	    INC: [ 0x00, 0x00, 0xe6, 0xf6, 0x00, 0xee, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    INX: [ 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    INY: [ 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    JMP: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    JSR: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    KIL: [ 0x00, 0xf2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    LDA: [ 0x00, 0xa9, 0xa5, 0xb5, 0x00, 0xad, 0x00, 0xbd, 0xb9, 0xa1, 0xb1, 0x00, 0x00, ],
	    LDX: [ 0x00, 0xa2, 0xa6, 0x00, 0xb6, 0xae, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x00, ],
	    LDY: [ 0x00, 0xa0, 0xa4, 0xb4, 0x00, 0xac, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    LAX: [ 0x00, 0x00, 0xa7, 0x00, 0xb7, 0xaf, 0x00, 0x00, 0xbf, 0xa3, 0xb3, 0x00, 0x00, ],
	    LSR: [ 0x4a, 0x00, 0x46, 0x56, 0x00, 0x4e, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    
	    //Name NoAd  Imm   ZP    ZPX   ZPY   ABS   ABSI  ABSX  ABSY  INDX  INDY  BRA   rel-
	    NOP: [ 0xea, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    DOP: [ 0x00, 0xe2, 0x64, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TOP: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, ],

	    ORA: [ 0x00, 0x09, 0x05, 0x15, 0x00, 0x0d, 0x00, 0x1d, 0x19, 0x01, 0x11, 0x00, 0x00, ],
	    PHA: [ 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    PHP: [ 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    PLA: [ 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    PLP: [ 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    ROL: [ 0x2a, 0x00, 0x26, 0x36, 0x00, 0x2e, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    ROR: [ 0x6a, 0x00, 0x66, 0x76, 0x00, 0x6e, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    RTI: [ 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    RTS: [ 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    SBC: [ 0x00, 0xe9, 0xe5, 0xf5, 0x00, 0xed, 0x00, 0xfd, 0xf9, 0xe1, 0xf1, 0x00, 0x00, ],
	    SEC: [ 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    SED: [ 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    SEI: [ 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    STA: [ 0x00, 0x00, 0x85, 0x95, 0x00, 0x8d, 0x00, 0x9d, 0x99, 0x81, 0x91, 0x00, 0x00, ],
	    STX: [ 0x00, 0x00, 0x86, 0x00, 0x96, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    STY: [ 0x00, 0x00, 0x84, 0x94, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TAX: [ 0xaa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TAY: [ 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TSX: [ 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TXA: [ 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TXS: [ 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    TYA: [ 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    DCB: [ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, ],
	    //Name NoAd  Imm   ZP    ZPX   ZPY   ABS   ABSI  ABSX  ABSY  INDX  INDY  BRA   rel-

	// illegal
	    // KIL, stop programm counter (processor lock up)
	    // KIL : [0x02, 0x12, 0x22, 0x32, 0x42, 0x52, 0x62, 0x72, 0x92, 0xb2, 0xd2, 0xf2],
	  };
	  static getOpCodeName(opCode) {
	    let opCodeName = fmtToHex(opCode);
	    Object.entries(Command.opCodes).forEach(([name, opCodes]) => {
	      if (opCode != 0x00 && opCodes.find((opCodeV) => opCodeV == opCode)) {
	        opCodeName = name;
	      }
	    });
	    return opCodeName;
	  }
	  static isBranchInstruction(opCode) {
	    let branchOpCodes = new Array(
	      0x10,
	      0x30,
	      0x50,
	      0x70,
	      0x90,
	      0xb0,
	      0xd0,
	      0xf0,
	      0x100,
	      0x101,
	      0x102,
	      0x103,
	      0x104,
	      0x105,
	      0x106,
	      0x107
	    );
	    if (branchOpCodes.includes(opCode)) {
	      return true;
	    }
	    return false;
	  }
	  static isJumpInstruction(opCode) {
	    if (opCode == 0x4c || opCode == 0x6c) {
	      return true;
	    }
	    return false;
	  }
	  constructor(commandName, lineNumber) {
	    this.name = commandName;
	    this.lineNumber = lineNumber;
	    this.opCode = 0x00;
	    this.noParam = Command.opCodes[this.name][0];
	    this.immediate = Command.opCodes[this.name][1];
	    this.zeroPage = Command.opCodes[this.name][2];
	    this.zeroPageX = Command.opCodes[this.name][3];
	    this.zeroPageY = Command.opCodes[this.name][4];
	    this.absolute = Command.opCodes[this.name][5];
	    this.absoluteIndirect = Command.opCodes[this.name][6];
	    this.absoluteX = Command.opCodes[this.name][7];
	    this.absoluteY = Command.opCodes[this.name][8];
	    this.indirectX = Command.opCodes[this.name][9];
	    this.indirectY = Command.opCodes[this.name][10];
	    this.branch = Command.opCodes[this.name][11];
	    this.relativeMinus = Command.opCodes[this.name][12];
	  }

	  compileOpCode(param, memory, lineBeforeThisWasAddressOnly) {
	    if (this.name == "DCB") {
	      let countParam = param.compileDcb();
	      if (!lineBeforeThisWasAddressOnly) {
	        return 0;
	      }
	      return countParam;
	    }
	    this.opCode = this[param.addrModeName];
	    if (this.opCode == 0x00 && this.name != "BRK") {
	      raiseAddressingModeError(
	        this.lineNumber,
	        "OpCode for command " +
	          this.name +
	          " with addrMode " +
	          param.addrModeName +
	          " unset"
	      );
	    }

	    let countPushedOpCodes = this.#pushOpCode(memory);
	    countPushedOpCodes += param.push(memory);
	    return countPushedOpCodes;
	  }

	  #pushOpCode(memory) {
	    const op = new OpCodeByteEntry(this.opCode, this.lineNumber);
	    memory.pushByte(op);
	    return 1; // for lineLen/codeLen
	  }
	}
	Command.prototype.toString = function () {
	  let str = "OpCode\n";
	  Object.entries(this).forEach(([k, v]) => {
	    str += "  " + k + ": " + v;
	  });
	  return str;
	};

	class Memory extends Array {
	  constructor() {
	    super(0xa28); // 0xa28 = 0x600 + 0x3ff is maximum memory size
	    this.regSP = 0x100;
	    this.size = 0xa28;
	    this.defaultCodePC = 0x600;
	    for (let codePC = 0x0; codePC < this.size; codePC++) {
	      this[codePC] = new ByteEntry(0x00, -1);
	    }
	  }

	  reset() {
	    for (let x = 0; x < this.size; x++) {
	      // clear ZeroPage and Stack
	      this[x] = 0x00;
	    }
	    this._regSP = 0x100;
	    this.defaultCodePC = 0x600;
	  }

	  // generell memory setter and getter --------------------------------------------------------
	  readWord(address) {
	    let lowerByteEntry = this.readByte(address);
	    let upperByteEntry = this.readByte(address + 1);
	    let word = (upperByteEntry.value << 8) + lowerByteEntry.value;
	    return new WordEntry(word, lowerByteEntry.lineNumber);
	  }

	  readByte(address) {
	    let memoryEntry = this[address];
	    if (!(memoryEntry instanceof MemoryEntry)) {
	      // pseudo type checking
	      throw (
	        "TypeError: memoryEntry[" +
	        memoryEntry +
	        "] at address [" +
	        fmtToHex(address) +
	        "] is not of type MemoryEntry"
	      );
	    }

	    if (!(memoryEntry instanceof LabelEntry)) {
	      // for label insertion
	      // handling special educative branch relative command
	      if (
	        ![0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107].includes(
	          memoryEntry.value
	        )
	      ) {
	        memoryEntry = memoryEntry.lowerByteEntry; // make sure, this is a byte
	      }
	    }

	    return memoryEntry;
	  }

	  pushWord(wordEntry) {
	    this.pushByte(wordEntry.lowerByteEntry);
	    this.pushByte(wordEntry.upperByteEntry);
	  }

	  pushByte(byteEntry) {
	    this.writeByte(this.defaultCodePC, byteEntry);

	    let isInstruction = false;
	    if (byteEntry instanceof OpCodeByteEntry) {
	      isInstruction = true;
	    }
	    exports.addressLineNumbers[this.defaultCodePC] = {
	      lineNumber: byteEntry.lineNumber,
	      isInstruction: isInstruction,
	    };
	    this.defaultCodePC++;
	  }

	  writeWord(address, wordEntry) {
	    this.writeByte(address, wordEntry.lowerByteEntry);
	    this.writeByte(address + 1, wordEntry.upperByteEntry);
	  }

	  writeByte(address, memoryEntry) {
	    if (!(memoryEntry instanceof MemoryEntry)) {
	      // pseudo type checking
	      throw (
	        "TypeError: memoryEntry[" + memoryEntry + "] is not of type MemoryEntry"
	      );
	    }
	    if (memoryEntry.isNaN()) {
	      throw "Value for address " + fmtToHex(address) + " is NaN!";
	    }
	    if (!(memoryEntry instanceof LabelEntry)) {
	      // for label insertion
	      // handling special educative jmp relative command
	      if (
	        ![0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107].includes(
	          memoryEntry.value
	        )
	      ) {
	        memoryEntry = memoryEntry.lowerByteEntry;
	      }
	    }
	    this[address] = memoryEntry;
	  }

	  // stack setter and getter ------------------------------------------------------------------
	  popWordFromStack() {
	    let lowerByteEntry = this.popByteFromStack();
	    let upperByteEntry = this.popByteFromStack();
	    let word = (upperByteEntry.value << 8) + (lowerByteEntry.value + 1);
	    return new WordEntry(word, lowerByteEntry.lineNumber);
	  }

	  popByteFromStack() {
	    if (this.regSP < 0x100) {
	      let addr = this.regSP + 0x100;
	      let byteEntry = this.readByte(addr);
	      this.regSP++; // stack shrinks forwards
	      return byteEntry;
	    } else {
	      raiseStackEmpty("", "");
	      exports.codeRunning = false;
	      return 0;
	    }
	  }

	  pushByteToStack(byteEntry) {
	    if (this.regSP >= 0) {
	      this.regSP--; // stack grows backwards
	      let addr = getLowerByte(this.regSP) + 0x100;
	      this.writeByte(addr, byteEntry.lowerByteEntry);
	    } else {
	      raiseStackOverflow("", "Stack full: " + this.regSP);
	      exports.codeRunning = false;
	    }
	  }

	  pushWordToStack(wordEntry) {
	    this.pushByteToStack(wordEntry.upperByteEntry);
	    this.pushByteToStack(wordEntry.lowerByteEntry);
	  }

	  dumpHTML() {
	    let dump = "";
	    this.forEach((memoryEntry, address) => {
	      dump += "<br/>";
	      if (address == 1536) {
	        dump +=
	          "<span id='idCodeBegin'><strong>Begin of code area</strong></span>";
	        dump += "<br/>";
	      }
	      dump += "  " + fmtToHex(address) + " : " + memoryEntry.toString();
	    });
	    return dump;
	  }
	  dumpPlainHTML() {
	    let dump = "";
	    this.forEach((memoryEntry, address) => {
	      dump += "<br/>";
	      dump += "  " + fmtToHex(address) + " : " + fmtToHex(memoryEntry.value);
	    });
	    return dump;
	  }
	  getLineNumbersForEditor() {
	    let lineNumbers = {};
	    let lineNumber = 0;
	    // filter does not seam to work! Maybe due to Memory being
	    // an inherited Array
	    this.slice(0x600).forEach((memoryEntry, address) => {
	      if ([-1, "undefined", lineNumber].includes(memoryEntry.lineNumber)) {
	        return;
	      }

	      lineNumber = memoryEntry.lineNumber;

	      if (address === "undefined") {
	        return;
	      }

	      lineNumbers[lineNumber] = address;
	    });

	    return lineNumbers;
	  }
	}
	Memory.prototype.toString = function () {
	  let info = "Memory content: \n";
	  this.slice(0x600).forEach((memoryEntry, address) => {
	    address += 0x600;
	    info += "  " + fmtToHex(address) + " : " + memoryEntry.toString() + "\n";
	  });
	  return info;
	};

	class MemoryEntry {
	  constructor(value) {
	    this.value = value;
	  }

	  isNaN() {
	    if (this.value != this.value) {
	      //if NaN
	      return true;
	    }
	    return false;
	  }
	}

	class LabelEntry extends MemoryEntry {
	  constructor(value, lineNumber) {
	    super(value);
	    this.lineNumber = lineNumber;
	  }
	}
	LabelEntry.prototype.toString = function () {
	  return "LabelEntry      : " + this.value;
	};

	class ByteEntry extends MemoryEntry {
	  constructor(value, lineNumber) {
	    super(value & 0xff);
	    this.lineNumber = lineNumber;
	  }

	  get lowestNibble() {
	    return this.value & 0x0f;
	  }

	  get lowerByteEntry() {
	    return this;
	  }
	}
	ByteEntry.prototype.toString = function () {
	  return (
	    fmtToHex(this.value) +
	    ", ByteEntry       " +
	    lineNumberToString.bind(this)()
	  );

	  function lineNumberToString() {
	    if (this.value === this.lineNumber) {
	      return "                   ";
	    }
	    if (typeof this.lineNumber === "undefined") {
	      return "                   ";
	    }
	    if (this.lineNumber < 0) {
	      return "                   ";
	    }
	    return "     at line " + this.lineNumber.toString().padStart(4, " ");
	  }
	};

	class OpCodeByteEntry extends MemoryEntry {
	  constructor(value, lineNumber) {
	    super(value);
	    this.lineNumber = lineNumber;
	  }

	  get lowerByteEntry() {
	    return new OpCodeByteEntry(this.value & 0xff, this.lineNumber);
	  }
	}
	OpCodeByteEntry.prototype.toString = function () {
	  return (
	    fmtToHex(this.value) +
	    ", OpCodeByteEntry" +
	    "[" +
	    Command.getOpCodeName(this.value) +
	    "] at line " +
	    this.lineNumber.toString().padStart(4, " ")
	  );
	};

	class WordEntry extends MemoryEntry {
	  constructor(value, lineNumber) {
	    super(value);
	    this.lineNumber = lineNumber;
	  }

	  get lowerByte() {
	    return this.value & 0xff;
	  }

	  get lowerByteEntry() {
	    return new ByteEntry(this.lowerByte, this.lineNumber);
	  }

	  get upperByte() {
	    return (this.value >> 8) & 0xff;
	  }

	  get upperByteEntry() {
	    return new ByteEntry(this.upperByte, this.lineNumber);
	  }
	}
	WordEntry.prototype.toString = function () {
	  return fmtToHex(this.value) + ")" + ", WordEntry       : ";
	};

	class LabelAddresses {
	  printLabelCount() {
	    let labelAddressesCount = Object.entries(this).length;
	    let str = "Found " + labelAddressesCount + " label";
	    str = labelAddressesCount == 1 ? (str += ".") : (str += "s.");
	    printMessage(str);
	  }
	  isLabel(byte) {
	    if (typeof byte == "string" && ["<", ">"].includes(byte.slice(0, 1))) {
	      //high-low-label
	      byte = byte.slice(1);
	    }
	    if (byte in this) {
	      return true;
	    }
	    return false;
	  }
	  getLabel(address) {
	    let label = "";
	    Object.entries(this).forEach(([key, labelAddress]) => {
	      if (labelAddress.word === address) {
	        label = key;
	        return;
	      }
	    });
	    return label;
	  }
	  insertToMemory(codePC, memory) {
	    let memoryEntry = memory.readByte(codePC);

	    if (!(memoryEntry instanceof LabelEntry)) {
	      return;
	    }

	    let label = memoryEntry.value;

	    let highLowMark = "";
	    if (["<", ">"].includes(label.slice(0, 1))) {
	      //high-low-label
	      highLowMark = label.slice(0, 1);
	      label = label.slice(1);
	    }

	    let labelAddress = this[label];
	    let labelAddressWord = labelAddress.word;
	    let lineNumber = memory.readByte(codePC).lineNumber;
	    if (label === labelAddressWord) {
	      throw "Call insertLabelAddresses() only after calling scanLabels() and compileLines()!";
	    }

	    let opCode = memory.readByte(codePC - 1).value;
	    if (Command.isBranchInstruction(opCode)) {
	      this.#insertForBranch(codePC, labelAddressWord, lineNumber, memory);
	    } else if (highLowMark == "<") {
	      memory.writeByte(
	        codePC,
	        new WordEntry(labelAddressWord, lineNumber).lowerByteEntry
	      );
	    } else if (highLowMark == ">") {
	      memory.writeByte(
	        codePC,
	        new WordEntry(labelAddressWord, lineNumber).upperByteEntry
	      );
	    } else {
	      // is absolute opCod
	      memory.writeWord(codePC, new WordEntry(labelAddressWord, lineNumber));
	    }
	    return;
	  }

	  #insertForBranch(codePC, labelAddress, labelAddressLineNumber, memory) {
	    let offsetAddressWord;
	    if (labelAddress < codePC - 0x600) {
	      // Backwards
	      offsetAddressWord = 0xff - (codePC - 0x600 - labelAddress);
	    }
	    if (labelAddress >= codePC - 0x600) {
	      offsetAddressWord = labelAddress - (codePC - 0x600) - 0x1;
	    }
	    memory.writeByte(
	      codePC,
	      new WordEntry(offsetAddressWord, labelAddressLineNumber).lowerByteEntry
	    );
	    return;
	  }
	}
	LabelAddresses.prototype.toString = function () {
	  Object.entries(this).forEach(([label, labelAddress]) => {
	    console.log(label + " : " + labelAddress.toString() + "\n");
	  });
	};

	class LabelAddress {
	  constructor(word, lineNumber) {
	    this.word = word;
	    this.lineNumber = lineNumber;
	  }
	}
	LabelAddress.prototype.toString = function () {
	  return (
	    "line " + this.lineNumber + ": 0x" + this.word.toString(16).padStart(4, 0)
	  );
	};

	class Param {
	  static regExps = {
	    label: /^\w+/,
	    labelIndirect: /^\(\w+\)/,
	    relativeHexNo: /^\$([0-9a-f]{1,2})/,
	    relativeDecNo: /^([0-9]{1,3})/,
	    relativeDecMinusNo: /^-([0-9]{1,3})/,
	    immediateHexNo: /^#\$([0-9a-f]{1,2})/,
	    immediateDecNo: /^#([0-9]{1,3})/,
	    highLowLabel: /^#[<>]\w+/,
	    zeroPageHexNo: /^\$([0-9a-f]{1,2})/,
	    zeroPageDecNo: /^([0-9]{1,3})/,
	    absoluteHexNo: /^\$([0-9a-f]{1,4})/, // Todo:, wht not length 1,4?
	    absoluteDecNo: /^([0-9]{1,5})/, // Todo: Why not only length of 4,5?
	    absoluteHexNoIndirect: /^\$\(([0-9a-f]{1,4})\)/,
	    absoluteDecNoIndirect: /^\(([0-9]{1,5})\)/, // Todo: Why not only length of 4,5?
	    indirectHexNo: /^\(\$([0-9a-f]{1,2}).*/,
	  };
	  constructor({ name, lineNumber, labelAddresses, commandName, memory } = {}) {
	    this.name = name;
	    this.lineNumber = lineNumber;
	    this.labelAddresses = labelAddresses;
	    this.commandName = commandName;
	    this.addrModeName = "";
	    this.push = function (_) {
	      return 0;
	    }; //for lineLen/codeLen
	    this.register = "";
	    this.memory = memory;
	  }
	  isDcb() {
	    if (this.commandName == "DCB") {
	      return true;
	    }
	    return false;
	  }
	  empty() {
	    if (this.name == "") {
	      return true;
	    }
	    return false;
	  }
	  isBranchCommand() {
	    let branchCommands = new Array(
	      "BPL",
	      "BMI",
	      "BVC",
	      "BVS",
	      "BCC",
	      "BCS",
	      "BNE",
	      "BEQ"
	    );
	    if (branchCommands.includes(this.commandName)) {
	      //is branch command, skip absolute!
	      return true;
	    }
	    return false;
	  }
	  isBranch() {
	    if (
	      !this.#isLabel() &&
	      !this.#isRelativeHexNumber() &&
	      !this.#isRelativeDecNumber()
	    ) {
	      return false;
	    }
	    return true;
	  }
	  isRelativeMinus() {
	    if (!this.#isRelativeDecMinusNumber()) {
	      return false;
	    }
	    return true;
	  }
	  isImmediate() {
	    if (
	      !this.#isImmediateHexNumber() &&
	      !this.#isImmediateDecNumber() &&
	      !this.#hasHighLowLabel()
	    ) {
	      return false;
	    }
	    return true;
	  }
	  isZeroPage(register) {
	    if (
	      !this.#isZeroPageHexNumber(register) &&
	      !this.#isZeroPageDecNumber(register)
	    ) {
	      return false;
	    }
	    return true;
	  }
	  isAbsolute(register) {
	    if (
	      !this.#isAbsoluteHexNumber(register) &&
	      !this.#isAbsoluteDecNumber(register) &&
	      !this.#isLabel({ register: register })
	    ) {
	      return false;
	    }
	    return true;
	  }
	  isAbsoluteIndirect(register) {
	    if (
	      !this.#isAbsoluteHexNumberIndirect(register) &&
	      !this.#isAbsoluteDecNumberIndirect(register) &&
	      !this.#isLabelIndirect({ register: register })
	    ) {
	      return false;
	    }
	    return true;
	  }
	  isIndirect(register) {
	    if (!this.#isIndirectHexNumber(register)) {
	      return false;
	    }
	    return true;
	  }
	  #isLabel({ register = "" } = {}) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.label,
	      register: register,
	    });
	  }
	  #isLabelIndirect({ register = "" } = {}) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.labelIndirect,
	      register: register,
	    });
	  }

	  #isRelativeHexNumber() {
	    return this.#matchesRegExp({ regExp: Param.regExps.relativeHexNo });
	  }
	  #isRelativeDecNumber() {
	    return this.#matchesRegExp({ regExp: Param.regExps.relativeDecNo });
	  }
	  #isRelativeDecMinusNumber() {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.relativeDecMinusNo,
	    });
	  }

	  #isImmediateHexNumber() {
	    return this.#matchesRegExp({ regExp: Param.regExps.immediateHexNo });
	  }
	  #isImmediateDecNumber() {
	    return this.#matchesRegExp({ regExp: Param.regExps.immediateDecNo });
	  }

	  #hasHighLowLabel() {
	    let bool = this.#matchesRegExp({ regExp: Param.regExps.highLowLabel });
	    return bool;
	  }
	  #isZeroPageHexNumber(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.zeroPageHexNo,
	      register: register,
	    });
	  }
	  #isZeroPageDecNumber(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.zeroPageDecNo,
	      register: register,
	    });
	  }
	  #isAbsoluteHexNumber(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.absoluteHexNo,
	      register: register,
	    });
	  }
	  #isAbsoluteDecNumber(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.absoluteDecNo,
	      register: register,
	    });
	  }
	  #isAbsoluteHexNumberIndirect(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.absoluteHexNoIndirect,
	      register: register,
	    });
	  }
	  #isAbsoluteDecNumberIndirect(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.absoluteDecNoIndirect,
	      register: register,
	    });
	  }
	  #isIndirectHexNumber(register) {
	    return this.#matchesRegExp({
	      regExp: Param.regExps.indirectHexNo,
	      register: register,
	      indirect: true,
	    });
	  }
	  #matchesRegExp({ regExp = /(?:)/, register = "", indirect = false } = {}) {
	    let regExpString = this.#handleRegister({
	      register: register,
	      regExp: regExp,
	      indirect: indirect,
	    });
	    regExp = this.#addLineEndCaseInsensitive(regExpString);
	    if (this.name.match(regExp)) {
	      return true;
	    }
	    return false;
	  }

	  // DCB handling
	  compileDcb() {
	    let lineLen = 0;
	    let values = this.name.split(",");
	    if (values.length == 0) {
	      return 0;
	    }

	    for (let value of values) {
	      lineLen += this.#compileDcbValue(value);
	    }
	    return lineLen;
	  }
	  #compileDcbValue(value) {
	    if (value == undefined || value == null || value.length == 0) {
	      raiseDCBValueError(lineNumber, "Unknown: DCB value: " + value);
	      return 0; // +0 for lineLen
	    }
	    let base = 10;
	    let leadChar = value.substring(0, 1);
	    if (leadChar != "$" && (leadChar < "0" || leadChar > "9")) {
	      raiseDCBValueError(this.lineNumber, "Unknown: DCB value: " + value);
	      return 1; // +1 for lineLen
	    }
	    if (leadChar == "$") {
	      value = value.replace(/^\$/, ""); //strip leading dollar sign
	      base = 16;
	    }
	    let byte = parseInt(value, base);
	    this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	    return 1; // +1 for lineLen
	  }

	  // push Functions
	  pushForBranch() {
	    if (this.#isRelativeHexNumber()) {
	      let byte = extractRelativeHexNumber.bind(this)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#isRelativeDecNumber()) {
	      let byte = extractRelativeDecNumber.bind(this)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#isRelativeDecMinusNumber()) {
	      let byte = extractRelativeDecMinusNumber.bind(this)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#isLabel()) {
	      let label = this.name;
	      if (!(label in this.labelAddresses)) {
	        raiseLabelError(this.lineNumber, "Label '" + label + "' not existing");
	        return;
	      }

	      let labelAddress = this.labelAddresses[label].word;
	      if (labelAddress === label) {
	        //labelAddress will be inserted after compileLines()
	        this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	        return 1; // for lineLen/codeLen
	      }

	      if (labelAddress < this.memory.defaultCodePC - 0x600) {
	        // Backwards
	        console.warn("backwards");
	        let offsetAddressWord =
	          0xff - (this.memory.defaultCodePC - 0x600 - labelAddress);
	        this.memory.pushByte(
	          new WordEntry(offsetAddressWord, this.lineNumber).lowerByteEntry
	        );
	        return 1; // for lineLen/codeLen
	      }
	      if (labelAddress >= this.memory.defaultCodePC - 0x600) {
	        let offsetAddressWord =
	          labelAddress - 1 - (this.memory.defaultCodePC - 0x600);
	        this.memory.pushByte(
	          new WordEntry(offsetAddressWord, this.lineNumber).lowerByteEntry
	        );
	        return 1; // for lineLen/codeLen
	      }
	    }
	    throw "Call pushForBranch() only if isBranch() or isRelative(|Minus) is true!";

	    // helper
	    function extractRelativeHexNumber() {
	      return this.#extractNumber({ regExp: Param.regExps.relativeHexNo });
	    }
	    function extractRelativeDecNumber() {
	      return this.#extractNumber({
	        regExp: Param.regExps.relativeDecNo,
	        base: 10,
	        max: 127, // here, we are using the m number with an implicit plus sign.
	        // hence, the max twos complement number is 127
	      });
	    }
	    function extractRelativeDecMinusNumber() {
	      return this.#extractNumber({
	        regExp: Param.regExps.relativeDecMinusNo,
	        base: 10,
	        max: 128, // here, we are using the min number with a sign.
	        // hence, the min twos complement number, FF is becoming -128
	      });
	    }
	  }
	  pushForImmediate() {
	    if (this.#isImmediateHexNumber()) {
	      let byte = extractImmediateHexNumber.bind(this)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#isImmediateDecNumber()) {
	      let byte = extractImmediateDecNumber.bind(this)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#hasHighLowLabel()) {
	      let label = extractHighLowLabelAddress.bind(this)();
	      this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    throw "Call this function only if isImmediate() is true!";

	    // helper
	    function extractImmediateHexNumber() {
	      return this.#extractNumber({ regExp: Param.regExps.immediateHexNo });
	    }
	    function extractImmediateDecNumber() {
	      return this.#extractNumber({
	        regExp: Param.regExps.immediateDecNo,
	        base: 10,
	        max: 255,
	      });
	    }
	    function extractHighLowLabelAddress() {
	      let label = this.name.replace(/^#[<>](\w+)$/, "$1");
	      let hilo = this.name.replace(/^#([<>]).*$/, "$1");
	      if (!(label in this.labelAddresses)) {
	        throw "Call extractHighLowLabelAddress() only after calling scanLabels() and compileLines()!";
	      }
	      return hilo + this.labelAddresses[label].word;
	    }
	  }

	  pushForZeroPage() {
	    let register = this.register;
	    if (this.#isZeroPageHexNumber(register)) {
	      let byte = extractZeroPageHexNumber.bind(this, register)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    if (this.#isZeroPageDecNumber(register)) {
	      let byte = extractZeroPageDecNumber.bind(this, register)();
	      this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	      return 1; // for lineLen/codeLen
	    }
	    throw "Call this function only if isZeroPage() is true!";

	    // helper
	    function extractZeroPageHexNumber(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.zeroPageHexNo,
	      });
	    }
	    function extractZeroPageDecNumber(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.zeroPageDecNo,
	        base: 10,
	        max: 255,
	      });
	    }
	  }
	  pushForAbsolute() {
	    let register = this.register;
	    if (this.#isAbsoluteHexNumber(register)) {
	      let word = extractAbsoluteHexNumber.bind(this, register)();
	      this.memory.pushWord(new WordEntry(word, this.lineNumber));
	      return 2; // for lineLen/codeLen
	    }

	    if (this.#isAbsoluteDecNumber(register)) {
	      let word = extractAbsoluteDecNumber.bind(this, register)();
	      this.memory.pushWord(new WordEntry(word, this.lineNumber));
	      return 2; // for lineLen/codeLen
	    }

	    // can only be label now, since this function has to be called only if isAbsolute() is true
	    let label = extractLabel.bind(this)(register);

	    if (label in this.labelAddresses) {
	      let labelAddressWord = this.labelAddresses[label].word;
	      if (labelAddressWord === label) {
	        // labelAddress will be inserted after compileLines()
	        this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	        this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	      } else {
	        this.memory.pushWord(new WordEntry(labelAddressWord, this.lineNumber));
	      }
	      return 2; // for lineLen/codeLen
	    }

	    if (!(label in this.labelAddresses)) {
	      raiseLabelError(this.lineNumber, "Label '" + label + "' not existing");
	      return 0;
	    }
	    throw "Call pushForAbsolute() only if isAbsolute() is true!";

	    // helper
	    function extractLabel(register) {
	      return this.name.replace(new RegExp("," + register + "$", "i"), "");
	    }
	    function extractAbsoluteHexNumber(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.absoluteHexNo,
	        max: 0xffff,
	      });
	    }
	    function extractAbsoluteDecNumber(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.absoluteDecNo,
	        base: 10,
	        max: 65535,
	      });
	    }
	  }
	  pushForAbsoluteIndirect() {
	    let register = this.register;
	    if (this.#isAbsoluteHexNumberIndirect(register)) {
	      let word = extractAbsoluteHexNumberIndirect.bind(this, register)();
	      this.memory.pushWord(new WordEntry(word, this.lineNumber));
	      return 2; // for lineLen/codeLen
	    }

	    if (this.#isAbsoluteDecNumberIndirect(register)) {
	      let word = extractAbsoluteDecNumberIndirect.bind(this, register)();
	      this.memory.pushWord(new WordEntry(word, this.lineNumber));
	      return 2; // for lineLen/codeLen
	    }

	    // can only be label now, since this function has to be called only if isAbsolute() is true
	    let label = extractLabelIndirect.bind(this)(register);

	    if (label in this.labelAddresses) {
	      let labelAddressWord = this.labelAddresses[label].word;
	      if (labelAddressWord === label) {
	        // labelAddress will be inserted after compileLines()
	        this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	        this.memory.pushByte(new LabelEntry(label, this.lineNumber));
	      } else {
	        this.memory.pushWord(new WordEntry(labelAddressWord, this.lineNumber));
	      }
	      return 2; // for lineLen/codeLen
	    }

	    if (!(label in this.labelAddresses)) {
	      raiseLabelError(this.lineNumber, "Label '" + label + "' not existing");
	      return 0;
	    }
	    throw "Call pushForAbsoluteIndirect() only if isAbsoluteIndirect() is true!";

	    // helper
	    function extractLabelIndirect(register) {
	      let label = this.name.replace(/^\(/, "");
	      label = label.replace(/\)$/, "");
	      return label;
	    }
	    function extractAbsoluteHexNumberIndirect(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.absoluteHexNoIndirect,
	        max: 0xffff,
	      });
	    }
	    function extractAbsoluteDecNumberIndirect(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.absoluteDecNoIndirect,
	        base: 10,
	        max: 65535,
	      });
	    }
	  }
	  pushForIndirect() {
	    let register = this.register;
	    let byte = extractIndirectHexNumber.bind(this, register)();
	    this.memory.pushByte(new ByteEntry(byte, this.lineNumber));
	    return 1; // for lineLen/codeLen

	    //helper
	    function extractIndirectHexNumber(register) {
	      return this.#extractNumber({
	        register: register,
	        regExp: Param.regExps.indirectHexNo,
	        indirect: true,
	      });
	    }
	  }

	  #extractNumber({
	    // called with binding wrapper in pushFor methods
	    register = "",
	    regExp = /(?:)/,
	    base = 16,
	    min = 0,
	    max = 0xff,
	    indirect = false,
	  } = {}) {
	    let regExpString = this.#handleRegister({
	      register: register,
	      regExp: regExp,
	      indirect: indirect,
	    });
	    regExp = this.#addLineEndCaseInsensitive(regExpString);
	    let number = this.name.replace(regExp, "$1");
	    number = parseInt(number, base);
	    if (number < min || number > max) {
	      raiseRangeError(
	        this.lineNumber,
	        "Value '" + number + "' out of range(" + min + ", " + max + ")"
	      );
	    }
	    return number;
	  }
	  #handleRegister({ register = "", regExp = /(?:)/, indirect = false } = {}) {
	    let regExpString = regExp.toString();
	    // strip lead/tail '/' of reg exp representation for string representation
	    regExpString = regExpString.substring(1, regExpString.length - 1);

	    if (indirect) {
	      if (register == "") {
	        let errMsg = "No register given in indirect opCode!";
	        printMessage(errMsg);
	        throw errMsg;
	      } else if (register == "X") {
	        regExpString = regExpString + "," + register + "\\)";
	      } else if (register == "Y") {
	        regExpString = regExpString + "\\)" + "," + register;
	      }
	      return regExpString;
	    }

	    if (register != "") {
	      return regExpString + "," + register;
	    }
	    return regExpString;
	  }
	  #addLineEndCaseInsensitive(regExpString) {
	    return new RegExp(regExpString + "$", "i");
	  }
	}
	Param.prototype.toString = function () {
	  return "line " + this.lineNumber + ": " + this.name;
	};

	class ParamFactory {
	  create = function ({
	    name = "",
	    lineNumber = 0,
	    labelAddresses,
	    commandName = "",
	    memory,
	  } = {}) {
	    let param = new this.param({
	      name: name,
	      lineNumber: lineNumber,
	      labelAddresses: labelAddresses,
	      commandName: commandName,
	      memory: memory,
	    });
	    let addrModeName = "";
	    let pushFunction = function (_) {
	      return 0;
	    }; //for lineLen/codeLen
	    let register = "";
	    if (param.isDcb()) {
	      return param;
	    } else if (param.empty()) {
	      addrModeName = "noParam";
	    } else if (param.isBranchCommand() && param.isRelativeMinus()) {
	      addrModeName = "relativeMinus";
	      pushFunction = param.pushForBranch;
	    } else if (param.isBranchCommand() && param.isBranch()) {
	      addrModeName = "branch";
	      pushFunction = param.pushForBranch;
	    } else if (param.isImmediate()) {
	      addrModeName = "immediate";
	      pushFunction = param.pushForImmediate;
	    } else if (param.isZeroPage("")) {
	      addrModeName = "zeroPage";
	      pushFunction = param.pushForZeroPage;
	      register = "";
	    } else if (param.isZeroPage("X")) {
	      addrModeName = "zeroPageX";
	      pushFunction = param.pushForZeroPage;
	      register = "X";
	    } else if (param.isZeroPage("Y")) {
	      addrModeName = "zeroPageY";
	      pushFunction = param.pushForZeroPage;
	      register = "Y";
	    } else if (param.isAbsolute("")) {
	      addrModeName = "absolute";
	      pushFunction = param.pushForAbsolute;
	      register = "";
	    } else if (param.isAbsoluteIndirect("")) {
	      addrModeName = "absoluteIndirect";
	      pushFunction = param.pushForAbsoluteIndirect;
	      register = "";
	    } else if (param.isAbsolute("X")) {
	      addrModeName = "absoluteX";
	      pushFunction = param.pushForAbsolute;
	      register = "X";
	    } else if (param.isAbsolute("Y")) {
	      addrModeName = "absoluteY";
	      pushFunction = param.pushForAbsolute;
	      register = "Y";
	    } else if (param.isIndirect("X")) {
	      addrModeName = "indirectX";
	      pushFunction = param.pushForIndirect;
	      register = "X";
	    } else if (param.isIndirect("Y")) {
	      addrModeName = "indirectY";
	      pushFunction = param.pushForIndirect;
	      register = "Y";
	    } else {
	      raiseAddressingModeError(
	        lineNumber,
	        "Addressing mode of parameter '" + addrModeName + "' unknown"
	      );
	    }
	    param.addrModeName = addrModeName;
	    param.push = pushFunction;
	    param.register = register;
	    return param;
	  };
	}
	ParamFactory.prototype.param = Param;

	class CodeLine {
	  constructor(content, number) {
	    this.content = content;
	    this.number = number;
	    this.labelAddresses;
	    this.regExp = {
	      addressOnly: /^\*[\s]*=[\s]*([\$]?[0-9a-f]*)$/,
	      label: /^(\w+):.*$/,
	      commandWithLeadLabel: /^\w+:\s*(\w+)\s*.*$/,
	      command: /^(\w\w\w)\s*.*$/,
	      paramWithLeadLabel: /^\w+:\s*\w+\s+([-]?.*?)/,
	      param: /^\w\w\w+\s+([-]?.*?)/,
	    };
	  }

	  scanLabel(labelAddresses) {
	    this.labelAddresses = labelAddresses;
	    if (this.#isLabel()) {
	      if (this.label in this.labelAddresses) {
	        let defLineNumber = this.labelAddresses[this.label].lineNumber;
	        raiseLabelError(
	          this.number,
	          "Label '" + this.label + "' already defined at line " + defLineNumber
	        );
	        return;
	      }
	      // Use label as Address provisionaly => will be read correctly later!
	      labelAddresses[this.label] = new LabelAddress(this.label, this.number);
	    }
	    return;
	  }

	  compileLine({ memory, lineBeforeThisWasAddressOnly = false } = {}) {
	    if (this.#isBlank()) {
	      return 0;
	    }
	    if (this.#isOnlyAddress()) {
	      memory.defaultCodePC = this.address;
	      return -1; // to set lineBeforeThisWasAddressOnly
	    }
	    if (this.#isLabel()) {
	      this.labelAddresses[this.label] = new LabelAddress(
	        memory.defaultCodePC,
	        this.number
	      );
	      if (!this.#isCommandWithLeadLabel()) {
	        return 0; //lineLen = 0 and return here since labels might be recognized as commands
	      }
	    }

	    let commandName = this.commandName;
	    if (commandName == "") {
	      return 0; // lineLen = 0
	    }

	    if (commandName in Command.opCodes) {
	      let command = new Command(commandName, this.number);

	      let param = new ParamFactory().create({
	        name: this.paramName,
	        lineNumber: this.number,
	        labelAddresses: this.labelAddresses,
	        commandName: commandName,
	        memory: memory,
	      });

	      return command.compileOpCode(param, memory, lineBeforeThisWasAddressOnly);
	    }
	    raiseSyntaxError(this.number, "Command '" + commandName + "' undefined");
	    return 0;
	  }
	  get address() {
	    let addr = this.#extract(this.regExp.addressOnly);
	    addr = this.#addrToHexOrDec(addr);
	    return addr;
	  }
	  get label() {
	    return this.#extract(this.regExp.label);
	  }
	  get commandName() {
	    let lineContent = this.content;
	    let commandName = "";
	    if (lineContent.match(this.regExp.commandWithLeadLabel)) {
	      commandName = this.#extract(
	        this.regExp.commandWithLeadLabel
	      ).toUpperCase();
	    } else if (lineContent.match(this.regExp.command)) {
	      commandName = this.#extract(this.regExp.command).toUpperCase();
	    } else {
	      raiseSyntaxError(
	        this.number,
	        "Command in line '" + this.content + "' undefined"
	      );
	    }
	    return commandName;
	  }
	  get paramName() {
	    let lineContent = this.content;
	    let paramName = "";
	    if (lineContent.match(this.regExp.paramWithLeadLabel)) {
	      paramName = this.#extract(this.regExp.paramWithLeadLabel).replace(
	        /[ ]/g,
	        ""
	      );
	    } else if (lineContent.match(this.regExp.param)) {
	      paramName = this.#extract(this.regExp.param).replace(/[ ]/g, "");
	    }
	    return paramName;
	  }

	  noCode() {
	    if (this.content === "") {
	      return true;
	    }
	    return false;
	  }

	  #isBlank() {
	    if (this.content == "") {
	      return true;
	    }
	    return false;
	  }
	  #isOnlyAddress() {
	    if (this.content.match(this.regExp.addressOnly)) {
	      return true;
	    }
	    return false;
	  }
	  #isLabel() {
	    if (this.content.match(this.regExp.label)) {
	      return true;
	    }
	    return false;
	  }
	  #isCommandWithLeadLabel() {
	    if (this.content.match(this.regExp.commandWithLeadLabel)) {
	      return true;
	    }
	    return false;
	  }
	  #extract(regExp) {
	    return this.content.replace(regExp, "$1");
	  }
	  #addrToHexOrDec(addr) {
	    if (addr[0] == "$") {
	      addr = addr.replace(/^\$/, ""); //strip leading dollar sign
	      addr = parseInt(addr, 16);
	    } else {
	      addr = parseInt(addr, 10);
	    }
	    this.#validateAddress(addr);
	    return addr;
	  }
	  #validateAddress(addr) {
	    if (addr < 0x0 || addr > 0xffff) {
	      raiseRangeError(
	        "Address '" + addr + "' out of range(" + 0x0 + ", " + 0xfff + ")"
	      );
	    }
	    return;
	  }
	}
	CodeLine.prototype.toString = function () {
	  return "line " + this.number + ": " + this.content;
	};

	class Compiler {
	  constructor(plainCode) {
	    this.plainCode = plainCode;
	    this.codeLen = 0;
	    this.codeLines = new Array();
	    this.labelAddresses = new LabelAddresses();
	    this.memory = new Memory();
	  }

	  preprocessCode() {
	    let code = this.plainCode;
	    code += "\n\n";
	    code = code.split("\n");
	    code.forEach((line, lineNumber) => {
	      line = removeComments(line);
	      line = trimLine(line);
	      this.codeLines.push(new CodeLine(line, lineNumber + 1));
	    });
	    return this;

	    // helper
	    function removeComments(line) {
	      return line.replace(/^(.*?);.*/, "$1");
	    }
	    function trimLine(line) {
	      line = line.replace(/^\s+/, "");
	      line = line.replace(/\s+$/, "");
	      return line;
	    }
	  }

	  scanLabels() {
	    this.codeLines.forEach((codeLine) => {
	      codeLine.scanLabel(this.labelAddresses);
	    });
	    this.labelAddresses.printLabelCount();
	    return this;
	  }

	  compile() {
	    let lineBeforeThisWasAddressOnly = false;
	    this.codeLines.forEach((codeLine) => {
	      const codeLen = codeLine.compileLine({
	        memory: this.memory,
	        lineBeforeThisWasAddressOnly: lineBeforeThisWasAddressOnly,
	      });
	      if (codeLen >= 0) {
	        this.codeLen += codeLen;
	        lineBeforeThisWasAddressOnly = false;
	      } else {
	        // do not count, if there was a line with only an address directly before this line
	        lineBeforeThisWasAddressOnly = true;
	      }
	    });
	    // insert 0x00 at largest used memory address to mark end of memory
	    this.memory.writeByte(0xa28, new ByteEntry(0x00, -1));

	    return this;
	  }

	  insertLabelAddressesToMemory() {
	    if (this.noCode()) {
	      return this;
	    }
	    for (let codePC = 0x600; codePC < 0xa28; codePC++) {
	      this.labelAddresses.insertToMemory(codePC, this.memory);
	    }

	    return this;
	  }

	  noCode() {
	    if (this.codeLines.every((v) => v.noCode() === true)) {
	      return true;
	    }
	    return false;
	  }
	}

	function getAddressingModeAddr({
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let zp;
	  let addr;
	  if (["immediate"].includes(addrMode)) {
	    addr = exports.reg.PC;
	    exports.reg.PC++; //advance program counter;
	    return addr;
	  }

	  switch (addrMode) {
	    case "absolute":
	    case "absoluteX":
	    case "absoluteY":
	    case "absoluteIndirect":
	      addr = exports.memory.readWord(exports.reg.PC).value;
	      exports.reg.PC += 2; //advance program counter by 2 = #byte in word
	      break;
	    case "relative":
	    case "zeroPage":
	    case "zeroPageX":
	    case "zeroPageY":
	    case "(zeroPage, X)":
	    case "(zeroPage), Y":
	      zp = addr = exports.memory.readByte(exports.reg.PC).value;
	      exports.reg.PC++; // advance program counter
	  }
	  switch (addrMode) {
	    case "absoluteIndirect":
	      addr = exports.memory.readWord(addr).value;
	      break;
	    case "(zeroPage, X)":
	      zp = getLowerByte(addr + exports.reg.X);
	    case "(zeroPage), Y": // and "(zeroPage, X), due to missing break!!"
	      let lowerByte = exports.memory.readByte(zp).value;
	      let upperByte = exports.memory.readByte(zp + 1).value;
	      addr = (upperByte << 8) + lowerByte;
	      break;
	  }

	  addr += getRegisterAddr(addrMode.slice(-1));

	  if (onlyLowerByte) {
	    addr = getLowerByte(addr);
	  }
	  return addr;

	  function getRegisterAddr(register) {
	    switch (register) {
	      case "X":
	        return exports.reg.X;
	      case "Y": // for "(zeroPage), Y" as well
	        return exports.reg.Y;
	      default:
	        return 0x00;
	    }
	  }
	}

	// Add memory to accumulator with carry
	function i69(name) {
	  add({ name: name, addrMode: "immediate" });
	}
	function i6d(name) {
	  add({ name: name, addrMode: "absolute" });
	}
	function i7d(name) {
	  add({ name: name, addrMode: "absoluteX" });
	}
	function i79(name) {
	  add({ name: name, addrMode: "absoluteY" });
	}
	function i65(name) {
	  add({ name: name, addrMode: "zeroPage" });
	}
	function i75(name) {
	  add({ name: name, addrMode: "zeroPageX" });
	}
	// TODO: why i75 did this?? {exports.flags.setFromByte(exports.flags.getByteClearedOn("carry") | (value & 1));}
	function i61(name) {
	  add({ name: name, addrMode: "(zeroPage, X)" });
	}
	function i71(name) {
	  add({ name: name, addrMode: "(zeroPage), Y" });
	}

	function add({ name = "", addrMode = "", onlyLowerByte = false } = {}) {
	  let addr = getAddressingModeAddr({
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	  let value = exports.memory.readByte(addr).value;

	  consoleDebug({
	    msg:
	      name +
	      ": adding " +
	      fmtToHex(value) +
	      " to regA=" +
	      fmtToHexBr(exports.reg.A),
	  });
	  exports.reg.A = addTest(value);
	  exports.flags.toggleZeroAndNegative(exports.reg.A);
	  return;

	  function addTest(value) {
	    if ((exports.reg.A ^ value) & 0x80) {
	      exports.flags.overflow._set();
	    } else {
	      exports.flags.overflow.clear();
	    }

	    let tmp;
	    if (exports.flags.decimal.isSet()) {
	      tmp = (exports.reg.A & 0xf) + (value & 0xf) + exports.flags.carry.value;
	      if (tmp >= 10) {
	        tmp = 0x10 | ((tmp + 6) & 0xf);
	      }

	      tmp += (exports.reg.A & 0xf0) + (value & 0xf0);
	      if (tmp >= 160) {
	        exports.flags.carry._set();
	        if (exports.flags.exports.flagsClearedOn("overflow") && tmp >= 0x180) {
	          exports.flags.overflow.clear();
	        }
	        tmp += 0x60;
	      } else {
	        exports.flags.carry.clear();
	        if (exports.flags.getByteClearedOn("overflow") && tmp < 0x80) {
	          exports.flags.overflow.clear();
	        }
	      }
	    } else {
	      tmp = exports.reg.A + value + exports.flags.carry.value;
	      if (tmp >= 0x100) {
	        exports.flags.carry._set();
	        if (exports.flags.getByteClearedOn("overflow") && tmp >= 0x180) {
	          exports.flags.overflow.clear();
	        }
	      } else {
	        exports.flags.carry.clear();
	        if (exports.flags.getByteClearedOn("overflow") && tmp < 0x80) {
	          exports.flags.overflow.clear();
	        }
	      }
	    }
	    return getLowerByte(tmp);
	  }
	}

	function _eb(name) {
	  ie9(name);
	} // same as ie9, SUB immediate

	// Subtract memory from accumulator with borrow
	function ie9(name) {
	  substract({ name: name, addrMode: "immediate" });
	}
	function ied(name) {
	  substract({ name: name, addrMode: "absolute" });
	}
	function ifd(name) {
	  substract({ name: name, addrMode: "absoluteX" });
	}
	function if9(name) {
	  substract({ name: name, addrMode: "absoluteY" });
	}
	function ie5(name) {
	  substract({ name: name, addrMode: "zeroPage" });
	}
	function if5(name) {
	  substract({ name: name, addrMode: "zeroPageX" });
	}
	// TODO: why if5 did this?? {exports.flags.setFromByte(exports.flags.getByteClearedOn("carry") | (value & 1));}
	function ie1(name) {
	  substract({ name: name, addrMode: "(zeroPage, X)" });
	}
	function if1(name) {
	  substract({ name: name, addrMode: "(zeroPage), Y" });
	}

	function substract({ name = "", addrMode = "", onlyLowerByte = false } = {}) {
	  let addr = getAddressingModeAddr({
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	  let value = exports.memory.readByte(addr).value;

	  consoleDebug({
	    msg:
	      name +
	      ": substracting " +
	      fmtToHex(value) +
	      " from regA=" +
	      fmtToHexBr(exports.reg.A),
	  });
	  exports.reg.A = testSubstract(value);
	  exports.flags.toggleZeroAndNegative(exports.reg.A);

	  return;

	  function testSubstract(value) {
	    if ((exports.reg.A ^ value) & 0x80) {
	      vflag = 1;
	    } else {
	      vflag = 0;
	    }

	    let tmp;
	    let w;
	    if (exports.flags.decimal.isSet()) {
	      tmp =
	        0xf + (exports.reg.A & 0xf) - (value & 0xf) + exports.flags.carry.value;
	      if (tmp < 0x10) {
	        w = 0;
	        tmp -= 6;
	      } else {
	        w = 0x10;
	        tmp -= 0x10;
	      }
	      w += 0xf0 + (exports.reg.A & 0xf0) - (value & 0xf0);
	      if (w < 0x100) {
	        exports.flags.carry.clear();
	        if (exports.flags.getByteClearedOn("overflow") && w < 0x80) {
	          exports.flags.overflow.clear();
	        }
	        w -= 0x60;
	      } else {
	        exports.flags.carry._set();
	        if (exports.flags.getByteClearedOn("overflow") && w >= 0x180) {
	          exports.flags.overflow.clear();
	        }
	      }
	      w += tmp;
	    } else {
	      w = 0xff + exports.reg.A - value + exports.flags.carry.value;
	      if (w < 0x100) {
	        exports.flags.carry.clear();
	        if (exports.flags.getByteClearedOn("overflow") && w < 0x80) {
	          exports.flags.overflow.clear();
	        }
	      } else {
	        exports.flags.carr._set();
	        if (exports.flags.getByteClearedOn("overflow") && w >= 0x180) {
	          exports.flags.overflow.clear();
	        }
	      }
	    }
	    return getLowerByte(w);
	  }
	}

	function ic9(name) {
	  compare({ name: name, addrMode: "immediate" });
	}
	function icd(name) {
	  compare({ name: name, addrMode: "absolute" });
	}
	function idd(name) {
	  compare({ name: name, addrMode: "absoluteX" });
	}
	function id9(name) {
	  compare({ name: name, addrMode: "absoluteY" });
	}
	function ic5(name) {
	  compare({ name: name, addrMode: "zeroPage" });
	}
	function id5(name) {
	  compare({ name: name, addrMode: "zeroPageX" });
	}
	function ic1(name) {
	  compare({ name: name, addrMode: "(zeroPage, X)" });
	}
	function id1(name) {
	  compare({ name: name, addrMode: "(zeroPage), Y" });
	}
	// CMP: Compare Memory and Index X
	function ie0(name) {
	  compare({ name: name, register: "X", addrMode: "immediate" });
	}
	function iec(name) {
	  compare({ name: name, register: "X", addrMode: "absolute" });
	}
	function ie4(name) {
	  compare({ name: name, register: "X", addrMode: "zeroPage" });
	}
	// CMP: Compare Memory and Index Y
	// TODO: Was this old code for ic0 wrong, because its inconsitent?
	// if( (exports.reg.Y+value) > 0xff ) exports.flags.zero._set(); else exports.flags.zero.clear();
	// value = (exports.reg.Y-value);
	function ic0(name) {
	  compare({ name: name, register: "Y", addrMode: "immediate" });
	}
	function icc(name) {
	  compare({ name: name, register: "Y", addrMode: "absolute" });
	}
	function ic4(name) {
	  compare({ name: name, register: "Y", addrMode: "zeroPage" });
	}

	function compare({
	  name = "",
	  register = "A",
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let regValue = exports.reg[register];
	  let addr = getAddressingModeAddr({
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	  let value = exports.memory.readByte(addr).value;

	  consoleDebug({
	    msg:
	      name +
	      ": compare reg" +
	      register +
	      "=" +
	      fmtToHexBr(regValue) +
	      " with " +
	      fmtToHex(value),
	  });
	  let compareResult = compareTest(regValue, value);
	  exports.flags.toggleZeroAndNegative(compareResult);
	  return;

	  function compareTest(regValue, value) {
	    if (regValue >= value) {
	      // Thanks, "Guest"
	      exports.flags.zero._set();
	    } else {
	      exports.flags.zero.clear();
	    }
	    return regValue - value;
	  }
	}

	function ie8(name) {
	  increment({ name: name, impliedRegister: "X" });
	}
	function ic8(name) {
	  increment({ name: name, impliedRegister: "Y" });
	}
	function iee(name) {
	  increment({ name: name, addrMode: "absolute" });
	}
	function ife(name) {
	  increment({ name: name, addrMode: "absoluteX" });
	}
	function ie6(name) {
	  increment({ name: name, addrMode: "zeroPage" });
	}
	function if6(name) {
	  increment({ name: name, addrMode: "zeroPageX" });
	}

	function increment({
	  name = "",
	  addrMode = "",
	  impliedRegister = "",
	} = {}) {
	  crement({
	    type: "IN",
	    name: name,
	    addrMode: addrMode,
	    impliedRegister: impliedRegister,
	  });
	  return;
	}

	// decrement =================================================================================
	function ica(name) {
	  decrement({ name: name, impliedRegister: "X" });
	}
	function i88(name) {
	  decrement({ name: name, impliedRegister: "Y" });
	}
	function ice(name) {
	  decrement({ name: name, addrMode: "absolute" });
	}
	function ide(name) {
	  decrement({ name: name, addrMode: "absoluteX" });
	}
	function ic6(name) {
	  decrement({ name: name, addrMode: "zeroPage" });
	}
	function id6(name) {
	  decrement({ name: name, addrMode: "zeroPageX" });
	}

	function decrement({ name = "", addrMode = "", impliedRegister = "" } = {}) {
	  crement({
	    type: "DE",
	    name: name,
	    addrMode: addrMode,
	    impliedRegister: impliedRegister,
	  });
	  return;
	}

	function crement({
	  type = "",
	  name = "",
	  addrMode = "",
	  impliedRegister = "X",
	} = {}) {
	  let value = exports.reg[impliedRegister];
	  let valueName = "reg" + impliedRegister;
	  let addr;

	  if (!["X", "Y"].includes(impliedRegister)) {
	    addr = getAddressingModeAddr({ addrMode: addrMode });
	    let byteEntry = exports.memory.readByte(addr);
	    value = byteEntry.value;
	    valueName = fmtToHex(addr);
	    if (addr in exports.addressLineNumbers) {
	      valueName +=
	        "[lineNo: " + exports.addressLineNumbers[addr].lineNumber + "]";
	    }
	  }

	  let oldValue = value;

	  if (type === "IN") {
	    value = getLowerByte(++value);
	  } else {
	    // if (type === "DE")
	    value = getLowerByte(--value);
	  }
	  consoleDebug({
	    msg:
	      name +
	      ": " +
	      type +
	      "crement value at " +
	      valueName +
	      fmtToHexBr(oldValue) +
	      " to " +
	      fmtToHex(value),
	  });

	  exports.flags.toggleZeroAndNegative(value);
	  if (["X", "Y"].includes(impliedRegister)) {
	    exports.reg[impliedRegister] = value;
	    return;
	  }
	  let lineNumber = addr;
	  if (addr in exports.addressLineNumbers) {
	    lineNumber = exports.addressLineNumbers[addr];
	  }
	  exports.memory.writeByte(
	    addr,
	    new WordEntry(value, lineNumber).lowerByteEntry
	  );
	  return addr;
	}

	function ierr(name) {
	  let message = name + " illegal Opcode not allowed, skipping";
	  raiseRunTimeError(fmtToHexWord(exports.reg.PC - 1), message);
	  console.warn(message);
	}

	// Set and Clear [implied addressing mode]=====================================================
	// TODO: i58 and i78 are not implemented?
	function i58(name) {
	  exports.flags.clear();
	  console.warn(name + ": clearing interrupt disable status");
	}
	function i78(name) {
	  exports.flags._set();
	  console.warn(name + ": setting interrupt disable status");
	}
	function i18(name) {
	  clearFlag(name, "carry");
	}
	function i38(name) {
	  setFlag(name, "carry");
	}
	function id8(name) {
	  clearFlag(name, "decimal");
	}
	function if8(name) {
	  setFlag(name, "decimal");
	}
	function ib8(name) {
	  clearFlag(name, "overflow");
	}
	// clearValue + SetValue = 0xff = 255
	function clearFlag(name, flagName) {
	  consoleDebug({ msg: name + ": clearing " + flagName + " flag" });
	  exports.flags[flagName].clear();
	}
	function setFlag(name, flagName) {
	  consoleDebug({ msg: name + ": setting " + flagName + " flag" });
	  exports.flags[flagName]._set();
	}

	// jumping ===================================================================================
	function i20(name) {
	  pushReturnAddress();
	  jump({ name: name, msg: "subroutine " });
	  return;

	  function pushReturnAddress() {
	    let addrBeforeNextInstruction = exports.reg.PC + 1;
	    // exports.reg.PC + 1 because we get a word, i.e., 2 byte in jump()
	    exports.memory.pushWordToStack(new WordEntry(addrBeforeNextInstruction));
	  }
	}
	function i4c(name) {
	  jump({ name: name, addrMode: "absolute" });
	}

	function i6c(name) {
	  jump({ name: name, addrMode: "absoluteIndirect" });
	  // ierr(name + ": [UNIMPL] jumping with absoluteIndirect addressingMode");
	}
	function jump({ name = "", msg = "", addrMode = "absolute" } = {}) {
	  const addr = getAddressingModeAddr({ addrMode: addrMode });
	  exports.reg.PC = addr; // the actual jump to address
	  consoleDebug({
	    msg:
	      name +
	      ": jumping to " +
	      msg +
	      exports.labelAddresses.getLabel(exports.reg.PC) +
	      fmtToHexWordBr(exports.reg.PC) +
	      "[lineNo: " +
	      exports.addressLineNumbers[exports.reg.PC].lineNumber +
	      "]",
	    bold: true,
	  });
	}

	// returning ---------------------------------------------------------------------------------
	function i40(name) {
	  // this actually should pop flags/processor state from stack and pop PC from stack
	  // const status = exports.memory.popByteFromStack();
	  // const pc = exports.memory.popByteFromStack();
	  consoleDebug({ msg: name + ": returning from interrupt", bold: true });
	}
	function i60(name) {
	  const returnAddr = exports.memory.popWordFromStack().value;
	  exports.reg.PC = returnAddr;
	  consoleDebug({
	    msg:
	      name +
	      ": returning from subroutine to " +
	      exports.labelAddresses.getLabel(exports.reg.PC) +
	      fmtToHexWordBr(exports.reg.PC),
	  });
	}

	// branching =================================================================================
	function i10(name) {
	  jumpBranch({ type: "BPL", name: name });
	}
	function i10RelativeMinus(name) {
	  jumpBranch({ type: "BPL", name: name, sign: "Minus" });
	}

	function i30(name) {
	  jumpBranch({ type: "BMI", name: name });
	}
	function i30RelativeMinus(name) {
	  jumpBranch({ type: "BMI", name: name, sign: "Minus" });
	}

	function i50(name) {
	  jumpBranch({ type: "BVC", name: name });
	}
	function i50RelativeMinus(name) {
	  jumpBranch({ type: "BVC", name: name, sign: "Minus" });
	}

	function i70(name) {
	  jumpBranch({ type: "BVS", name: name });
	}
	function i70RelativeMinus(name) {
	  jumpBranch({ type: "BVS", name: name, sign: "Minus" });
	}

	function i90(name) {
	  jumpBranch({ type: "BCC", name: name });
	}
	function i90RelativeMinus(name) {
	  jumpBranch({ type: "BCC", name: name, sign: "Minus" });
	}

	function ib0(name) {
	  jumpBranch({ type: "BCS", name: name });
	}
	function ib0RelativeMinus(name) {
	  jumpBranch({ type: "BCS", name: name, sign: "Minus" });
	}

	function id0(name) {
	  jumpBranch({ type: "BNE", name: name });
	}
	function id0RelativeMinus(name) {
	  jumpBranch({ type: "BNE", name: name, sign: "Minus" });
	}

	function if0(name) {
	  jumpBranch({ type: "BEQ", name: name });
	}
	function if0RelativeMinus(name) {
	  jumpBranch({ type: "BEQ", name: name, sign: "Minus" });
	}

	function jumpBranch({
	  type = "",
	  name = "",
	  addrMode = "relative",
	  sign = "",
	} = {}) {
	  let conditions = {
	    BCC: exports.flags.carry.isClear(),
	    BCS: exports.flags.carry.isSet(),
	    BNE: exports.flags.zero.isClear(),
	    BEQ: exports.flags.zero.isSet(),
	    BVC: exports.flags.overflow.isClear(),
	    BVS: exports.flags.overflow.isSet(),
	    BPL: exports.flags.negative.isClear(),
	    BMI: exports.flags.negative.isSet(),
	  };

	  let offset = getAddressingModeAddr({ addrMode: addrMode });
	  if (sign === "Minus") {
	    offset = 0x100 - offset; // convert to two's complement
	  }
	  if (!conditions[type]) {
	    consoleDebug({
	      msg:
	        name +
	        ": skipping branch, moving on to " +
	        fmtToHexWord(exports.reg.PC),
	    });
	    return;
	  }

	  exports.reg.PC = getBranchAddress(offset); // the actual jump means setting the program counter
	  consoleDebug({
	    msg:
	      name +
	      ": branching to " +
	      exports.labelAddresses.getLabel(exports.reg.PC) +
	      fmtToHexWordBr(exports.reg.PC) +
	      "[lineNo: " +
	      exports.addressLineNumbers[exports.reg.PC].lineNumber +
	      "]",
	    bold: true,
	  });
	  return;

	  function getBranchAddress(offset) {
	    // Simulating two's complement
	    if (offset > 0x7f) {
	      //0x7f = 127
	      return exports.reg.PC - (0x100 - offset);
	    }
	    return exports.reg.PC + offset;
	  }
	}

	function _02(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _12(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _22(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _32(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _42(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _52(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _62(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _72(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _92(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _b2(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _d2(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f2(name);
	}
	function _f2(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": KIL, processor locked" });
	  exports.processorLocked = true;
	}

	// load accumulator with memory LDA
	function ia9(name) {
	  load({ name: name, addrMode: "immediate" });
	}
	function iad(name) {
	  load({ name: name, addrMode: "absolute" });
	}
	function ibd(name) {
	  load({ name: name, addrMode: "absoluteX" });
	}
	function ib9(name) {
	  load({ name: name, addrMode: "absoluteY" });
	}
	function ia5(name) {
	  load({ name: name, addrMode: "zeroPage" });
	}
	function ib5(name) {
	  load({ name: name, addrMode: "zeroPageX", onlyLowerByte: true });
	}
	// TODO: why do we bytecut here?
	function ia1(name) {
	  load({ name: name, addrMode: "(zeroPage, X)" });
	}
	function ib1(name) {
	  load({ name: name, addrMode: "(zeroPage), Y" });
	}

	// load index X with memory
	function ia2(name) {
	  load({ name: name, register: "X", addrMode: "immediate" });
	}
	function iae(name) {
	  load({ name: name, register: "X", addrMode: "absolute" });
	}
	function ibe(name) {
	  load({ name: name, register: "X", addrMode: "absoluteY" });
	}
	function ia6(name) {
	  load({ name: name, register: "X", addrMode: "zeroPage" });
	}
	function ib6(name) {
	  load({ name: name, register: "X", addrMode: "zeroPageY" });
	}

	// load index Y with memory
	function ia0(name) {
	  load({ name: name, register: "Y", addrMode: "immediate" });
	}
	function iac(name) {
	  load({ name: name, register: "Y", addrMode: "absolute" });
	}
	function ibc(name) {
	  load({ name: name, register: "Y", addrMode: "absoluteX" });
	}
	function ia4(name) {
	  load({ name: name, register: "Y", addrMode: "zeroPage" });
	}
	function ib4(name) {
	  load({ name: name, register: "Y", addrMode: "zeroPageX" });
	}

	function load({
	  name = "",
	  register = "A",
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let addr = getAddressingModeAddr({
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	  let value = exports.memory.readByte(addr).value;
	  let lineNumber = fmtToHex(addr);

	  if (addr in exports.addressLineNumbers) {
	    lineNumber +=
	      "[lineNo: " + exports.addressLineNumbers[addr].lineNumber + "]";
	  }

	  consoleDebug({
	    msg:
	      name +
	      ": loading value from addr " +
	      lineNumber +
	      "=" +
	      fmtToHex(value) +
	      " to reg" +
	      register,
	  });
	  exports.reg[register] = value;
	  exports.flags.toggleZeroAndNegative(value);
	  return;
	}

	function _a7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "zeroPage" });
	  exports.reg.X = exports.reg.A;
	}
	function _b7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "zeroPageY" });
	  exports.reg.X = exports.reg.A;
	}
	function _af(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "absolute" });
	  exports.reg.X = exports.reg.A;
	}
	function _bf(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "absoluteY" });
	  exports.reg.X = exports.reg.A;
	}
	function _a3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "(zeroPage, X)" });
	  exports.reg.X = exports.reg.A;
	}
	function _b3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  load({ name: name, addrMode: "(zeroPage), Y" });
	  exports.reg.X = exports.reg.A;
	}

	function logicInstructionOnRegAWithMemoryResultToRegA({
	  type = "",
	  typeName = "",
	  name = "",
	  addrMode = "",
	} = {}) {
	  const addr = getAddressingModeAddr({ addrMode: addrMode });
	  const value = exports.memory.readByte(addr).value;

	  exports.reg.A = logicInstructionOnRegA({
	    value: value,
	    valueName: "memory",
	    type: type,
	    typeName: typeName,
	    name: name,
	  });
	  return;
	}

	function logicInstructionOnRegAWithRegXResultToRegA({
	  type = "",
	  typeName = "",
	  name = "",
	} = {}) {
	  exports.reg.A = logicInstructionOnRegA({
	    value: exports.reg.X,
	    valueName: "regX",
	    type: type,
	    typeName: typeName,
	    name: name,
	  });

	  return;
	}

	function logicInstructionOnRegAWithRegXResultToAddr({
	  type = "",
	  typeName = "",
	  name = "",
	  addrMode = "",
	} = {}) {
	  const value = logicInstructionOnRegA({
	    value: exports.reg.X,
	    valueName: "regX",
	    type: type,
	    typeName: typeName,
	    name: name,
	  });

	  const addr = getAddressingModeAddr({ addrMode: addrMode });
	  exports.memory.writeByte(addr, new ByteEntry(value));
	  return;
	}

	function logicInstructionOnRegA({
	  value = null,
	  valueName = "",
	  type = "",
	  typeName = "",
	  name = "",
	} = {}) {
	  return logicInstruction({
	    valueA: exports.reg.A,
	    valueAName: "regA",
	    valueB: value,
	    valueBName: valueName,
	    type: type,
	    typeName: typeName,
	    name: name,
	  });
	}

	function logicInstruction({
	  valueA = null,
	  valueAName = "",
	  valueB = null,
	  valueBName = "",
	  type = "",
	  typeName = "",
	  name = "",
	} = {}) {
	  if (valueA == null || valueB == null) {
	    const errorMsg =
	      "logicInstruction of " +
	      type +
	      typeName +
	      " has null value, valueA[" +
	      valueA +
	      "], valueB[" +
	      valueB +
	      "]";
	    raiseRunTimeError(fmtToHexWord(exports.reg.PC - 1), errorMsg);
	  }
	  consoleDebug({
	    msg:
	      name +
	      ": " +
	      type +
	      typeName +
	      " on " +
	      valueAName +
	      fmtToHexBr(valueA) +
	      " and " +
	      valueBName +
	      fmtToHexBr(valueB),
	  });

	  switch (type) {
	    case "AND":
	      valueA &= valueB;
	      break;
	    case "ORA":
	      valueA |= valueB;
	      break;
	    case "EOR":
	      valueA ^= valueB;
	      break;
	  }
	  exports.flags.toggleZeroAndNegative(valueA);
	  return valueA;
	}

	// Logic AND memory with Accumulator=[ A & M -> A ]===========================================
	function i29(name) {
	  and({ name: name, addrMode: "immediate" });
	}
	function i2d(name) {
	  and({ name: name, addrMode: "absolute" });
	}
	function i3d(name) {
	  and({ name: name, addrMode: "absoluteX" });
	}
	function i39(name) {
	  and({ name: name, addrMode: "absoluteY" });
	}
	function i25(name) {
	  and({ name: name, addrMode: "zeroPage" });
	}
	function i35(name) {
	  and({ name: name, addrMode: "zeroPage" });
	}
	function i21(name) {
	  and({ name: name, addrMode: "(zeroPage, X)" });
	}
	function i31(name) {
	  and({ name: name, addrMode: "(zeroPage), Y" });
	}

	function and({ typeName = "", name = "", addrMode = "" } = {}) {
	  logicInstructionOnRegAWithMemoryResultToRegA({
	    type: "AND",
	    typeName: typeName,
	    name: name,
	    addrMode: addrMode,
	  });
	}

	// rotate left one bit
	function i2a(name) {
	  rotateLeft({ name: name, accumulator: true });
	}
	function i2e(name) {
	  rotateLeft({ name: name, addrMode: "absolute" });
	}
	function i3e(name) {
	  rotateLeft({ name: name, addrMode: "absoluteX" });
	}
	function i26(name) {
	  rotateLeft({ name: name, addrMode: "zeroPage" });
	}
	function i36(name) {
	  rotateLeft({ name: name, addrMode: "zeroPageX" });
	}

	function rotateLeft({
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  rotate({
	    type: "LEFT",
	    name: name,
	    accumulator: accumulator,
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	}
	// rotate right one bit
	function i6a(name) {
	  rotateRight({ name: name, accumulator: true });
	}
	function i6e(name) {
	  rotateRight({ name: name, addrMode: "absolute" });
	}
	function i7e(name) {
	  rotateRight({ name: name, addrMode: "absoluteX" });
	}
	function i66(name) {
	  rotateRight({ name: name, addrMode: "zeroPage" });
	}
	function i76(name) {
	  rotateRight({ name: name, addrMode: "zeroPageX", onlyLowerByte: true });
	}

	function rotateRight({
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  rotate({
	    type: "RIGHT",
	    name: name,
	    accumulator: accumulator,
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	}
	function rotate({
	  type = "",
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let value = exports.reg.A;
	  let addr;
	  if (!accumulator) {
	    addr = getAddressingModeAddr({
	      addrMode: addrMode,
	      onlyLowerByte: onlyLowerByte,
	    });
	    value = exports.memory.readByte(addr).value;
	  }

	  let oldValue = value;
	  let byte;
	  if (type === "LEFT") {
	    byte = exports.flags.getByteClearedOn("carry") | ((value >> 7) & 1);
	    value = (value << 1) | exports.flags.carry.value;
	  } else {
	    byte = exports.flags.getByteClearedOn("carry") | (value & 1);
	    value >>= 1;
	    if (exports.flags.carry.isSet()) {
	      value |= 0x80;
	    }
	  }
	  exports.flags.setFromByte(byte);

	  consoleDebug({
	    msg:
	      name +
	      ": rotate " +
	      fmtToHex(oldValue) +
	      " " +
	      type +
	      " to " +
	      fmtToHex(value),
	  });

	  exports.flags.toggleZeroAndNegative(value);
	  if (accumulator) {
	    exports.reg.A = value;
	    return;
	  }
	  let lineNumber = addr;
	  if (addr in exports.addressLineNumbers) {
	    lineNumber = exports.addressLineNumbers[addr];
	  }
	  exports.memory.writeByte(
	    addr,
	    new WordEntry(value, lineNumber).lowerByteEntry
	  );
	  return addr;
	}

	// arithmetic shift one bit left
	function i0a(name) {
	  shiftLeft({ name: name, accumulator: true });
	}
	function i0e(name) {
	  shiftLeft({ name: name, addrMode: "absolute" });
	}
	function i1e(name) {
	  shiftLeft({ name: name, addrMode: "absoluteX" });
	}
	function i06(name) {
	  shiftLeft({ name: name, addrMode: "zeroPage" });
	}
	function i16(name) {
	  shiftLeft({ name: name, addrMode: "zeroPageX" });
	}

	function shiftLeft({
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  shift({
	    type: "LEFT",
	    name: name,
	    accumulator: accumulator,
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	}
	//logical shift right one bit
	function i4a(name) {
	  shiftRight({ name: name, accumulator: true });
	}
	function i4e(name) {
	  shiftRight({ name: name, addrMode: "absolute" });
	}
	function i5e(name) {
	  shiftRight({ name: name, addrMode: "absoluteX" });
	}
	function i46(name) {
	  shiftRight({ name: name, addrMode: "zeroPage" });
	}
	function i56(name) {
	  shiftRight({ name: name, addrMode: "zeroPageX" });
	}

	function shiftRight({
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  shift({
	    type: "RIGHT",
	    name: name,
	    accumulator: accumulator,
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	}

	function shift({
	  type = "",
	  name = "",
	  accumulator = false,
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let value = exports.reg.A;
	  let addr;
	  if (!accumulator) {
	    addr = getAddressingModeAddr({
	      addrMode: addrMode,
	      onlyLowerByte: onlyLowerByte,
	    });
	    value = exports.memory.readByte(addr).value;
	  }

	  let oldValue = value;
	  let byte;
	  if (type === "LEFT") {
	    byte = exports.flags.getByteClearedOn("carry") | ((value >> 7) & 1);
	    exports.flags.setFromByte(byte);
	    value <<= 1;
	  } else {
	    byte = exports.flags.getByteClearedOn("carry") | (value & 1);
	    value >>= 1;
	  }
	  exports.flags.setFromByte(byte);

	  consoleDebug({
	    msg:
	      name +
	      ": shifting " +
	      fmtToHex(oldValue) +
	      " " +
	      type +
	      " to " +
	      fmtToHex(value),
	  });

	  exports.flags.toggleZeroAndNegative(value);
	  if (accumulator) {
	    exports.reg.A = value;
	    return;
	  }
	  let lineNumber = addr;
	  if (addr in exports.addressLineNumbers) {
	    lineNumber = exports.addressLineNumbers[addr];
	  }
	  exports.memory.writeByte(
	    addr,
	    new WordEntry(value, lineNumber).lowerByteEntry
	  );
	  return addr;
	}

	// Illegal Ands ------------------------------------------------------------------------------
	// AAC:= Logic AND memory with Accumulator, set carry on negative result
	function _0b(name) {
	  _2b(name);
	}
	function _2b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	    return;
	  }
	  and({
	    name: name,
	    typeName: " with CarrySet",
	    addrMode: "immediate",
	  });
	  if (isNegative(exports.reg.A)) {
	    exports.flags.carry._set();
	  }
	}

	// AAX:= Logic AND X register with with Accumulator, save to Memory [ A & X -> M ]
	function _8f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  andRegAWithRegX({
	    name: name,
	    typeName: " regX with regA and save to memory",
	    addrMode: "absolute",
	    writeToAddr: true,
	  });
	}
	function _87(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  andRegAWithRegX({
	    name: name,
	    typeName: " regX with regA and save to memory",
	    addrMode: "zeroPage",
	    writeToAddr: true,
	  });
	}
	function _97(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  andRegAWithRegX({
	    name: name,
	    typeName: " regX with regA and save to memory",
	    addrMode: "zeroPageY",
	    writeToAddr: true,
	  });
	}
	function _83(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  andRegAWithRegX({
	    name: name,
	    typeName: " regX with regA and save to memory",
	    addrMode: "(zeroPage, X)",
	    writeToAddr: true,
	  });
	} // AAX (indirect, X) => AAX (zp, X)

	// ARR:= Logic AND memory with Accumulator, then rotate von bit right in accumulator and check bit 5 and 6
	function _6b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  and({
	    name: name,
	    typeName: " (, then rotate regA one bit right and check bit 5 and 6)",
	    addrMode: "immediate",
	  });
	  rotateRight({ name: name, accumulator: true });
	  const value = exports.reg.A;
	  const valueBit5 = getBit(value, 5);
	  const valueBit6 = getBit(value, 6);

	  if (valueBit5 && valueBit6) {
	    exports.flags.carry._set();
	    exports.flags.overflow.clear();
	  } else if (!valueBit5 && !valueBit6) {
	    exports.flags.carry.clear();
	    exports.flags.overflow.clear();
	  } else if (valueBit5 && !valueBit6) {
	    exports.flags.carry.clear();
	    exports.flags.overflow._set();
	  } else if (!valueBit5 && valueBit6) {
	    exports.flags.carry._set();
	    exports.flags.overflow._set();
	  }
	}

	// ASR:= Logic AND memory with Accumulator, then shift von bit right in accumulator
	function _4b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  and({
	    name: name,
	    typeName: " (, then shift regA one bit right)",
	    addrMode: "immediate",
	  });
	  shiftRight({ name: name, accumulator: true });
	}

	// ATX:= Logic AND memory with Accumulator, then transfer regA to regX
	function _ab(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  and({
	    name: name,
	    typeName: " (, then transfer regA to regX)",
	    addrMode: "immediate",
	  });
	  exports.reg.X = exports.reg.A;
	}

	// AXA:= Logic AND regX with Accumulator, then AND result with 7 and store in memory
	// ToDo: Check assumption that result of first AND written to regA
	function _9f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  axa({ name: name, addrMode: "absoluteY" });
	}
	function _93(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  axa({ name: name, addrMode: "(zeroPage), Y" });
	}

	function axa({ name = "", addrMode = "" } = {}) {
	  andRegAWithRegXToRegA({
	    name: name,
	    typeName: " regX with regA, then AND result with 7, then store to memory",
	  });
	  const value = exports.reg.A & 7; // second AND with 7
	  const addr = getAddressingModeAddr({ addrMode: addrMode });
	  exports.memory.writeByte(addr, new ByteEntry(value));
	}

	// AXS:= Logic AND regX with Accumulator, then store in regX, then substract byte from reg X without Borrow
	function _cb(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  //   andRegAWithRegXToRegX({
	  //     name: name,
	  // 	typeName: " regX with regA to regX, then substract memory from regX without borrow",
	  //   });
	  //   const andResult = exports.reg.X
	  //   const addr = getAddressingModeAddr({ addrMode: addrMode });
	  //   let value = exports.memory.readByte(addr).value;
	}
	// function andRegAWithRegXToRegX({ name = "", typeName = "" } = {}) {
	//   logicInstructionOnRegAWithRegXResultToRegX({
	//     type: "AND",
	//     typeName: typeName,
	//     name: name,
	//   });
	// }

	function andRegAWithRegX({ name = "", typeName = "", addrMode = "" } = {}) {
	  logicInstructionOnRegAWithRegXResultToAddr({
	    type: "AND",
	    typeName: typeName,
	    name: name,
	    addrMode: addrMode,
	  });
	}

	function andRegAWithRegXToRegA({ name = "", typeName = "" } = {}) {
	  logicInstructionOnRegAWithRegXResultToRegA({
	    type: "AND",
	    typeName: typeName,
	    name: name,
	  });
	}

	// LAR:= Logic AND memory with regSP, transfer to regA, regX and regSP
	function _bb(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  const addr = getAddressingModeAddr({ addrMode: "absoluteY" });
	  const value = exports.memory.readByte(addr).value;
	  exports.reg.A = logicInstruction({
	    type: "AND",
	    valueA: value,
	    valueAName: "memory",
	    valueB: exports.memory.regSP,
	    valueBName: "regSP",
	    name: name,
	  });
	  exports.reg.X = exports.reg.A;
	  exports.memory.regSP = exports.reg.A;
	}

	//Logic Or Memory with Accumulator
	function i09(name) {
	  or({ name: name, addrMode: "immediate" });
	}
	function i0d(name) {
	  or({ name: name, addrMode: "absolute" });
	}
	function i1d(name) {
	  or({ name: name, addrMode: "absoluteX" });
	}
	function i19(name) {
	  or({ name: name, addrMode: "absoluteY" });
	}
	function i05(name) {
	  or({ name: name, addrMode: "zeroPage" });
	}
	function i15(name) {
	  or({ name: name, addrMode: "zeroPageX" });
	}
	function i01(name) {
	  or({ name: name, addrMode: "(zeroPage, X)" });
	}
	function i11(name) {
	  or({ name: name, addrMode: "(zeroPage), Y" });
	}

	function or({ name = "", addrMode = "" } = {}) {
	  logicInstructionOnRegAWithMemoryResultToRegA({
	    type: "ORA",
	    name: name,
	    addrMode: addrMode,
	  });
	}

	// Logic Exclusive-Or memory with accumulator
	function i49(name) {
	  xor({ name: name, addrMode: "immediate" });
	}
	function i4d(name) {
	  xor({ name: name, addrMode: "absolute" });
	}
	function i5d(name) {
	  xor({ name: name, addrMode: "absoluteX" });
	}
	function i59(name) {
	  xor({ name: name, addrMode: "absoluteY" });
	}
	function i45(name) {
	  xor({ name: name, addrMode: "zeroPage" });
	}
	function i55(name) {
	  xor({ name: name, addrMode: "zeroPageX" });
	}
	function i41(name) {
	  xor({ name: name, addrMode: "(zeroPage, X)" });
	}
	function i51(name) {
	  xor({ name: name, addrMode: "(zeroPage), Y" });
	}

	function xor({ name = "", addrMode = "" } = {}) {
	  logicInstructionOnRegAWithMemoryResultToRegA({
	    type: "EOR",
	    name: name,
	    addrMode: addrMode,
	  });
	}

	function iea(name) {
	  // implied
	  consoleDebug({ msg: name + ": NOOP" });
	}

	function _1a(name) {
	  _fa(name);
	  consoleDebug({ msg: name + ": NOOP" });
	} // NOP implied
	function _3a(name) {
	  _fa(name);
	} // NOP implied
	function _5a(name) {
	  _fa(name);
	} // NOP implied
	function _7a(name) {
	  _fa(name);
	} // NOP implied
	function _da(name) {
	  _fa(name);
	} // NOP implied
	function _fa(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": NOOP implied" });
	} // NOP implied

	// DOP -------------------
	// DOP immediate
	function _80(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _e2(name);
	}
	function _82(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _e2(name);
	}
	function _89(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _e2(name);
	}
	function _c2(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _e2(name);
	}
	function _e2(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": Double NOOP" });
	}

	// DOP zeroPage
	function _04(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _64(name);
	}
	function _44(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _64(name);
	}
	function _64(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": Double NOOP" });
	}

	// DOP zeroPageX
	function _14(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f4(name);
	}
	function _34(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f4(name);
	}
	function _54(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f4(name);
	}
	function _74(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f4(name);
	}
	function _d4(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _f4(name);
	}
	function _f4(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": Double NOOP" });
	}

	// TOP -------------------------
	// TOP absolute
	function _0c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": Triple NOOP" });
	}
	// TOP absoluteX
	function _1c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _fc(name);
	}
	function _3c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _fc(name);
	}
	function _5c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _fc(name);
	}
	function _7c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _fc(name);
	}
	function _dc(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  _fc(name);
	}
	function _fc(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	  consoleDebug({ msg: name + ": Triple NOOP" });
	}

	function i08(name) {
	  pushInstruction(name, "P");
	}
	function i28(name) {
	  pullInstruction(name, "P");
	}
	function i48(name) {
	  pushInstruction(name, "A");
	}
	function i68(name) {
	  pullInstruction(name, "A");
	}

	function pushInstruction(name, register) {
	  let byte = exports.reg.A;
	  let valueName = "regA/accumulator=" + fmtToHexBr(exports.reg.A);
	  if (register !== "A") {
	    byte = exports.flags.byte;
	    valueName = "regP/processor status=" + fmtToHexBr(byte);
	  }
	  consoleDebug({ msg: name + ": pushing " + valueName + " to Stack" });
	  exports.memory.pushByteToStack(new ByteEntry(byte));
	}
	function pullInstruction(name, register = "A") {
	  let valueName;
	  let byte = exports.memory.popByteFromStack().value;
	  if (register === "A") {
	    exports.reg.A = byte;
	    valueName = "regA/accumulator=" + fmtToHexBr(exports.reg.A);
	    exports.flags.toggleZeroAndNegative(exports.reg.A);
	  } else {
	    exports.flags.setFromByte(byte);
	    valueName = "regP/processor status=" + fmtToHexBr(exports.flags.byte);
	  }
	  consoleDebug({ msg: name + ": pulling " + valueName + " from Stack" });
	}

	// store accumulator in memory
	function i8d(name) {
	  return store({ name: name, addrMode: "absolute" });
	}
	function i9d(name) {
	  return store({ name: name, addrMode: "absoluteX" });
	}
	function i99(name) {
	  return store({ name: name, addrMode: "absoluteY" });
	}
	function i85(name) {
	  return store({ name: name, addrMode: "zeroPage" });
	}
	function i95(name) {
	  return store({ name: name, addrMode: "zeroPageX" });
	}
	function i81(name) {
	  return store({ name: name, addrMode: "(zeroPage, X)" });
	}
	function i91(name) {
	  return store({ name: name, addrMode: "(zeroPage), Y" });
	}

	// store index X in memory
	function i8e(name) {
	  return store({ name: name, register: "X", addrMode: "absolute" });
	}
	function i86(name) {
	  return store({ name: name, register: "X", addrMode: "zeroPage" });
	}
	function i96(name) {
	  return store({ name: name, register: "X", addrMode: "zeroPageY" });
	}

	// store index Y in memory
	function i8c(name) {
	  return store({ name: name, register: "Y", addrMode: "absolute" });
	}
	function i84(name) {
	  return store({ name: name, register: "Y", addrMode: "zeroPage" });
	}
	function i94(name) {
	  return store({ name: name, register: "Y", addrMode: "zeroPageX" });
	}

	function store({
	  name = "",
	  register = "A",
	  addrMode = "",
	  onlyLowerByte = false,
	} = {}) {
	  let addr = getAddressingModeAddr({
	    addrMode: addrMode,
	    onlyLowerByte: onlyLowerByte,
	  });
	  let lineNumber = addr;
	  if (addr in exports.addressLineNumbers) {
	    lineNumber = exports.addressLineNumbers[addr].lineNumber;
	  }
	  let byteEntry = new WordEntry(exports.reg[register], lineNumber)
	    .lowerByteEntry;
	  exports.memory.writeByte(addr, byteEntry);

	  let msg =
	    name +
	    ": storing reg" +
	    register +
	    "=" +
	    fmtToHexBr(byteEntry.value) +
	    " to addr " +
	    fmtToHexWord(addr);
	  if (addr in exports.addressLineNumbers) {
	    msg += "[lineNo: " + exports.addressLineNumbers[addr].lineNumber + "]";
	  }

	  if (exports.debug) {
	    adjustTextLine(addr, lineNumber);
	  }

	  consoleDebug({ msg: msg });
	  return addr;

	  function adjustTextLine(addr, lineNumber) {
	    if (addr in exports.addressLineNumbers) {
	      let line = exports.editor.state.doc.line(lineNumber);
	      let lastLineText = line.text;
	      let label = "";
	      if (hasLabel(lastLineText)) {
	        label = lastLineText.replace(/^(\w*:).*$/, "$1");
	      }
	      lastLineText = lastLineText.replace(/^\w+:(.*)/, "$1");
	      let lineLeadSpace = lastLineText.replace(/^(\s*).*/, "$1");
	      lastLineText = lastLineText.replace(/^\s+/, "");
	      lastLineText = lastLineText.replace(/\s+$/, "");

	      let lastLineTextInstruction = lastLineText.replace(/(\w+)\s*.*/, "$1");
	      let lastLineTextRemainder = lastLineText.replace(/\w+\s*(\w*)/, "$1");

	      if (exports.addressLineNumbers[addr].isInstruction) {
	        exports.editor.dispatch({
	          changes: {
	            from: line.from,
	            to: line.to,
	            insert:
	              label +
	              lineLeadSpace +
	              Command.getOpCodeName(byteEntry.value) +
	              " " +
	              lastLineTextRemainder +
	              " [" +
	              lastLineTextInstruction +
	              " " +
	              lastLineTextRemainder +
	              "]",
	          },
	        });
	      } else {
	        exports.editor.dispatch({
	          changes: {
	            from: line.from,
	            to: line.to,
	            insert:
	              label +
	              lineLeadSpace +
	              lastLineTextInstruction +
	              " " +
	              fmtToHex(byteEntry.value) +
	              " [" +
	              lastLineTextInstruction +
	              " " +
	              lastLineTextRemainder +
	              "]",
	          },
	        });
	      }
	    }

	    return;
	  }

	  function hasLabel(line) {
	    if (line.match(/^(\w+):.*$/)) {
	      return true;
	    }
	    return false;
	  }
	}

	function i2c(name) {
	  testBits(name, "absolute");
	}
	function i24(name) {
	  testBits(name, "zeroPage");
	}

	function testBits(name, addrMode) {
	  let addr = getAddressingModeAddr(addrMode);
	  let value = exports.memory.readByte(addr).value;

	  consoleDebug({
	    msg:
	      name +
	      ": testing bits " +
	      fmtToHex(value) +
	      " at " +
	      fmtToHexWord(addr) +
	      " with regA/accumulator",
	  });
	  if (value & exports.reg.A) {
	    //0xfd + 0x02 = 0xff
	    exports.flags.zero.clear();
	  } else {
	    exports.flags.zero._set();
	  }
	  let byte = exports.flags.getByteClearedOnNandV() | (value & 0xc0); // 0x3f + 0xc0 = 0xff
	  exports.flags.setFromByte(byte);
	  return;
	}

	function iaa(name) {
	  transfer(name, "A", "X");
	}
	function ia8(name) {
	  transfer(name, "A", "Y");
	}
	function i8a(name) {
	  transfer(name, "X", "A");
	}
	function i98(name) {
	  transfer(name, "Y", "A");
	}
	function iba(name) {
	  transfer(name, "SP", "X");
	}
	function i9a(name) {
	  transfer(name, "X", "SP");
	}

	function transfer(name, srcRegister, dstRegister) {
	  let value = exports.reg[srcRegister];
	  if (srcRegister === "SP") {
	    value = exports.memory.regSP;
	  }
	  value = getLowerByte(value);
	  if (dstRegister === "SP") {
	    exports.memory.setRegSP(value);
	  } else {
	    exports.reg[dstRegister] = value;
	    exports.flags.toggleZeroAndNegative(value); // why for stackpointer?
	  }
	  consoleDebug({
	    msg: name + ": transfering reg" + srcRegister + " to reg" + dstRegister,
	  });
	}

	// prettier-ignore
	var instructions = new Array( //instruction starting with _ is illegal
	  i00, i01, _02, _03, _04, i05, i06, _07, i08, i09, i0a, _0b, _0c, i0d, i0e, _0f,
	  i10, i11, _12, _13, _14, i15, i16, _17, i18, i19, _1a, _1b, _1c, i1d, i1e, _1f,
	  i20, i21, _22, _23, i24, i25, i26, _27, i28, i29, i2a, _2b, i2c, i2d, i2e, _2f,
	  i30, i31, _32, _33, _34, i35, i36, _37, i38, i39, _3a, _3b, _3c, i3d, i3e, _3f,
	  i40, i41, _42, _43, _44, i45, i46, _47, i48, i49, i4a, _4b, i4c, i4d, i4e, _4f,
	  i50, i51, _52, _53, _54, i55, i56, _57, i58, i59, _5a, _5b, _5c, i5d, i5e, _5f,
	  i60, i61, _62, _63, _64, i65, i66, _67, i68, i69, i6a, _6b, i6c, i6d, i6e, _6f,
	  i70, i71, _72, _73, _74, i75, i76, _77, i78, i79, _7a, _7b, _7c, i7d, i7e, _7f,
	  _80, i81, _82, _83, i84, i85, i86, _87, i88, _89, i8a, _8b, i8c, i8d, i8e, _8f,
	  i90, i91, _92, _93, i94, i95, i96, _97, i98, i99, i9a, _9b, _9c, i9d, _9e, _9f,
	  ia0, ia1, ia2, _a3, ia4, ia5, ia6, _a7, ia8, ia9, iaa, _ab, iac, iad, iae, _af,
	  ib0, ib1, _b2, _b3, ib4, ib5, ib6, _b7, ib8, ib9, iba, _bb, ibc, ibd, ibe, _bf,
	  ic0, ic1, _c2, _c3, ic4, ic5, ic6, _c7, ic8, ic9, ica, _cb, icc, icd, ice, _cf,
	  id0, id1, _d2, _d3, _d4, id5, id6, _d7, id8, id9, _da, _db, _dc, idd, ide, _df,
	  ie0, ie1, _e2, _e3, ie4, ie5, ie6, _e7, ie8, ie9, iea, _eb, iec, ied, iee, _ef,
	  if0, if1, _f2, _f3, _f4, if5, if6, _f7, if8, if9, _fa, _fb, _fc, ife, ifd, _ff,
	  i10RelativeMinus,
	  i30RelativeMinus,
	  i50RelativeMinus,
	  i70RelativeMinus,
	  i90RelativeMinus,
	  ib0RelativeMinus,
	  id0RelativeMinus,
	  if0RelativeMinus,
	);

	// Miscellaneous ==============================================================================
	// Break
	function i00(name) {
	  // implied
	  exports.codeRunning = false;
	  exports.flags.break._set();
	  exports.flags.interruptDisable._set();
	  consoleDebug({ msg: name + "BRK : Forcing interrupt" });
	}
	// undefined opcodes ==========================================================================

	// --------------------------------------------------------------------------------------------

	function _c7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP zp
	function _d7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP zp, X
	function _cf(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP abs
	function _df(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP abs, X
	function _db(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP abs, Y
	function _c3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP (ind, X)
	function _d3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // DCP (ind), Y

	function _e7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC zp
	function _f7(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC zp, X
	function _ef(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC abs
	function _ff(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC abs,X
	function _fb(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC abs,Y
	function _e3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC (ind,X)
	function _f3(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // ISC (ind), Y

	function _27(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA zp
	function _37(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA zp,X
	function _2f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA abs
	function _3f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA abs,X
	function _3b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA abs,Y
	function _23(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA (ind,X)
	function _33(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RLA (ind), Y

	function _67(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA zp
	function _77(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA zp,X
	function _6f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA abs
	function _7f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA abs,X
	function _7b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA abs,Y
	function _63(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA (ind, X)
	function _73(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // RRA (ind), Y

	function _07(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO zp
	function _17(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO zp,X
	function _0f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO abs
	function _1f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO abs,X
	function _1b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO abs,Y
	function _03(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO (ind, X)
	function _13(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SLO (ind), Y

	function _47(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE zp
	function _57(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE zp,X
	function _4f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE abs
	function _5f(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE abs,X
	function _5b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE abs,Y
	function _43(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE (ind, X)
	function _53(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SRE (ind), Y

	function _9e(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SXA abs, Y

	function _9c(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // SYA abs, X

	function _8b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // XAA exact operation unknown

	function _9b(name) {
	  if (!exports.allowIllegalOpcode) {
	    ierr(name);
	  }
	} // XAS abs,Y

	/*
	 *  keyPress() - Store keycode in ZP $ff
	 */
	function keyPress(e) {
	  if (typeof window.event != "undefined") {
	    e = window.event;
	  }
	  if (e.type == "keypress") {
	    exports.memory.writeByte(0xff, new ByteEntry(e.which, 0xff));
	  }
	}

	/*
	 *  gotoAddr() - Set PC to address (or address of label)
	 */
	function gotoAddr() {
	  var input = prompt("Enter address or label", "");
	  var addr = 0;
	  if (input in exports.labelAddresses) {
	    addr = exports.labelAddresses[input].address;
	  } else {
	    if (input.match(/^0x[0-9a-f]{1,4}$/i)) {
	      input = input.replace(/^0x/, "");
	      addr = parseInt(input, 16);
	    } else if (input.match(/^\$[0-9a-f]{1,4}$/i)) {
	      input = input.replace(/^\$/, "");
	      addr = parseInt(input, 16);
	    }
	  }
	  if (addr == 0) {
	    alert("Unable to find/parse given address/label");
	  } else {
	    exports.reg.PC = addr; // the actual goto command
	  }
	  exports.debuggeR.updateInfo();
	}

	function toggleScreenSize() {
	  $("#screen").toggleClass("screen-large");
	}

	function toggleBinaryMode() {
	  exports.debuggeR.updateInfo();
	}

	function togglePresentationMode() {
	  let button = $("#largeModeButton");
	  if (button.html() === "Large Mode") {
	    button.html("Normal Mode");
	  } else if (button.html() === "Normal Mode") {
	    button.html("Large Mode");
	  }
	  $("body").toggleClass("presentation-mode");
	}

	function toggleIllegalOpCode() {
	  exports.allowIllegalOpcode = !exports.allowIllegalOpcode;
	}

	/*
	 *  Load() - Loads a file from server
	 */
	function Load({ file } = {}) {
	  exports.codeRunning = false;
	  clearInterval(exports.myInterval);

	  resetEverything();
	  resetMessageWindow();
	  $("#code").value = "Loading, please wait ...";
	  $("#compileButton").prop("disabled", true);
	  $.ajax({
	    url: "./assets/js/examples/" + file,
	    success: function (data, textStatus, _) {
	      if (textStatus == 200) {
	        $("#code").val(data);
	        $("#compileButton").prop("disabled", false);
	      }
	    },
	  });
	  exports.debuggeR.disable();
	}

	/*
	 *  resetEverything() - Reset CPU, memory and html (partly).
	 */
	function resetEverything() {
	  resetEditorTest();
	  exports.compiler = null;
	  exports.error = false;
	  exports.codeRunning = false;
	  exports.display.reset();
	  exports.memory.reset(); // clear ZP, stack

	  exports.reg.A = exports.reg.X = exports.reg.Y = 0x0;
	  exports.reg.PC = 0x600;
	  exports.flags.clearAll();
	  exports.instructionCounter = 0;

	  exports.debuggeR.updateInfo();

	  $("#code").focus();
	  $("#runButton").prop("disabled", true);
	  $("#runButton").html("Run");
	  $("#compileButton").prop("disabled", false);
	  $("#fileSelect").prop("disabled", false);
	  $("#stepButton").prop("disabled", true);
	  $("#gotoButton").prop("disabled", true);
	  $("#hexDumpButton").prop("disabled", true);
	  $("#plainHexDumpButton").prop("disabled", true);
	 
	  //helper
	  function resetEditorTest () {
	    if (typeof exports.codeToCompile !== "undefined") {
	      exports.editor.dispatch({
	        changes: {
	          from: 0,
	          to: exports.editor.state.doc.length,
	          insert: exports.codeToCompile,
	        },
	      });
	    }
	  }
	}

	function compileCode() {
	  resetEverything();
	  resetMessageWindow();

	  const codeToCompileDoc = exports.editor.state.doc;
	  const codeToCompile = codeToCompileDoc.toString();
	  exports.codeToCompile = codeToCompile;
	  if (codeToCompile === "") {
	    resetEverything();
	    printMessage("<b>No code in editor.<\b>");
	    return;
	  }

	  let compiler = new Compiler(codeToCompile).preprocessCode();
	  exports.compiler = compiler;

	  if (compiler.noCode()) {
	    resetEverything();
	    printMessage("<b>No code to run.<\b>");
	    return;
	  }

	  compiler.scanLabels().compile().insertLabelAddressesToMemory();

	  if (exports.error) {
	    resetEverything();
	    return true;
	  }

	  exports.memory = compiler.memory;

	  if (exports.debug) {
	    console.log(exports.memory.toString());
	  }
	  setGuiCompileSuccess();

	  exports.labelAddresses = compiler.labelAddresses;

	  exports.display.updateFull();
	  printMessage("Code compiled successfully, " + compiler.codeLen + " bytes.");

	  setEditorLineNumbers();

	  return;

	  // helper
	  function setGuiCompileSuccess() {
	    $("#runButton").prop("disabled", false);
	    $("#compileButton").prop("disabled", true);
	    $("#fileSelect").prop("disabled", false);
	    $("#hexDumpButton").prop("disabled", false);
	    $("#plainHexDumpButton").prop("disabled", false);
	    return;
	  }
	}

	function setEditorLineNumbers() {
	  const lineNumbersForEditor = exports.memory.getLineNumbersForEditor();
	  const lineCount = exports.editor.viewState.state.doc.text.length;

	  const formatLineNumber = (n, _) => {
	    let n_str = n.toString();

	    if (!(n in lineNumbersForEditor)) {
	      return n_str;
	    }

	    n_str = addLeadingSpace(n_str, lineCount.toString().length);

	    const lineNumber = 0x600 + lineNumbersForEditor[n];
	    return `${fmtToHexBr(lineNumber)}|${n_str}`;
	  };

	  exports.editor.dispatch({
	    effects: exports.lineNumberCompartment.reconfigure(
	      lineNumbers({ formatNumber: formatLineNumber })
	    ),
	  });

	  // helper
	  function addLeadingSpace(n, size) {
	    while (n.length < size) {
	      n = " " + n;
	    }
	    return n;
	  }
	}

	/*
	 *  hexDump() - Dump binary as hex to new window
	 */

	function hexDump({ plain = false } = {}) {
	  let w = window.open(
	    "",
	    plain ? "plainHexDump" : "hexDump",
	    "width=600,height=300,resizable=yes,scrollbars=yes,toolbar=no,location=no,menubar=no,status=no"
	  );

	  let html = "<html><head>";
	  html += "<meta charset='utf-8'";
	  html +=
	    "<link href='assets/css/style.css' rel='stylesheet' type='text/css' />";
	  html +=
	    "<link href='assets/css/bootstrap.min.css' rel='stylesheet' type='text/css' />";
	  html += "<title>hexDump</title></head><body>";
	  html += "<div class='container'>";
	  html += "<div class='row d-flex justify-content-center'>";
	  html += "<div class='col vh-100 overflow-auto'>";
	  html += "<h3>";
	  html += plain === true ? "PlainHexDump" : "HexDump";
	  html += "</h3>";
	  html += "<div>";
	  html += "<a href='#idCodeBegin'>Goto begin of Codearea (0x600)</a>";
	  html += "</div>";
	  html += "<div class='dumpHTML'>";
	  html += "<pre style='font-family:monospace'>";

	  html +=
	    plain === true ? exports.memory.dumpPlainHTML() : exports.memory.dumpHTML();

	  html += "-- [END]";
	  html += "</pre>";
	  html += "</div>";
	  html += "</div>";
	  html += "</div>";
	  html += "</div>";
	  html +=
	    "<script type='text/javascript' src='assets/js/bootstrap.bundle.min.js'></script>";
	  html += "</body></html>";
	  w.document.write(html);
	  w.document.close();
	}

	/*
	 *  runBinary() - Executes the compiled code
	 */
	function runBinary() {
	  if (exports.codeRunning) {
	    /* Switch OFF everything */
	    exports.codeRunning = false;
	    $("#runButton").html("Run");
	    $("#hexDumpButton").prop("disabled", false);
	    $("#plainHexDumpButton").prop("disabled", false);
	    $("#fileSelect").prop("disabled", false);
	    if (!exports.debug) {
	      exports.debuggeR.disable();
	    }
	    clearInterval(exports.myInterval);
	  } else {
	    $("#runButton").html("Stop");
	    $("#hexDumpButton").prop("disabled", true);
	    $("#plainHexDumpButton").prop("disabled", true);
	    $("#fileSelect").prop("disabled", true);
	    if (!exports.debug) {
	      $("#stepButton").prop("disabled", !exports.debug);
	      $("#gotoButton").prop("disabled", !exports.debug);
	    } else {
	      $("#stepButton").prop("disabled", false);
	      $("#gotoButton").prop("disabled", false);
	    }
	    exports.codeRunning = true;
	    exports.myInterval = setInterval((_) => {
	      multiExecute();
	    }, 1);
	  }
	}

	function multiExecute() {
	  if (!exports.debug) {
	    for (let w = 0; w < exports.steps; w++) {
	      executeInstruction();
	    }
	  }
	}

	/*
	 *  executeInstruction() - Executes one instruction. This is the main part of the CPU emulator.
	 */
	function executeInstruction() {
	  if (exports.processorLocked) {
	    return;
	  }
	  if (!exports.codeRunning) {
	    return;
	  }

	  let randomByte = Math.floor(Math.random() * 0x100); // 0x100 = 256
	  exports.memory.writeByte(0xfe, new ByteEntry(randomByte, 0xfe)); // what does this do?

	  let byteEntry = exports.memory.readByte(exports.reg.PC);
	  if (exports.debug) {
	    highlightCodeLine(byteEntry.lineNumber);
	  }
	  let opCode = byteEntry.value;
	  let lineNumber =
	    " [" + byteEntry.lineNumber.toString().padStart(4, " ") + "]";

	  let instruction = instructions[opCode];
	  let name =
	    exports.instructionCounter.toString().padStart(6, " ") +
	    "  " +
	    instruction.name +
	    "/" +
	    Command.getOpCodeName(opCode) +
	    lineNumber;
	  exports.instructionCounter++; //advance instruction counter

	  exports.reg.PC++; //advance programm counter
	  if (!(byteEntry instanceof OpCodeByteEntry)) {
	    console.warn("Using normal ByteEntry as OpCodeByteEntry: " + name);
	  }
	  let addr = instruction(name);
	  if (isDisplayPixel(addr)) {
	    exports.display.updatePixel(addr);
	  }

	  runEnd();
	  return;

	  function highlightCodeLine(lineNumber) {
	    let line = exports.editor.state.doc.line(lineNumber);
	    let lineText = line.text;
	    exports.editor.dispatch({
	      changes: {
	        from: line.from,
	        to: line.to,
	        insert: ">>> " + lineText + " <<<",
	      },
	    });

	    if (exports.started) {
	      let lastLine = exports.editor.state.doc.line(exports.lastLineNumber);
	      exports.editor.dispatch({
	        changes: {
	          from: lastLine.from,
	          to: lastLine.to,
	          insert: exports.lastLineText,
	        },
	      });
	    } else {
	      exports.started = true;
	    }

	    exports.lastLineNumber = lineNumber;
	    exports.lastLineText = lineText;

	    return;
	  }

	  function isDisplayPixel(addr) {
	    if (addr >= 0x200 && addr <= 0x5ff) {
	      return true;
	    }
	    return false;
	  }

	  function runEnd() {
	    if (exports.reg.PC == 0 || !exports.codeRunning) {
	      clearInterval(exports.myInterval);
	      printMessage("Program end at PC=$" + fmtToHex(exports.reg.PC - 1));
	      exports.codeRunning = false;
	      $("#stepButton").prop("disabled", true);
	      $("#gotoButton").prop("disabled", true);
	      $("#runButton").html("Run");
	      $("#fileSelect").prop("disabled", false);
	      $("#hexDumpButton").prop("disabled", false);
	      $("#plainHexDumpButton").prop("disabled", false);
	    }
	  }
	}

	// https://stackoverflow.com/questions/79816/need-javascript-code-for-button-press-and-hold
	// credits to neouser99
	function debugExecHolding(btn, start, speedup) {
	  let timeout;
	  let restart = true;
	  let step = start;

	  $(btn).mousedown(repeat);
	  $(btn).mouseup(clearTimeoutT);

	  function repeat() {
	    if (!exports.codeRunning) {
	      return;
	    }
	    if (restart) {
	      step = start;
	    }
	    restart = false;
	    debugExec();
	    timeout = setTimeout(repeat, step);
	    step /= speedup;
	  }
	  function debugExec() {
	    if (exports.codeRunning) {
	      executeInstruction();
	    }
	    exports.debuggeR.updateInfo();
	  }

	  function clearTimeoutT() {
	    restart = true;
	    clearTimeout(timeout);
	  }
	}

	/*
	 *
	 *  6502 assembler and emulator in Javascript
	 *  (C)2006-2010 Stian Soreng - www.6502asm.com
	 *
	 *  Released under the GNU General Public License
	 *  see http://gnu.org/licenses/gpl.html
	 *
	 */

	var test; // hack to initialize variables spanning over modules

	exports.compiler = null;
	exports.labelAddresses;
	exports.codeRunning = false;
	exports.myInterval;
	exports.display = new Display(0x400);
	exports.debuggeR = new Debugger(); // for some reason, "debugger" cannot be used
	exports.debug = false;
	exports.flags = new Flags();
	exports.instructionCounter = 0;
	exports.memory = {
	  reset: function () {
	    return;
	  },
	  regSP: 0x0,
	};
	exports.reg = {
	  X: 0x0, // register/index X
	  Y: 0x0, // register/index Y
	  PC: 0x600, // program counter
	};

	exports.error = false;
	exports.addressLineNumbers = {};

	exports.lastLineText = "";
	exports.lastLineNumber = 0;
	exports.started = false;

	exports.allowIllegalOpcode;

	// editor stuff
	(exports.lineNumberCompartment = new Compartment(
	  (exports.processorLocked = false)
	)),
	  (exports.editor = new EditorView({
	    state: EditorState.create({
	      extensions: [
	        basicSetup,
	        StreamLanguage.define(gas),
	        //assembler6502(),
	        //langTest(),
	        foldGutter(),
	        exports.lineNumberCompartment.of(lineNumbers()),
	      ],
	    }),
	  }));

	$(".code-area").append(exports.editor.dom);

	$("#realTimeDebugCheckbox").click(
	  exports.debuggeR.toggle.bind(exports.debuggeR)
	);
	$("#binaryCheckbox").click(toggleBinaryMode);
	$("#screen").click(toggleScreenSize);
	$("#illegalOpCodeCheckbox").click(toggleIllegalOpCode);

	// $("#code").keypress(disableButtons);
	document.addEventListener("keypress", keyPress, true);

	$("#compileButton").click(compileCode);
	$("#runButton").click(runBinary);
	$("#resetButton").click((_) => {
	  resetEverything();
	  resetMessageWindow();
	});
	$("#hexDumpButton").click(hexDump);
	$("#plainHexDumpButton").click(() => hexDump({ plain: true }));
	$("#largeModeButton").click(togglePresentationMode);
	$("#fileSelect").change((event) => Load({ file: event.target.value }));
	$("#gotoButton").click(gotoAddr);

	$("#realTimeDebugCheckbox").prop("checked", false);
	$("#binaryCheckbox").prop("checked", false);
	$("#illegalOpCodeCheckbox").prop("checked", false);

	$("#largeModeButton").prop("disabled", false);

	$("#hexDumpButton").prop("disabled", true);
	$("#plainHexDumpButton").prop("disabled", true);
	$("#resetButton").prop("disabled", false);
	$("#stepButton").prop("disabled", true);
	$("#gotoButton").prop("disabled", true);

	debugExecHolding("#stepButton", 600, 1.25);

	resetEverything();
	resetMessageWindow();
	let slider = $("#stepsSlider");
	slider.val(5);

	exports.steps = 2 ** 5;
	slider.on("input", function () {
	  exports.steps = 2 ** this.value;
	});

	exports.test = test;

	Object.defineProperty(exports, '__esModule', { value: true });

	return exports;

})({});
